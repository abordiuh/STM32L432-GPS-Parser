
D:\Conestoga\ABordiuh_GPS\Debug\ABordiuh_GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08009e20  08009e20  00019e20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a2a4  0800a2a4  0001a2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a2ac  0800a2ac  0001a2ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a2b0  0800a2b0  0001a2b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000056c  20000000  0800a2b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000274  2000056c  0800a820  0002056c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200007e0  0800a820  000207e0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002056c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001209d  00000000  00000000  0002059c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000028da  00000000  00000000  00032639  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000097c3  00000000  00000000  00034f13  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c98  00000000  00000000  0003e6d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000fc8  00000000  00000000  0003f370  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000063ed  00000000  00000000  00040338  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004958  00000000  00000000  00046725  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  0004b07d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000035ec  00000000  00000000  0004b0fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000056c 	.word	0x2000056c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e08 	.word	0x08009e08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000570 	.word	0x20000570
 80001cc:	08009e08 	.word	0x08009e08

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpun>:
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x10>
 8000b4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b52:	d10a      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x20>
 8000b5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0001 	mov.w	r0, #1
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2iz>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b78:	d215      	bcs.n	8000ba6 <__aeabi_d2iz+0x36>
 8000b7a:	d511      	bpl.n	8000ba0 <__aeabi_d2iz+0x30>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d912      	bls.n	8000bac <__aeabi_d2iz+0x3c>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d105      	bne.n	8000bb8 <__aeabi_d2iz+0x48>
 8000bac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_d2uiz>:
 8000bc0:	004a      	lsls	r2, r1, #1
 8000bc2:	d211      	bcs.n	8000be8 <__aeabi_d2uiz+0x28>
 8000bc4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc8:	d211      	bcs.n	8000bee <__aeabi_d2uiz+0x2e>
 8000bca:	d50d      	bpl.n	8000be8 <__aeabi_d2uiz+0x28>
 8000bcc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd4:	d40e      	bmi.n	8000bf4 <__aeabi_d2uiz+0x34>
 8000bd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000be2:	fa23 f002 	lsr.w	r0, r3, r2
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d102      	bne.n	8000bfa <__aeabi_d2uiz+0x3a>
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	4770      	bx	lr
 8000bfa:	f04f 0000 	mov.w	r0, #0
 8000bfe:	4770      	bx	lr

08000c00 <__aeabi_d2f>:
 8000c00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c08:	bf24      	itt	cs
 8000c0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c12:	d90d      	bls.n	8000c30 <__aeabi_d2f+0x30>
 8000c14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c28:	bf08      	it	eq
 8000c2a:	f020 0001 	biceq.w	r0, r0, #1
 8000c2e:	4770      	bx	lr
 8000c30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c34:	d121      	bne.n	8000c7a <__aeabi_d2f+0x7a>
 8000c36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c3a:	bfbc      	itt	lt
 8000c3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	4770      	bxlt	lr
 8000c42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c4a:	f1c2 0218 	rsb	r2, r2, #24
 8000c4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c56:	fa20 f002 	lsr.w	r0, r0, r2
 8000c5a:	bf18      	it	ne
 8000c5c:	f040 0001 	orrne.w	r0, r0, #1
 8000c60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c6c:	ea40 000c 	orr.w	r0, r0, ip
 8000c70:	fa23 f302 	lsr.w	r3, r3, r2
 8000c74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c78:	e7cc      	b.n	8000c14 <__aeabi_d2f+0x14>
 8000c7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7e:	d107      	bne.n	8000c90 <__aeabi_d2f+0x90>
 8000c80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c84:	bf1e      	ittt	ne
 8000c86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8e:	4770      	bxne	lr
 8000c90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_uldivmod>:
 8000ca0:	b953      	cbnz	r3, 8000cb8 <__aeabi_uldivmod+0x18>
 8000ca2:	b94a      	cbnz	r2, 8000cb8 <__aeabi_uldivmod+0x18>
 8000ca4:	2900      	cmp	r1, #0
 8000ca6:	bf08      	it	eq
 8000ca8:	2800      	cmpeq	r0, #0
 8000caa:	bf1c      	itt	ne
 8000cac:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb4:	f000 b97e 	b.w	8000fb4 <__aeabi_idiv0>
 8000cb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc0:	f000 f806 	bl	8000cd0 <__udivmoddi4>
 8000cc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ccc:	b004      	add	sp, #16
 8000cce:	4770      	bx	lr

08000cd0 <__udivmoddi4>:
 8000cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd4:	468c      	mov	ip, r1
 8000cd6:	460e      	mov	r6, r1
 8000cd8:	4604      	mov	r4, r0
 8000cda:	9d08      	ldr	r5, [sp, #32]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d150      	bne.n	8000d82 <__udivmoddi4+0xb2>
 8000ce0:	428a      	cmp	r2, r1
 8000ce2:	4617      	mov	r7, r2
 8000ce4:	d96c      	bls.n	8000dc0 <__udivmoddi4+0xf0>
 8000ce6:	fab2 fe82 	clz	lr, r2
 8000cea:	f1be 0f00 	cmp.w	lr, #0
 8000cee:	d00b      	beq.n	8000d08 <__udivmoddi4+0x38>
 8000cf0:	f1ce 0420 	rsb	r4, lr, #32
 8000cf4:	fa20 f404 	lsr.w	r4, r0, r4
 8000cf8:	fa01 f60e 	lsl.w	r6, r1, lr
 8000cfc:	ea44 0c06 	orr.w	ip, r4, r6
 8000d00:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d08:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	fbbc f0f9 	udiv	r0, ip, r9
 8000d12:	fa1f f887 	uxth.w	r8, r7
 8000d16:	fb09 c610 	mls	r6, r9, r0, ip
 8000d1a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000d1e:	fb00 f308 	mul.w	r3, r0, r8
 8000d22:	42b3      	cmp	r3, r6
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0x6a>
 8000d26:	19f6      	adds	r6, r6, r7
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	f080 8122 	bcs.w	8000f74 <__udivmoddi4+0x2a4>
 8000d30:	42b3      	cmp	r3, r6
 8000d32:	f240 811f 	bls.w	8000f74 <__udivmoddi4+0x2a4>
 8000d36:	3802      	subs	r0, #2
 8000d38:	443e      	add	r6, r7
 8000d3a:	1af6      	subs	r6, r6, r3
 8000d3c:	b2a2      	uxth	r2, r4
 8000d3e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000d42:	fb09 6613 	mls	r6, r9, r3, r6
 8000d46:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000d4a:	fb03 f808 	mul.w	r8, r3, r8
 8000d4e:	45a0      	cmp	r8, r4
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x96>
 8000d52:	19e4      	adds	r4, r4, r7
 8000d54:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d58:	f080 810a 	bcs.w	8000f70 <__udivmoddi4+0x2a0>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f240 8107 	bls.w	8000f70 <__udivmoddi4+0x2a0>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	ebc8 0404 	rsb	r4, r8, r4
 8000d6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2d00      	cmp	r5, #0
 8000d72:	d062      	beq.n	8000e3a <__udivmoddi4+0x16a>
 8000d74:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d78:	2300      	movs	r3, #0
 8000d7a:	602c      	str	r4, [r5, #0]
 8000d7c:	606b      	str	r3, [r5, #4]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0xc6>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d055      	beq.n	8000e36 <__udivmoddi4+0x166>
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000d90:	4608      	mov	r0, r1
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f183 	clz	r1, r3
 8000d9a:	2900      	cmp	r1, #0
 8000d9c:	f040 8090 	bne.w	8000ec0 <__udivmoddi4+0x1f0>
 8000da0:	42b3      	cmp	r3, r6
 8000da2:	d302      	bcc.n	8000daa <__udivmoddi4+0xda>
 8000da4:	4282      	cmp	r2, r0
 8000da6:	f200 80f8 	bhi.w	8000f9a <__udivmoddi4+0x2ca>
 8000daa:	1a84      	subs	r4, r0, r2
 8000dac:	eb66 0603 	sbc.w	r6, r6, r3
 8000db0:	2001      	movs	r0, #1
 8000db2:	46b4      	mov	ip, r6
 8000db4:	2d00      	cmp	r5, #0
 8000db6:	d040      	beq.n	8000e3a <__udivmoddi4+0x16a>
 8000db8:	e885 1010 	stmia.w	r5, {r4, ip}
 8000dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc0:	b912      	cbnz	r2, 8000dc8 <__udivmoddi4+0xf8>
 8000dc2:	2701      	movs	r7, #1
 8000dc4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000dc8:	fab7 fe87 	clz	lr, r7
 8000dcc:	f1be 0f00 	cmp.w	lr, #0
 8000dd0:	d135      	bne.n	8000e3e <__udivmoddi4+0x16e>
 8000dd2:	1bf3      	subs	r3, r6, r7
 8000dd4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dd8:	fa1f fc87 	uxth.w	ip, r7
 8000ddc:	2101      	movs	r1, #1
 8000dde:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de2:	0c22      	lsrs	r2, r4, #16
 8000de4:	fb08 3610 	mls	r6, r8, r0, r3
 8000de8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000dec:	fb0c f300 	mul.w	r3, ip, r0
 8000df0:	42b3      	cmp	r3, r6
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x134>
 8000df4:	19f6      	adds	r6, r6, r7
 8000df6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x132>
 8000dfc:	42b3      	cmp	r3, r6
 8000dfe:	f200 80ce 	bhi.w	8000f9e <__udivmoddi4+0x2ce>
 8000e02:	4610      	mov	r0, r2
 8000e04:	1af6      	subs	r6, r6, r3
 8000e06:	b2a2      	uxth	r2, r4
 8000e08:	fbb6 f3f8 	udiv	r3, r6, r8
 8000e0c:	fb08 6613 	mls	r6, r8, r3, r6
 8000e10:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000e14:	fb0c fc03 	mul.w	ip, ip, r3
 8000e18:	45a4      	cmp	ip, r4
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x15c>
 8000e1c:	19e4      	adds	r4, r4, r7
 8000e1e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x15a>
 8000e24:	45a4      	cmp	ip, r4
 8000e26:	f200 80b5 	bhi.w	8000f94 <__udivmoddi4+0x2c4>
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	ebcc 0404 	rsb	r4, ip, r4
 8000e30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e34:	e79c      	b.n	8000d70 <__udivmoddi4+0xa0>
 8000e36:	4629      	mov	r1, r5
 8000e38:	4628      	mov	r0, r5
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	f1ce 0120 	rsb	r1, lr, #32
 8000e42:	fa06 f30e 	lsl.w	r3, r6, lr
 8000e46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e4a:	fa20 f901 	lsr.w	r9, r0, r1
 8000e4e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e52:	40ce      	lsrs	r6, r1
 8000e54:	ea49 0903 	orr.w	r9, r9, r3
 8000e58:	fbb6 faf8 	udiv	sl, r6, r8
 8000e5c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000e60:	fb08 661a 	mls	r6, r8, sl, r6
 8000e64:	fa1f fc87 	uxth.w	ip, r7
 8000e68:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000e6c:	fb0a f20c 	mul.w	r2, sl, ip
 8000e70:	429a      	cmp	r2, r3
 8000e72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e76:	d90a      	bls.n	8000e8e <__udivmoddi4+0x1be>
 8000e78:	19db      	adds	r3, r3, r7
 8000e7a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000e7e:	f080 8087 	bcs.w	8000f90 <__udivmoddi4+0x2c0>
 8000e82:	429a      	cmp	r2, r3
 8000e84:	f240 8084 	bls.w	8000f90 <__udivmoddi4+0x2c0>
 8000e88:	f1aa 0a02 	sub.w	sl, sl, #2
 8000e8c:	443b      	add	r3, r7
 8000e8e:	1a9b      	subs	r3, r3, r2
 8000e90:	fa1f f989 	uxth.w	r9, r9
 8000e94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e98:	fb08 3311 	mls	r3, r8, r1, r3
 8000e9c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000ea0:	fb01 f60c 	mul.w	r6, r1, ip
 8000ea4:	429e      	cmp	r6, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x1e8>
 8000ea8:	19db      	adds	r3, r3, r7
 8000eaa:	f101 32ff 	add.w	r2, r1, #4294967295
 8000eae:	d26b      	bcs.n	8000f88 <__udivmoddi4+0x2b8>
 8000eb0:	429e      	cmp	r6, r3
 8000eb2:	d969      	bls.n	8000f88 <__udivmoddi4+0x2b8>
 8000eb4:	3902      	subs	r1, #2
 8000eb6:	443b      	add	r3, r7
 8000eb8:	1b9b      	subs	r3, r3, r6
 8000eba:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000ebe:	e78e      	b.n	8000dde <__udivmoddi4+0x10e>
 8000ec0:	f1c1 0e20 	rsb	lr, r1, #32
 8000ec4:	fa22 f40e 	lsr.w	r4, r2, lr
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	4323      	orrs	r3, r4
 8000ecc:	fa20 f70e 	lsr.w	r7, r0, lr
 8000ed0:	fa06 f401 	lsl.w	r4, r6, r1
 8000ed4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ed8:	fa26 f60e 	lsr.w	r6, r6, lr
 8000edc:	433c      	orrs	r4, r7
 8000ede:	fbb6 f9fc 	udiv	r9, r6, ip
 8000ee2:	0c27      	lsrs	r7, r4, #16
 8000ee4:	fb0c 6619 	mls	r6, ip, r9, r6
 8000ee8:	fa1f f883 	uxth.w	r8, r3
 8000eec:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000ef0:	fb09 f708 	mul.w	r7, r9, r8
 8000ef4:	42b7      	cmp	r7, r6
 8000ef6:	fa02 f201 	lsl.w	r2, r2, r1
 8000efa:	fa00 fa01 	lsl.w	sl, r0, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x242>
 8000f00:	18f6      	adds	r6, r6, r3
 8000f02:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f06:	d241      	bcs.n	8000f8c <__udivmoddi4+0x2bc>
 8000f08:	42b7      	cmp	r7, r6
 8000f0a:	d93f      	bls.n	8000f8c <__udivmoddi4+0x2bc>
 8000f0c:	f1a9 0902 	sub.w	r9, r9, #2
 8000f10:	441e      	add	r6, r3
 8000f12:	1bf6      	subs	r6, r6, r7
 8000f14:	b2a0      	uxth	r0, r4
 8000f16:	fbb6 f4fc 	udiv	r4, r6, ip
 8000f1a:	fb0c 6614 	mls	r6, ip, r4, r6
 8000f1e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000f22:	fb04 f808 	mul.w	r8, r4, r8
 8000f26:	45b8      	cmp	r8, r7
 8000f28:	d907      	bls.n	8000f3a <__udivmoddi4+0x26a>
 8000f2a:	18ff      	adds	r7, r7, r3
 8000f2c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000f30:	d228      	bcs.n	8000f84 <__udivmoddi4+0x2b4>
 8000f32:	45b8      	cmp	r8, r7
 8000f34:	d926      	bls.n	8000f84 <__udivmoddi4+0x2b4>
 8000f36:	3c02      	subs	r4, #2
 8000f38:	441f      	add	r7, r3
 8000f3a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000f3e:	ebc8 0707 	rsb	r7, r8, r7
 8000f42:	fba0 8902 	umull	r8, r9, r0, r2
 8000f46:	454f      	cmp	r7, r9
 8000f48:	4644      	mov	r4, r8
 8000f4a:	464e      	mov	r6, r9
 8000f4c:	d314      	bcc.n	8000f78 <__udivmoddi4+0x2a8>
 8000f4e:	d029      	beq.n	8000fa4 <__udivmoddi4+0x2d4>
 8000f50:	b365      	cbz	r5, 8000fac <__udivmoddi4+0x2dc>
 8000f52:	ebba 0304 	subs.w	r3, sl, r4
 8000f56:	eb67 0706 	sbc.w	r7, r7, r6
 8000f5a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000f5e:	40cb      	lsrs	r3, r1
 8000f60:	40cf      	lsrs	r7, r1
 8000f62:	ea4e 0303 	orr.w	r3, lr, r3
 8000f66:	e885 0088 	stmia.w	r5, {r3, r7}
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f70:	4613      	mov	r3, r2
 8000f72:	e6f8      	b.n	8000d66 <__udivmoddi4+0x96>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e6e0      	b.n	8000d3a <__udivmoddi4+0x6a>
 8000f78:	ebb8 0402 	subs.w	r4, r8, r2
 8000f7c:	eb69 0603 	sbc.w	r6, r9, r3
 8000f80:	3801      	subs	r0, #1
 8000f82:	e7e5      	b.n	8000f50 <__udivmoddi4+0x280>
 8000f84:	4604      	mov	r4, r0
 8000f86:	e7d8      	b.n	8000f3a <__udivmoddi4+0x26a>
 8000f88:	4611      	mov	r1, r2
 8000f8a:	e795      	b.n	8000eb8 <__udivmoddi4+0x1e8>
 8000f8c:	4681      	mov	r9, r0
 8000f8e:	e7c0      	b.n	8000f12 <__udivmoddi4+0x242>
 8000f90:	468a      	mov	sl, r1
 8000f92:	e77c      	b.n	8000e8e <__udivmoddi4+0x1be>
 8000f94:	3b02      	subs	r3, #2
 8000f96:	443c      	add	r4, r7
 8000f98:	e748      	b.n	8000e2c <__udivmoddi4+0x15c>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e70a      	b.n	8000db4 <__udivmoddi4+0xe4>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	443e      	add	r6, r7
 8000fa2:	e72f      	b.n	8000e04 <__udivmoddi4+0x134>
 8000fa4:	45c2      	cmp	sl, r8
 8000fa6:	d3e7      	bcc.n	8000f78 <__udivmoddi4+0x2a8>
 8000fa8:	463e      	mov	r6, r7
 8000faa:	e7d1      	b.n	8000f50 <__udivmoddi4+0x280>
 8000fac:	4629      	mov	r1, r5
 8000fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fc8:	f000 fb50 	bl	800166c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	4621      	mov	r1, r4
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd4:	f000 fb16 	bl	8001604 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000fd8:	2000      	movs	r0, #0
 8000fda:	bd10      	pop	{r4, pc}
 8000fdc:	20000000 	.word	0x20000000

08000fe0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe0:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe2:	2003      	movs	r0, #3
 8000fe4:	f000 fafc 	bl	80015e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f7ff ffe5 	bl	8000fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fee:	f002 fc1b 	bl	8003828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	bd08      	pop	{r3, pc}
	...

08000ff8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000ff8:	4a02      	ldr	r2, [pc, #8]	; (8001004 <HAL_IncTick+0xc>)
 8000ffa:	6813      	ldr	r3, [r2, #0]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	200006c4 	.word	0x200006c4

08001008 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001008:	4b01      	ldr	r3, [pc, #4]	; (8001010 <HAL_GetTick+0x8>)
 800100a:	6818      	ldr	r0, [r3, #0]
}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	200006c4 	.word	0x200006c4

08001014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001014:	b538      	push	{r3, r4, r5, lr}
 8001016:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8001018:	f7ff fff6 	bl	8001008 <HAL_GetTick>
 800101c:	4605      	mov	r5, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800101e:	f7ff fff3 	bl	8001008 <HAL_GetTick>
 8001022:	1b40      	subs	r0, r0, r5
 8001024:	42a0      	cmp	r0, r4
 8001026:	d3fa      	bcc.n	800101e <HAL_Delay+0xa>
  {
  }
}
 8001028:	bd38      	pop	{r3, r4, r5, pc}
	...

0800102c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800102c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmpCFGR = 0;
  __IO uint32_t wait_loop_index = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	9301      	str	r3, [sp, #4]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001032:	4604      	mov	r4, r0
 8001034:	2800      	cmp	r0, #0
 8001036:	f000 80c4 	beq.w	80011c2 <HAL_ADC_Init+0x196>
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800103a:	6d85      	ldr	r5, [r0, #88]	; 0x58
 800103c:	b925      	cbnz	r5, 8001048 <HAL_ADC_Init+0x1c>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800103e:	f002 fc39 	bl	80038b4 <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001042:	65e5      	str	r5, [r4, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001044:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
  }
  
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  /*  Exit deep power down mode if still in that state */
  if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_DEEPPWD))
 8001048:	6823      	ldr	r3, [r4, #0]
 800104a:	689a      	ldr	r2, [r3, #8]
 800104c:	0092      	lsls	r2, r2, #2
  {
    /* Exit deep power down mode */ 
    CLEAR_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 800104e:	bf42      	ittt	mi
 8001050:	689a      	ldrmi	r2, [r3, #8]
 8001052:	f022 5200 	bicmi.w	r2, r2, #536870912	; 0x20000000
 8001056:	609a      	strmi	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if  (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	00d7      	lsls	r7, r2, #3
 800105c:	d504      	bpl.n	8001068 <HAL_ADC_Init+0x3c>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))  
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	00d6      	lsls	r6, r2, #3
 8001062:	d513      	bpl.n	800108c <HAL_ADC_Init+0x60>
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001064:	2000      	movs	r0, #0
 8001066:	e01a      	b.n	800109e <HAL_ADC_Init+0x72>
  }
  
  if  (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
  {  
    /* Enable ADC internal voltage regulator */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN);
 8001068:	689a      	ldr	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles.                                           */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 800106a:	495c      	ldr	r1, [pc, #368]	; (80011dc <HAL_ADC_Init+0x1b0>)
  }
  
  if  (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
  {  
    /* Enable ADC internal voltage regulator */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN);
 800106c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001070:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles.                                           */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 8001072:	4a5b      	ldr	r2, [pc, #364]	; (80011e0 <HAL_ADC_Init+0x1b4>)
 8001074:	6812      	ldr	r2, [r2, #0]
 8001076:	fbb2 f1f1 	udiv	r1, r2, r1
 800107a:	220a      	movs	r2, #10
 800107c:	434a      	muls	r2, r1
    while(wait_loop_index != 0)
    {
      wait_loop_index--;
 800107e:	9201      	str	r2, [sp, #4]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles.                                           */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / (1000000 * 2)));
    while(wait_loop_index != 0)
 8001080:	9a01      	ldr	r2, [sp, #4]
 8001082:	2a00      	cmp	r2, #0
 8001084:	d0eb      	beq.n	800105e <HAL_ADC_Init+0x32>
    {
      wait_loop_index--;
 8001086:	9a01      	ldr	r2, [sp, #4]
 8001088:	3a01      	subs	r2, #1
 800108a:	e7f8      	b.n	800107e <HAL_ADC_Init+0x52>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))  
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800108c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800108e:	f042 0210 	orr.w	r2, r2, #16
 8001092:	65a2      	str	r2, [r4, #88]	; 0x58
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001094:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001096:	f042 0201 	orr.w	r2, r2, #1
 800109a:	65e2      	str	r2, [r4, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 800109c:	2001      	movs	r0, #1
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800109e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80010a0:	06d5      	lsls	r5, r2, #27
 80010a2:	f100 808a 	bmi.w	80011ba <HAL_ADC_Init+0x18e>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)  )
 80010a6:	689a      	ldr	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010a8:	0751      	lsls	r1, r2, #29
 80010aa:	f100 8086 	bmi.w	80011ba <HAL_ADC_Init+0x18e>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)  )
  {
    
    /* Initialize the ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80010ae:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80010b0:	f042 0202 	orr.w	r2, r2, #2
 80010b4:	65a2      	str	r2, [r4, #88]	; 0x58
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	f002 0203 	and.w	r2, r2, #3
 80010bc:	2a01      	cmp	r2, #1
 80010be:	f040 8082 	bne.w	80011c6 <HAL_ADC_Init+0x19a>
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	07d2      	lsls	r2, r2, #31
 80010c6:	d57e      	bpl.n	80011c6 <HAL_ADC_Init+0x19a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010cc:	fa91 f1a1 	rbit	r1, r1
 80010d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 80010d4:	fab1 f581 	clz	r5, r1
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 80010d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80010da:	fa92 f2a2 	rbit	r2, r2
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 80010de:	68e1      	ldr	r1, [r4, #12]
 80010e0:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 80010e2:	430f      	orrs	r7, r1
 80010e4:	68a1      	ldr	r1, [r4, #8]
 80010e6:	430f      	orrs	r7, r1
 80010e8:	69e1      	ldr	r1, [r4, #28]
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 80010ea:	fab2 f282 	clz	r2, r2
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 80010ee:	40a9      	lsls	r1, r5
 80010f0:	4339      	orrs	r1, r7
 80010f2:	fa06 f202 	lsl.w	r2, r6, r2
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010f6:	2e01      	cmp	r6, #1
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 80010f8:	ea42 0201 	orr.w	r2, r2, r1
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010fc:	d109      	bne.n	8001112 <HAL_ADC_Init+0xe6>
 80010fe:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8001102:	fa91 f1a1 	rbit	r1, r1
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001106:	fab1 f581 	clz	r5, r1
 800110a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800110c:	3901      	subs	r1, #1
 800110e:	40a9      	lsls	r1, r5
 8001110:	430a      	orrs	r2, r1
    /* start.                                                                 */
    /*  - external trigger to start conversion     Init.ExternalTrigConv      */
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /* Note:  parameter ExternalTrigConvEdge set to "trigger edge none" is    */
    /*        equivalent to software start.                                   */
    if ((hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001112:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8001114:	2d01      	cmp	r5, #1
 8001116:	d003      	beq.n	8001120 <HAL_ADC_Init+0xf4>
    &&  (hadc->Init.ExternalTrigConvEdge != ADC_EXTERNALTRIGCONVEDGE_NONE))
 8001118:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800111a:	b109      	cbz	r1, 8001120 <HAL_ADC_Init+0xf4>
    {
      tmpCFGR |= ( hadc->Init.ExternalTrigConv |  hadc->Init.ExternalTrigConvEdge);
 800111c:	4329      	orrs	r1, r5
 800111e:	430a      	orrs	r2, r1
    }
    
     /* Update Configuration Register CFGR */
     MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 8001120:	68dd      	ldr	r5, [r3, #12]
 8001122:	4930      	ldr	r1, [pc, #192]	; (80011e4 <HAL_ADC_Init+0x1b8>)
 8001124:	4029      	ands	r1, r5
 8001126:	430a      	orrs	r2, r1
 8001128:	60da      	str	r2, [r3, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	f012 0f0c 	tst.w	r2, #12
 8001130:	d12e      	bne.n	8001190 <HAL_ADC_Init+0x164>
 8001132:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001136:	fa92 f2a2 	rbit	r2, r2
 800113a:	2502      	movs	r5, #2
    {
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800113c:	fab2 f282 	clz	r2, r2
 8001140:	fa95 f5a5 	rbit	r5, r5
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 8001144:	fab5 f685 	clz	r6, r5
               
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8001148:	69a5      	ldr	r5, [r4, #24]
 800114a:	68d9      	ldr	r1, [r3, #12]
 800114c:	fa05 f202 	lsl.w	r2, r5, r2
 8001150:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001152:	40b5      	lsls	r5, r6
 8001154:	4315      	orrs	r5, r2
 8001156:	f421 4280 	bic.w	r2, r1, #16384	; 0x4000
 800115a:	f022 0202 	bic.w	r2, r2, #2
 800115e:	432a      	orrs	r2, r5
 8001160:	60da      	str	r2, [r3, #12]
    
 
      if (hadc->Init.OversamplingMode == ENABLE)
 8001162:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001164:	2a01      	cmp	r2, #1
 8001166:	d10f      	bne.n	8001188 <HAL_ADC_Init+0x15c>
       /* Configuration of Oversampler:                                       */
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS, 
 8001168:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800116a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800116c:	6919      	ldr	r1, [r3, #16]
 800116e:	432a      	orrs	r2, r5
 8001170:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8001172:	f042 0201 	orr.w	r2, r2, #1
 8001176:	432a      	orrs	r2, r5
 8001178:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800117a:	4315      	orrs	r5, r2
 800117c:	f421 62ff 	bic.w	r2, r1, #2040	; 0x7f8
 8001180:	f022 0205 	bic.w	r2, r2, #5
 8001184:	432a      	orrs	r2, r5
 8001186:	e002      	b.n	800118e <HAL_ADC_Init+0x162>
                               hadc->Init.Oversampling.OversamplingStopReset);
      }
      else
      {
        /* Disable Regular OverSampling */
        CLEAR_BIT( hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001188:	691a      	ldr	r2, [r3, #16]
 800118a:	f022 0201 	bic.w	r2, r2, #1
 800118e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001190:	6922      	ldr	r2, [r4, #16]
 8001192:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));  
 8001194:	bf08      	it	eq
 8001196:	6a21      	ldreq	r1, [r4, #32]
 8001198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800119a:	bf03      	ittte	eq
 800119c:	f101 31ff 	addeq.w	r1, r1, #4294967295
 80011a0:	f022 020f 	biceq.w	r2, r2, #15
 80011a4:	430a      	orreq	r2, r1
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011a6:	f022 020f 	bicne.w	r2, r2, #15
 80011aa:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80011ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011ae:	f023 0303 	bic.w	r3, r3, #3
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	65a3      	str	r3, [r4, #88]	; 0x58
 80011b8:	e00d      	b.n	80011d6 <HAL_ADC_Init+0x1aa>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011bc:	f043 0310 	orr.w	r3, r3, #16
 80011c0:	65a3      	str	r3, [r4, #88]	; 0x58
  __IO uint32_t wait_loop_index = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80011c2:	2001      	movs	r0, #1
 80011c4:	e007      	b.n	80011d6 <HAL_ADC_Init+0x1aa>
      /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
           
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_PRESC|ADC_CCR_CKMODE, hadc->Init.ClockPrescaler);
 80011c6:	4d08      	ldr	r5, [pc, #32]	; (80011e8 <HAL_ADC_Init+0x1bc>)
 80011c8:	68aa      	ldr	r2, [r5, #8]
 80011ca:	f422 117c 	bic.w	r1, r2, #4128768	; 0x3f0000
 80011ce:	6862      	ldr	r2, [r4, #4]
 80011d0:	430a      	orrs	r2, r1
 80011d2:	60aa      	str	r2, [r5, #8]
 80011d4:	e778      	b.n	80010c8 <HAL_ADC_Init+0x9c>
    tmp_hal_status = HAL_ERROR;
  }  /*  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)  && (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)  ) */
  
  /* Return function status */
  return tmp_hal_status;
}
 80011d6:	b003      	add	sp, #12
 80011d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011da:	bf00      	nop
 80011dc:	001e8480 	.word	0x001e8480
 80011e0:	20000000 	.word	0x20000000
 80011e4:	fff0c007 	.word	0xfff0c007
 80011e8:	50040300 	.word	0x50040300

080011ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011f2:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	f000 815a 	beq.w	80014b0 <HAL_ADC_ConfigChannel+0x2c4>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011fc:	6803      	ldr	r3, [r0, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001200:	2401      	movs	r4, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001202:	0756      	lsls	r6, r2, #29
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001204:	f880 4054 	strb.w	r4, [r0, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001208:	f100 8149 	bmi.w	800149e <HAL_ADC_ConfigChannel+0x2b2>
  {
    
      /* Regular sequence configuration */
      /* Clear the old SQx bits then set the new ones for the selected rank */
      /* For Rank 1 to 4 */
      if (sConfig->Rank < 5)
 800120c:	684a      	ldr	r2, [r1, #4]
 800120e:	680c      	ldr	r4, [r1, #0]
 8001210:	2a04      	cmp	r2, #4
 8001212:	f44f 65f8 	mov.w	r5, #1984	; 0x7c0
 8001216:	d815      	bhi.n	8001244 <HAL_ADC_ConfigChannel+0x58>
      {      
        MODIFY_REG(hadc->Instance->SQR1, 
 8001218:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 800121a:	fa95 f6a5 	rbit	r6, r5
 800121e:	fab6 f686 	clz	r6, r6
 8001222:	fa95 f5a5 	rbit	r5, r5
 8001226:	f04f 0e1f 	mov.w	lr, #31
 800122a:	4356      	muls	r6, r2
 800122c:	fab5 f585 	clz	r5, r5
 8001230:	fa0e f606 	lsl.w	r6, lr, r6
 8001234:	436a      	muls	r2, r5
 8001236:	ea27 0606 	bic.w	r6, r7, r6
 800123a:	fa04 f202 	lsl.w	r2, r4, r2
 800123e:	4332      	orrs	r2, r6
 8001240:	631a      	str	r2, [r3, #48]	; 0x30
 8001242:	e048      	b.n	80012d6 <HAL_ADC_ConfigChannel+0xea>
                  ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank), 
                  ADC_SQR1_RK(sConfig->Channel, sConfig->Rank));
      }
      /* For Rank 5 to 9 */
      else if (sConfig->Rank < 10)
 8001244:	2a09      	cmp	r2, #9
 8001246:	d816      	bhi.n	8001276 <HAL_ADC_ConfigChannel+0x8a>
      {
        MODIFY_REG(hadc->Instance->SQR2, 
 8001248:	f8d3 e034 	ldr.w	lr, [r3, #52]	; 0x34
 800124c:	fa95 f6a5 	rbit	r6, r5
 8001250:	fab6 f686 	clz	r6, r6
 8001254:	1f57      	subs	r7, r2, #5
 8001256:	fa95 f5a5 	rbit	r5, r5
 800125a:	fab5 f285 	clz	r2, r5
 800125e:	437e      	muls	r6, r7
 8001260:	251f      	movs	r5, #31
 8001262:	fa05 f606 	lsl.w	r6, r5, r6
 8001266:	437a      	muls	r2, r7
 8001268:	ea2e 0606 	bic.w	r6, lr, r6
 800126c:	fa04 f202 	lsl.w	r2, r4, r2
 8001270:	4332      	orrs	r2, r6
 8001272:	635a      	str	r2, [r3, #52]	; 0x34
 8001274:	e02f      	b.n	80012d6 <HAL_ADC_ConfigChannel+0xea>
                  ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank), 
                  ADC_SQR2_RK(sConfig->Channel, sConfig->Rank));
      }
      /* For Rank 10 to 14 */
      else if (sConfig->Rank < 15)
 8001276:	2a0e      	cmp	r2, #14
 8001278:	d817      	bhi.n	80012aa <HAL_ADC_ConfigChannel+0xbe>
      {
        MODIFY_REG(hadc->Instance->SQR3, 
 800127a:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
 800127e:	fa95 f7a5 	rbit	r7, r5
 8001282:	fab7 f787 	clz	r7, r7
 8001286:	f1a2 060a 	sub.w	r6, r2, #10
 800128a:	fa95 f5a5 	rbit	r5, r5
 800128e:	fab5 f285 	clz	r2, r5
 8001292:	4377      	muls	r7, r6
 8001294:	251f      	movs	r5, #31
 8001296:	fa05 f707 	lsl.w	r7, r5, r7
 800129a:	4372      	muls	r2, r6
 800129c:	ea2e 0707 	bic.w	r7, lr, r7
 80012a0:	fa04 f202 	lsl.w	r2, r4, r2
 80012a4:	433a      	orrs	r2, r7
 80012a6:	639a      	str	r2, [r3, #56]	; 0x38
 80012a8:	e015      	b.n	80012d6 <HAL_ADC_ConfigChannel+0xea>
                  ADC_SQR3_RK(sConfig->Channel, sConfig->Rank));
      }
      /* For Rank 15 to 16 */
      else
      {   
        MODIFY_REG(hadc->Instance->SQR4, 
 80012aa:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 80012ac:	fa95 f6a5 	rbit	r6, r5
 80012b0:	fab6 f686 	clz	r6, r6
 80012b4:	3a0f      	subs	r2, #15
 80012b6:	fa95 f5a5 	rbit	r5, r5
 80012ba:	f04f 0e1f 	mov.w	lr, #31
 80012be:	4356      	muls	r6, r2
 80012c0:	fab5 f585 	clz	r5, r5
 80012c4:	fa0e f606 	lsl.w	r6, lr, r6
 80012c8:	436a      	muls	r2, r5
 80012ca:	ea27 0606 	bic.w	r6, r7, r6
 80012ce:	fa04 f202 	lsl.w	r2, r4, r2
 80012d2:	4332      	orrs	r2, r6
 80012d4:	63da      	str	r2, [r3, #60]	; 0x3c
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	f012 0f0c 	tst.w	r2, #12
 80012dc:	f040 80c1 	bne.w	8001462 <HAL_ADC_ConfigChannel+0x276>
      {
       
        /* Channel sampling time configuration */
        /* Clear the old sample time then set the new one for the selected channel */
        /* For channels 10 to 18 */
        if (sConfig->Channel >= ADC_CHANNEL_10)
 80012e0:	2c09      	cmp	r4, #9
 80012e2:	f04f 0238 	mov.w	r2, #56	; 0x38
 80012e6:	688f      	ldr	r7, [r1, #8]
 80012e8:	d919      	bls.n	800131e <HAL_ADC_ConfigChannel+0x132>
        {
          ADC_SMPR2_SETTING(hadc, sConfig->SamplingTime, sConfig->Channel);
 80012ea:	f8d3 c018 	ldr.w	ip, [r3, #24]
 80012ee:	fa92 fea2 	rbit	lr, r2
 80012f2:	fabe fe8e 	clz	lr, lr
 80012f6:	f1a4 060a 	sub.w	r6, r4, #10
 80012fa:	fa92 f2a2 	rbit	r2, r2
 80012fe:	fab2 f582 	clz	r5, r2
 8001302:	fb06 f20e 	mul.w	r2, r6, lr
 8001306:	f04f 0e07 	mov.w	lr, #7
 800130a:	fa0e f202 	lsl.w	r2, lr, r2
 800130e:	436e      	muls	r6, r5
 8001310:	ea2c 0202 	bic.w	r2, ip, r2
 8001314:	fa07 f506 	lsl.w	r5, r7, r6
 8001318:	4315      	orrs	r5, r2
 800131a:	619d      	str	r5, [r3, #24]
 800131c:	e014      	b.n	8001348 <HAL_ADC_ConfigChannel+0x15c>
        }
        else /* For channels 0 to 9 */
        {
          ADC_SMPR1_SETTING(hadc, sConfig->SamplingTime, sConfig->Channel);
 800131e:	695d      	ldr	r5, [r3, #20]
 8001320:	fa92 f6a2 	rbit	r6, r2
 8001324:	fab6 f686 	clz	r6, r6
 8001328:	fa92 f2a2 	rbit	r2, r2
 800132c:	f04f 0e07 	mov.w	lr, #7
 8001330:	fab2 f282 	clz	r2, r2
 8001334:	4366      	muls	r6, r4
 8001336:	fa0e f606 	lsl.w	r6, lr, r6
 800133a:	4362      	muls	r2, r4
 800133c:	ea25 0606 	bic.w	r6, r5, r6
 8001340:	fa07 f502 	lsl.w	r5, r7, r2
 8001344:	4335      	orrs	r5, r6
 8001346:	615d      	str	r5, [r3, #20]
  
       /* Configure the offset: offset enable/disable, channel, offset value */
  
       /* Shift the offset with respect to the selected ADC resolution. */
       /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
       tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001348:	68da      	ldr	r2, [r3, #12]
      
       switch (sConfig->OffsetNumber)
 800134a:	690d      	ldr	r5, [r1, #16]
  
       /* Configure the offset: offset enable/disable, channel, offset value */
  
       /* Shift the offset with respect to the selected ADC resolution. */
       /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
       tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800134c:	694e      	ldr	r6, [r1, #20]
 800134e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8001352:	0052      	lsls	r2, r2, #1
      
       switch (sConfig->OffsetNumber)
 8001354:	3d01      	subs	r5, #1
  
       /* Configure the offset: offset enable/disable, channel, offset value */
  
       /* Shift the offset with respect to the selected ADC resolution. */
       /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
       tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001356:	4096      	lsls	r6, r2
 8001358:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
      
       switch (sConfig->OffsetNumber)
 800135c:	2d03      	cmp	r5, #3
 800135e:	d83e      	bhi.n	80013de <HAL_ADC_ConfigChannel+0x1f2>
 8001360:	e8df f005 	tbb	[pc, r5]
 8001364:	2f201102 	.word	0x2f201102
        /* Configure offset register i when applicable:                         */
        /* - Enable offset                                                      */
        /* - Set channel number                                                 */
        /* - Set offset value                                                   */
       case ADC_OFFSET_1:
          MODIFY_REG(hadc->Instance->OFR1,
 8001368:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 800136a:	fa92 f5a2 	rbit	r5, r2
 800136e:	4a97      	ldr	r2, [pc, #604]	; (80015cc <HAL_ADC_ConfigChannel+0x3e0>)
 8001370:	403a      	ands	r2, r7
 8001372:	fab5 f585 	clz	r5, r5
 8001376:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800137a:	4332      	orrs	r2, r6
 800137c:	fa04 f505 	lsl.w	r5, r4, r5
 8001380:	432a      	orrs	r2, r5
 8001382:	661a      	str	r2, [r3, #96]	; 0x60
                  ADC_OFR_FIELDS,
                  ADC_OFR1_OFFSET1_EN | ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);                                   
         break;
 8001384:	e06d      	b.n	8001462 <HAL_ADC_ConfigChannel+0x276>
      
       case ADC_OFFSET_2:
         MODIFY_REG(hadc->Instance->OFR2,
 8001386:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8001388:	fa92 f5a2 	rbit	r5, r2
 800138c:	4a8f      	ldr	r2, [pc, #572]	; (80015cc <HAL_ADC_ConfigChannel+0x3e0>)
 800138e:	403a      	ands	r2, r7
 8001390:	fab5 f585 	clz	r5, r5
 8001394:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001398:	4332      	orrs	r2, r6
 800139a:	fa04 f505 	lsl.w	r5, r4, r5
 800139e:	432a      	orrs	r2, r5
 80013a0:	665a      	str	r2, [r3, #100]	; 0x64
                  ADC_OFR_FIELDS, 
                  ADC_OFR2_OFFSET2_EN | ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);                                  
         break;
 80013a2:	e05e      	b.n	8001462 <HAL_ADC_ConfigChannel+0x276>
          
       case ADC_OFFSET_3:
         MODIFY_REG(hadc->Instance->OFR3,
 80013a4:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 80013a6:	fa92 f2a2 	rbit	r2, r2
 80013aa:	4d88      	ldr	r5, [pc, #544]	; (80015cc <HAL_ADC_ConfigChannel+0x3e0>)
 80013ac:	403d      	ands	r5, r7
 80013ae:	fab2 f282 	clz	r2, r2
 80013b2:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80013b6:	432e      	orrs	r6, r5
 80013b8:	fa04 f202 	lsl.w	r2, r4, r2
 80013bc:	4332      	orrs	r2, r6
 80013be:	669a      	str	r2, [r3, #104]	; 0x68
                  ADC_OFR_FIELDS,
                  ADC_OFR3_OFFSET3_EN | ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);                                  
         break;
 80013c0:	e04f      	b.n	8001462 <HAL_ADC_ConfigChannel+0x276>
      
       case ADC_OFFSET_4:
         MODIFY_REG(hadc->Instance->OFR4,
 80013c2:	6edf      	ldr	r7, [r3, #108]	; 0x6c
 80013c4:	fa92 f2a2 	rbit	r2, r2
 80013c8:	4d80      	ldr	r5, [pc, #512]	; (80015cc <HAL_ADC_ConfigChannel+0x3e0>)
 80013ca:	403d      	ands	r5, r7
 80013cc:	fab2 f282 	clz	r2, r2
 80013d0:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80013d4:	432e      	orrs	r6, r5
 80013d6:	fa04 f202 	lsl.w	r2, r4, r2
 80013da:	4332      	orrs	r2, r6
 80013dc:	e040      	b.n	8001460 <HAL_ADC_ConfigChannel+0x274>
       /* Case ADC_OFFSET_NONE */
       default :
       /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
         if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013de:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80013e0:	fa92 f2a2 	rbit	r2, r2
 80013e4:	fab2 f282 	clz	r2, r2
 80013e8:	fa04 f202 	lsl.w	r2, r4, r2
 80013ec:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80013f0:	4295      	cmp	r5, r2
         {
           CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80013f2:	bf02      	ittt	eq
 80013f4:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 80013f6:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80013fa:	661a      	streq	r2, [r3, #96]	; 0x60
         }
         if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013fc:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80013fe:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8001402:	fa92 f2a2 	rbit	r2, r2
 8001406:	fab2 f282 	clz	r2, r2
 800140a:	fa04 f202 	lsl.w	r2, r4, r2
 800140e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8001412:	4295      	cmp	r5, r2
         {
           CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN);
 8001414:	bf02      	ittt	eq
 8001416:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 8001418:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800141c:	665a      	streq	r2, [r3, #100]	; 0x64
         }
         if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800141e:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8001420:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8001424:	fa92 f2a2 	rbit	r2, r2
 8001428:	fab2 f282 	clz	r2, r2
 800142c:	fa04 f202 	lsl.w	r2, r4, r2
 8001430:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8001434:	4295      	cmp	r5, r2
         {
           CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001436:	bf02      	ittt	eq
 8001438:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 800143a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800143e:	669a      	streq	r2, [r3, #104]	; 0x68
         }
         if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001440:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8001442:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8001446:	fa92 f2a2 	rbit	r2, r2
 800144a:	fab2 f282 	clz	r2, r2
 800144e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8001452:	fa04 f202 	lsl.w	r2, r4, r2
 8001456:	4295      	cmp	r5, r2
 8001458:	d103      	bne.n	8001462 <HAL_ADC_ConfigChannel+0x276>
         {
           CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800145a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800145c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001460:	66da      	str	r2, [r3, #108]	; 0x6c
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	f002 0203 	and.w	r2, r2, #3
 8001468:	2a01      	cmp	r2, #1
 800146a:	d102      	bne.n	8001472 <HAL_ADC_ConfigChannel+0x286>
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	07d5      	lsls	r5, r2, #31
 8001470:	d413      	bmi.n	800149a <HAL_ADC_ConfigChannel+0x2ae>
    {
      /* Configuration of differential mode */
      if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001472:	68ca      	ldr	r2, [r1, #12]
 8001474:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001478:	f04f 0201 	mov.w	r2, #1
 800147c:	d01a      	beq.n	80014b4 <HAL_ADC_ConfigChannel+0x2c8>
      {
        /* Disable differential mode (default mode: single-ended) */
        CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800147e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001482:	40a2      	lsls	r2, r4
 8001484:	ea21 0202 	bic.w	r2, r1, r2
 8001488:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
    
  
      /* If the requested internal measurement path has already been enabled,   */
      /* bypass the configuration processing.                                   */
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800148c:	2c11      	cmp	r4, #17
 800148e:	d14b      	bne.n	8001528 <HAL_ADC_ConfigChannel+0x33c>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001490:	4a4f      	ldr	r2, [pc, #316]	; (80015d0 <HAL_ADC_ConfigChannel+0x3e4>)
 8001492:	6892      	ldr	r2, [r2, #8]
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
    
  
      /* If the requested internal measurement path has already been enabled,   */
      /* bypass the configuration processing.                                   */
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001494:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001498:	d054      	beq.n	8001544 <HAL_ADC_ConfigChannel+0x358>
  * @param  sConfig: Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800149a:	2400      	movs	r4, #0
 800149c:	e003      	b.n	80014a6 <HAL_ADC_ConfigChannel+0x2ba>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800149e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80014a0:	f043 0320 	orr.w	r3, r3, #32
 80014a4:	6583      	str	r3, [r0, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014a6:	2300      	movs	r3, #0
 80014a8:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  
  /* Return function status */
  return tmp_hal_status;
 80014ac:	4620      	mov	r0, r4
 80014ae:	e08a      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x3da>
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014b0:	2002      	movs	r0, #2
 80014b2:	e088      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x3da>
        CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
      }
      else
      {
        /* Enable differential mode */
        SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80014b4:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 80014b8:	40a2      	lsls	r2, r4
 80014ba:	432a      	orrs	r2, r5
        
        /* Sampling time configuration of channel ADC_IN+1 (negative input)     */
        /* Clear the old sample time then set the new one for the selected      */
        /* channel.                                                             */
        /* Starting from channel 9, SMPR2 register must be configured           */
        if (sConfig->Channel >= ADC_CHANNEL_9)
 80014bc:	2c08      	cmp	r4, #8
        CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
      }
      else
      {
        /* Enable differential mode */
        SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80014be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80014c2:	688d      	ldr	r5, [r1, #8]
 80014c4:	f04f 0238 	mov.w	r2, #56	; 0x38
        
        /* Sampling time configuration of channel ADC_IN+1 (negative input)     */
        /* Clear the old sample time then set the new one for the selected      */
        /* channel.                                                             */
        /* Starting from channel 9, SMPR2 register must be configured           */
        if (sConfig->Channel >= ADC_CHANNEL_9)
 80014c8:	d917      	bls.n	80014fa <HAL_ADC_ConfigChannel+0x30e>
        {
          ADC_SMPR2_SETTING(hadc, sConfig->SamplingTime, sConfig->Channel+1);
 80014ca:	699f      	ldr	r7, [r3, #24]
 80014cc:	fa92 f6a2 	rbit	r6, r2
 80014d0:	fab6 f686 	clz	r6, r6
 80014d4:	f1a4 0109 	sub.w	r1, r4, #9
 80014d8:	fa92 f2a2 	rbit	r2, r2
 80014dc:	f04f 0e07 	mov.w	lr, #7
 80014e0:	fab2 f282 	clz	r2, r2
 80014e4:	434e      	muls	r6, r1
 80014e6:	fa0e f606 	lsl.w	r6, lr, r6
 80014ea:	4351      	muls	r1, r2
 80014ec:	ea27 0606 	bic.w	r6, r7, r6
 80014f0:	fa05 f201 	lsl.w	r2, r5, r1
 80014f4:	4332      	orrs	r2, r6
 80014f6:	619a      	str	r2, [r3, #24]
 80014f8:	e7c8      	b.n	800148c <HAL_ADC_ConfigChannel+0x2a0>
        }
        else /* For channels 0 to 8, SMPR1 must be configured */
        {
          ADC_SMPR1_SETTING(hadc, sConfig->SamplingTime, sConfig->Channel+1);
 80014fa:	695f      	ldr	r7, [r3, #20]
 80014fc:	fa92 f6a2 	rbit	r6, r2
 8001500:	fab6 f686 	clz	r6, r6
 8001504:	1c61      	adds	r1, r4, #1
 8001506:	fa92 f2a2 	rbit	r2, r2
 800150a:	f04f 0e07 	mov.w	lr, #7
 800150e:	fab2 f282 	clz	r2, r2
 8001512:	434e      	muls	r6, r1
 8001514:	fa0e f606 	lsl.w	r6, lr, r6
 8001518:	434a      	muls	r2, r1
 800151a:	ea27 0606 	bic.w	r6, r7, r6
 800151e:	fa05 f202 	lsl.w	r2, r5, r2
 8001522:	4332      	orrs	r2, r6
 8001524:	615a      	str	r2, [r3, #20]
 8001526:	e7b1      	b.n	800148c <HAL_ADC_ConfigChannel+0x2a0>
    
  
      /* If the requested internal measurement path has already been enabled,   */
      /* bypass the configuration processing.                                   */
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001528:	2c12      	cmp	r4, #18
 800152a:	d104      	bne.n	8001536 <HAL_ADC_ConfigChannel+0x34a>
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800152c:	4a28      	ldr	r2, [pc, #160]	; (80015d0 <HAL_ADC_ConfigChannel+0x3e4>)
 800152e:	6892      	ldr	r2, [r2, #8]
  
      /* If the requested internal measurement path has already been enabled,   */
      /* bypass the configuration processing.                                   */
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001530:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001534:	e7b0      	b.n	8001498 <HAL_ADC_ConfigChannel+0x2ac>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001536:	2c00      	cmp	r4, #0
 8001538:	d1af      	bne.n	800149a <HAL_ADC_ConfigChannel+0x2ae>
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800153a:	4a25      	ldr	r2, [pc, #148]	; (80015d0 <HAL_ADC_ConfigChannel+0x3e4>)
 800153c:	6892      	ldr	r2, [r2, #8]
      /* bypass the configuration processing.                                   */
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800153e:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8001542:	e7a9      	b.n	8001498 <HAL_ADC_ConfigChannel+0x2ac>
      {
        /* Configuration of common ADC parameters (continuation)                */
  
        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	f002 0203 	and.w	r2, r2, #3
 800154a:	2a01      	cmp	r2, #1
 800154c:	d108      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x374>
 800154e:	6819      	ldr	r1, [r3, #0]
 8001550:	07c9      	lsls	r1, r1, #31
 8001552:	d505      	bpl.n	8001560 <HAL_ADC_ConfigChannel+0x374>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else  
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001554:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001556:	f043 0320 	orr.w	r3, r3, #32
 800155a:	6583      	str	r3, [r0, #88]	; 0x58
          
          tmp_hal_status = HAL_ERROR;
 800155c:	4614      	mov	r4, r2
 800155e:	e7a2      	b.n	80014a6 <HAL_ADC_ConfigChannel+0x2ba>
        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
        {
          if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001560:	2c11      	cmp	r4, #17
 8001562:	d116      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x3a6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 8001564:	4a1b      	ldr	r2, [pc, #108]	; (80015d4 <HAL_ADC_ConfigChannel+0x3e8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d197      	bne.n	800149a <HAL_ADC_ConfigChannel+0x2ae>
            {
              SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800156a:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
 800156e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001572:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially          */
              /*       CPU processing cycles.                                 */
              wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 8001576:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <HAL_ADC_ConfigChannel+0x3ec>)
 8001578:	4a18      	ldr	r2, [pc, #96]	; (80015dc <HAL_ADC_ConfigChannel+0x3f0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001580:	2378      	movs	r3, #120	; 0x78
 8001582:	4353      	muls	r3, r2
              while(wait_loop_index != 0)
              {
                wait_loop_index--;
 8001584:	9301      	str	r3, [sp, #4]
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially          */
              /*       CPU processing cycles.                                 */
              wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / (1000000 * 2)));
              while(wait_loop_index != 0)
 8001586:	9b01      	ldr	r3, [sp, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d086      	beq.n	800149a <HAL_ADC_ConfigChannel+0x2ae>
              {
                wait_loop_index--;
 800158c:	9b01      	ldr	r3, [sp, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	e7f8      	b.n	8001584 <HAL_ADC_ConfigChannel+0x398>
              }
            }
          }
          else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8001592:	2c12      	cmp	r4, #18
 8001594:	d109      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x3be>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001596:	4a0f      	ldr	r2, [pc, #60]	; (80015d4 <HAL_ADC_ConfigChannel+0x3e8>)
 8001598:	4293      	cmp	r3, r2
            {
              SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800159a:	bf02      	ittt	eq
 800159c:	f8d2 3308 	ldreq.w	r3, [r2, #776]	; 0x308
 80015a0:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
 80015a4:	f8c2 3308 	streq.w	r3, [r2, #776]	; 0x308
 80015a8:	e777      	b.n	800149a <HAL_ADC_ConfigChannel+0x2ae>
            }
          }
          else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80015aa:	2c00      	cmp	r4, #0
 80015ac:	f47f af75 	bne.w	800149a <HAL_ADC_ConfigChannel+0x2ae>
          { 
            if (ADC_VREFINT_INSTANCE(hadc))
 80015b0:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <HAL_ADC_ConfigChannel+0x3e8>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	f47f af71 	bne.w	800149a <HAL_ADC_ConfigChannel+0x2ae>
            {
              SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80015b8:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
 80015bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015c0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
 80015c4:	e76f      	b.n	80014a6 <HAL_ADC_ConfigChannel+0x2ba>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 80015c6:	b003      	add	sp, #12
 80015c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015ca:	bf00      	nop
 80015cc:	03fff000 	.word	0x03fff000
 80015d0:	50040300 	.word	0x50040300
 80015d4:	50040000 	.word	0x50040000
 80015d8:	20000000 	.word	0x20000000
 80015dc:	001e8480 	.word	0x001e8480

080015e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e0:	4a07      	ldr	r2, [pc, #28]	; (8001600 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80015e2:	68d3      	ldr	r3, [r2, #12]
 80015e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015e8:	041b      	lsls	r3, r3, #16
 80015ea:	0c1b      	lsrs	r3, r3, #16
 80015ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80015f0:	0200      	lsls	r0, r0, #8
 80015f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80015fa:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80015fc:	60d3      	str	r3, [r2, #12]
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001604:	4b17      	ldr	r3, [pc, #92]	; (8001664 <HAL_NVIC_SetPriority+0x60>)
 8001606:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001608:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800160c:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800160e:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001612:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001614:	2c04      	cmp	r4, #4
 8001616:	bf28      	it	cs
 8001618:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161a:	2d06      	cmp	r5, #6

  return (
 800161c:	f04f 0501 	mov.w	r5, #1
 8001620:	fa05 f404 	lsl.w	r4, r5, r4
 8001624:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001628:	bf8c      	ite	hi
 800162a:	3b03      	subhi	r3, #3
 800162c:	2300      	movls	r3, #0

  return (
 800162e:	400c      	ands	r4, r1
 8001630:	409c      	lsls	r4, r3
 8001632:	fa05 f303 	lsl.w	r3, r5, r3
 8001636:	3b01      	subs	r3, #1
 8001638:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800163a:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800163c:	ea42 0204 	orr.w	r2, r2, r4
 8001640:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001644:	bfaf      	iteee	ge
 8001646:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164a:	f000 000f 	andlt.w	r0, r0, #15
 800164e:	4b06      	ldrlt	r3, [pc, #24]	; (8001668 <HAL_NVIC_SetPriority+0x64>)
 8001650:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001652:	bfa5      	ittet	ge
 8001654:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001658:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165a:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001660:	bd30      	pop	{r4, r5, pc}
 8001662:	bf00      	nop
 8001664:	e000ed00 	.word	0xe000ed00
 8001668:	e000ed14 	.word	0xe000ed14

0800166c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800166c:	3801      	subs	r0, #1
 800166e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001672:	d20a      	bcs.n	800168a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001676:	4a07      	ldr	r2, [pc, #28]	; (8001694 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001678:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167a:	21f0      	movs	r1, #240	; 0xf0
 800167c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001680:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001682:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001684:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 800168a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000e010 	.word	0xe000e010
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800169a:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800169c:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800169e:	bf0c      	ite	eq
 80016a0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80016a4:	f022 0204 	bicne.w	r2, r2, #4
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	4770      	bx	lr
 80016ac:	e000e010 	.word	0xe000e010

080016b0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80016b0:	4770      	bx	lr

080016b2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80016b2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80016b4:	f7ff fffc 	bl	80016b0 <HAL_SYSTICK_Callback>
 80016b8:	bd08      	pop	{r3, pc}

080016ba <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016ba:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d003      	beq.n	80016ca <HAL_DMA_Abort+0x10>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c2:	2304      	movs	r3, #4
 80016c4:	63c3      	str	r3, [r0, #60]	; 0x3c
        
    status = HAL_ERROR;
 80016c6:	2001      	movs	r0, #1
 80016c8:	4770      	bx	lr
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ca:	6803      	ldr	r3, [r0, #0]
    
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016cc:	6c01      	ldr	r1, [r0, #64]	; 0x40
    status = HAL_ERROR;
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	f022 020e 	bic.w	r2, r2, #14
 80016d4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	f022 0201 	bic.w	r2, r2, #1
 80016dc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016de:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80016e0:	2201      	movs	r2, #1
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	604b      	str	r3, [r1, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);      
 80016e8:	2300      	movs	r3, #0
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ea:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);      
 80016ee:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 80016f2:	4618      	mov	r0, r3

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);      
  }
  return status; 
}
 80016f4:	4770      	bx	lr
	...

080016f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016fc:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80016fe:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001700:	f8df c168 	ldr.w	ip, [pc, #360]	; 800186c <HAL_GPIO_Init+0x174>
 8001704:	4c57      	ldr	r4, [pc, #348]	; (8001864 <HAL_GPIO_Init+0x16c>)
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001706:	9301      	str	r3, [sp, #4]
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001708:	f04f 080f 	mov.w	r8, #15
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 800170c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800170e:	9a01      	ldr	r2, [sp, #4]
 8001710:	40da      	lsrs	r2, r3
 8001712:	f000 80a4 	beq.w	800185e <HAL_GPIO_Init+0x166>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001716:	2201      	movs	r2, #1
 8001718:	fa02 f903 	lsl.w	r9, r2, r3

    if(iocurrent)
 800171c:	9a01      	ldr	r2, [sp, #4]
 800171e:	ea12 0509 	ands.w	r5, r2, r9
 8001722:	f000 809a 	beq.w	800185a <HAL_GPIO_Init+0x162>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001726:	684a      	ldr	r2, [r1, #4]
 8001728:	f022 0a10 	bic.w	sl, r2, #16
 800172c:	f1ba 0f02 	cmp.w	sl, #2
 8001730:	d113      	bne.n	800175a <HAL_GPIO_Init+0x62>
 8001732:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001736:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800173a:	f003 0b07 	and.w	fp, r3, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800173e:	f8de 7020 	ldr.w	r7, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001742:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001746:	fa08 f60b 	lsl.w	r6, r8, fp
 800174a:	ea27 0706 	bic.w	r7, r7, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800174e:	690e      	ldr	r6, [r1, #16]
 8001750:	fa06 f60b 	lsl.w	r6, r6, fp
 8001754:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8001756:	f8ce 6020 	str.w	r6, [lr, #32]
 800175a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800175e:	2603      	movs	r6, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001760:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001762:	fa06 f60e 	lsl.w	r6, r6, lr
 8001766:	43f6      	mvns	r6, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001768:	f002 0b03 	and.w	fp, r2, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800176c:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800176e:	fa0b fb0e 	lsl.w	fp, fp, lr
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001772:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001776:	ea4b 0707 	orr.w	r7, fp, r7
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800177a:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 800177e:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001780:	d811      	bhi.n	80017a6 <HAL_GPIO_Init+0xae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001782:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8001784:	ea06 0a07 	and.w	sl, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8001788:	68cf      	ldr	r7, [r1, #12]
 800178a:	fa07 f70e 	lsl.w	r7, r7, lr
 800178e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001792:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001794:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001796:	ea27 0909 	bic.w	r9, r7, r9
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800179a:	f3c2 1700 	ubfx	r7, r2, #4, #1
 800179e:	409f      	lsls	r7, r3
 80017a0:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80017a4:	6047      	str	r7, [r0, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017a6:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80017a8:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80017aa:	688f      	ldr	r7, [r1, #8]
 80017ac:	fa07 f70e 	lsl.w	r7, r7, lr
 80017b0:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 80017b2:	60c6      	str	r6, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017b4:	00d6      	lsls	r6, r2, #3
 80017b6:	d550      	bpl.n	800185a <HAL_GPIO_Init+0x162>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b8:	f8dc 6060 	ldr.w	r6, [ip, #96]	; 0x60
 80017bc:	f046 0601 	orr.w	r6, r6, #1
 80017c0:	f8cc 6060 	str.w	r6, [ip, #96]	; 0x60
 80017c4:	f8dc 6060 	ldr.w	r6, [ip, #96]	; 0x60
 80017c8:	f006 0601 	and.w	r6, r6, #1
 80017cc:	9603      	str	r6, [sp, #12]
 80017ce:	9e03      	ldr	r6, [sp, #12]
 80017d0:	f023 0603 	bic.w	r6, r3, #3
 80017d4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80017d8:	f506 3680 	add.w	r6, r6, #65536	; 0x10000

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80017dc:	f003 0903 	and.w	r9, r3, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 80017e0:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80017e2:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80017e6:	fa08 fe09 	lsl.w	lr, r8, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80017ea:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80017ee:	ea27 0a0e 	bic.w	sl, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80017f2:	d00b      	beq.n	800180c <HAL_GPIO_Init+0x114>
 80017f4:	4f1c      	ldr	r7, [pc, #112]	; (8001868 <HAL_GPIO_Init+0x170>)
 80017f6:	42b8      	cmp	r0, r7
 80017f8:	d00b      	beq.n	8001812 <HAL_GPIO_Init+0x11a>
 80017fa:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80017fe:	42b8      	cmp	r0, r7
 8001800:	bf14      	ite	ne
 8001802:	f04f 0e07 	movne.w	lr, #7
 8001806:	f04f 0e02 	moveq.w	lr, #2
 800180a:	e004      	b.n	8001816 <HAL_GPIO_Init+0x11e>
 800180c:	f04f 0e00 	mov.w	lr, #0
 8001810:	e001      	b.n	8001816 <HAL_GPIO_Init+0x11e>
 8001812:	f04f 0e01 	mov.w	lr, #1
 8001816:	fa0e f909 	lsl.w	r9, lr, r9
 800181a:	ea49 070a 	orr.w	r7, r9, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 800181e:	60b7      	str	r7, [r6, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001820:	4e10      	ldr	r6, [pc, #64]	; (8001864 <HAL_GPIO_Init+0x16c>)
 8001822:	6836      	ldr	r6, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8001824:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001826:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
        temp &= ~((uint32_t)iocurrent);
 800182a:	bf0c      	ite	eq
 800182c:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 800182e:	432e      	orrne	r6, r5
        }
        EXTI->IMR1 = temp;
 8001830:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR1;
 8001832:	6866      	ldr	r6, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001834:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;

        temp = EXTI->EMR1;
        temp &= ~((uint32_t)iocurrent);
 8001838:	bf0c      	ite	eq
 800183a:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 800183c:	432e      	orrne	r6, r5
        }
        EXTI->EMR1 = temp;
 800183e:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001840:	68a6      	ldr	r6, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001842:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        }
        EXTI->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~((uint32_t)iocurrent);
 8001846:	bf0c      	ite	eq
 8001848:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 800184a:	432e      	orrne	r6, r5
        }
        EXTI->RTSR1 = temp;
 800184c:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR1;
 800184e:	68e6      	ldr	r6, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001850:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~((uint32_t)iocurrent);
 8001852:	bf54      	ite	pl
 8001854:	403e      	andpl	r6, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8001856:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR1 = temp;
 8001858:	60e6      	str	r6, [r4, #12]
      }
    }
    
    position++;
 800185a:	3301      	adds	r3, #1
 800185c:	e757      	b.n	800170e <HAL_GPIO_Init+0x16>
  }
}
 800185e:	b005      	add	sp, #20
 8001860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001864:	40010400 	.word	0x40010400
 8001868:	48000400 	.word	0x48000400
 800186c:	40021000 	.word	0x40021000

08001870 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001870:	b10a      	cbz	r2, 8001876 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001872:	6181      	str	r1, [r0, #24]
 8001874:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001876:	6281      	str	r1, [r0, #40]	; 0x28
 8001878:	4770      	bx	lr
	...

0800187c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 800187c:	4b02      	ldr	r3, [pc, #8]	; (8001888 <HAL_PWREx_GetVoltageRange+0xc>)
 800187e:	6818      	ldr	r0, [r3, #0]
}
 8001880:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40007000 	.word	0x40007000

0800188c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800188c:	4b17      	ldr	r3, [pc, #92]	; (80018ec <HAL_PWREx_ControlVoltageScaling+0x60>)
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800188e:	681a      	ldr	r2, [r3, #0]
  uint32_t wait_loop_index = 0;  

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001890:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001894:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  uint32_t wait_loop_index = 0;  

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001898:	d11a      	bne.n	80018d0 <HAL_PWREx_ControlVoltageScaling+0x44>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800189a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800189e:	d020      	beq.n	80018e2 <HAL_PWREx_ControlVoltageScaling+0x56>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a0:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 80018a2:	4913      	ldr	r1, [pc, #76]	; (80018f0 <HAL_PWREx_ControlVoltageScaling+0x64>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a4:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80018a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ac:	601a      	str	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 80018ae:	4a11      	ldr	r2, [pc, #68]	; (80018f4 <HAL_PWREx_ControlVoltageScaling+0x68>)
 80018b0:	6812      	ldr	r2, [r2, #0]
 80018b2:	fbb2 f1f1 	udiv	r1, r2, r1
 80018b6:	2232      	movs	r2, #50	; 0x32
 80018b8:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 80018ba:	b122      	cbz	r2, 80018c6 <HAL_PWREx_ControlVoltageScaling+0x3a>
 80018bc:	6959      	ldr	r1, [r3, #20]
 80018be:	0549      	lsls	r1, r1, #21
 80018c0:	d501      	bpl.n	80018c6 <HAL_PWREx_ControlVoltageScaling+0x3a>
      {
        wait_loop_index--;
 80018c2:	3a01      	subs	r2, #1
 80018c4:	e7f9      	b.n	80018ba <HAL_PWREx_ControlVoltageScaling+0x2e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_PWREx_ControlVoltageScaling+0x60>)
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	055b      	lsls	r3, r3, #21
 80018cc:	d40b      	bmi.n	80018e6 <HAL_PWREx_ControlVoltageScaling+0x5a>
 80018ce:	e008      	b.n	80018e2 <HAL_PWREx_ControlVoltageScaling+0x56>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018d0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018d4:	bf1f      	itttt	ne
 80018d6:	681a      	ldrne	r2, [r3, #0]
 80018d8:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80018dc:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80018e0:	601a      	strne	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 80018e2:	2000      	movs	r0, #0
 80018e4:	4770      	bx	lr
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
      {
        return HAL_TIMEOUT;
 80018e6:	2003      	movs	r0, #3
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
}  
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40007000 	.word	0x40007000
 80018f0:	000f4240 	.word	0x000f4240
 80018f4:	20000000 	.word	0x20000000

080018f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80018f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018fa:	4d1e      	ldr	r5, [pc, #120]	; (8001974 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80018fc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80018fe:	00d9      	lsls	r1, r3, #3
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001900:	4604      	mov	r4, r0
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001902:	d502      	bpl.n	800190a <RCC_SetFlashLatencyFromMSIRange+0x12>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001904:	f7ff ffba 	bl	800187c <HAL_PWREx_GetVoltageRange>
 8001908:	e00e      	b.n	8001928 <RCC_SetFlashLatencyFromMSIRange+0x30>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800190c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001910:	65ab      	str	r3, [r5, #88]	; 0x58
 8001912:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800191c:	f7ff ffae 	bl	800187c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001920:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001922:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001926:	65ab      	str	r3, [r5, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001928:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800192c:	d106      	bne.n	800193c <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    if(msirange > RCC_MSIRANGE_8)
 800192e:	2c80      	cmp	r4, #128	; 0x80
 8001930:	d90c      	bls.n	800194c <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001932:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001934:	bf8c      	ite	hi
 8001936:	2302      	movhi	r3, #2
 8001938:	2301      	movls	r3, #1
 800193a:	e00c      	b.n	8001956 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 800193c:	2c80      	cmp	r4, #128	; 0x80
 800193e:	d807      	bhi.n	8001950 <RCC_SetFlashLatencyFromMSIRange+0x58>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001940:	d008      	beq.n	8001954 <RCC_SetFlashLatencyFromMSIRange+0x5c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001942:	f1a4 0270 	sub.w	r2, r4, #112	; 0x70
 8001946:	4253      	negs	r3, r2
 8001948:	4153      	adcs	r3, r2
 800194a:	e004      	b.n	8001956 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800194c:	2300      	movs	r3, #0
 800194e:	e002      	b.n	8001956 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  else
  {
    if(msirange > RCC_MSIRANGE_8)
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001950:	2303      	movs	r3, #3
 8001952:	e000      	b.n	8001956 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001954:	2302      	movs	r3, #2
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8001956:	4908      	ldr	r1, [pc, #32]	; (8001978 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001958:	680a      	ldr	r2, [r1, #0]
 800195a:	f022 0207 	bic.w	r2, r2, #7
 800195e:	431a      	orrs	r2, r3
 8001960:	600a      	str	r2, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001962:	6808      	ldr	r0, [r1, #0]
 8001964:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8001968:	1ac0      	subs	r0, r0, r3
 800196a:	bf18      	it	ne
 800196c:	2001      	movne	r0, #1
 800196e:	b003      	add	sp, #12
 8001970:	bd30      	pop	{r4, r5, pc}
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000
 8001978:	40022000 	.word	0x40022000

0800197c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800197c:	b570      	push	{r4, r5, r6, lr}
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800197e:	4c4a      	ldr	r4, [pc, #296]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001980:	68a3      	ldr	r3, [r4, #8]
 8001982:	f013 0f0c 	tst.w	r3, #12
 8001986:	d009      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001988:	68a3      	ldr	r3, [r4, #8]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b0c      	cmp	r3, #12
 8001990:	d126      	bne.n	80019e0 <HAL_RCC_GetSysClockFreq+0x64>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001992:	68e3      	ldr	r3, [r4, #12]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b01      	cmp	r3, #1
 800199a:	d121      	bne.n	80019e0 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 800199c:	6822      	ldr	r2, [r4, #0]
 800199e:	4b42      	ldr	r3, [pc, #264]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80019a0:	0712      	lsls	r2, r2, #28
 80019a2:	d40a      	bmi.n	80019ba <HAL_RCC_GetSysClockFreq+0x3e>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 80019a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a8:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80019ac:	fa92 f2a2 	rbit	r2, r2
 80019b0:	fab2 f282 	clz	r2, r2
 80019b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80019b8:	e007      	b.n	80019ca <HAL_RCC_GetSysClockFreq+0x4e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	22f0      	movs	r2, #240	; 0xf0
 80019be:	fa92 f2a2 	rbit	r2, r2
 80019c2:	fab2 f282 	clz	r2, r2
 80019c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019ca:	40d3      	lsrs	r3, r2
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80019cc:	4a37      	ldr	r2, [pc, #220]	; (8001aac <HAL_RCC_GetSysClockFreq+0x130>)
 80019ce:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80019d2:	68a3      	ldr	r3, [r4, #8]
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80019d4:	f013 0f0c 	tst.w	r3, #12
 80019d8:	bf0c      	ite	eq
 80019da:	4630      	moveq	r0, r6
 80019dc:	2000      	movne	r0, #0
 80019de:	e011      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019e0:	68a3      	ldr	r3, [r4, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d007      	beq.n	80019fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80019ea:	4b2f      	ldr	r3, [pc, #188]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d104      	bne.n	8001a00 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019f6:	482e      	ldr	r0, [pc, #184]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x134>)
 80019f8:	e000      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0x80>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019fa:	482e      	ldr	r0, [pc, #184]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x138>)
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80019fc:	2600      	movs	r6, #0
 80019fe:	e001      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8001a00:	2000      	movs	r0, #0
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001a02:	4606      	mov	r6, r0
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001a04:	68a3      	ldr	r3, [r4, #8]
 8001a06:	4a28      	ldr	r2, [pc, #160]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001a08:	f003 030c 	and.w	r3, r3, #12
 8001a0c:	2b0c      	cmp	r3, #12
 8001a0e:	d149      	bne.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x128>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a10:	68d1      	ldr	r1, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8001a12:	68d3      	ldr	r3, [r2, #12]
 8001a14:	2070      	movs	r0, #112	; 0x70
 8001a16:	fa90 f0a0 	rbit	r0, r0
 8001a1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a1e:	fab0 f080 	clz	r0, r0
 8001a22:	fa23 f000 	lsr.w	r0, r3, r0

    switch (pllsource)
 8001a26:	f001 0303 	and.w	r3, r1, #3
 8001a2a:	2b02      	cmp	r3, #2

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8001a2c:	f100 0501 	add.w	r5, r0, #1
 8001a30:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00

    switch (pllsource)
 8001a34:	d00c      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0xd4>
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d119      	bne.n	8001a6e <HAL_RCC_GetSysClockFreq+0xf2>
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8001a3a:	68d3      	ldr	r3, [r2, #12]
 8001a3c:	fa91 f1a1 	rbit	r1, r1
 8001a40:	fab1 f181 	clz	r1, r1
 8001a44:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8001a48:	fa23 f101 	lsr.w	r1, r3, r1
 8001a4c:	4a18      	ldr	r2, [pc, #96]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x134>)
 8001a4e:	e009      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0xe8>
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;

    switch (pllsource)
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8001a50:	68d3      	ldr	r3, [r2, #12]
 8001a52:	fa91 f1a1 	rbit	r1, r1
 8001a56:	4a17      	ldr	r2, [pc, #92]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a58:	fab1 f181 	clz	r1, r1
 8001a5c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8001a60:	fa23 f101 	lsr.w	r1, r3, r1
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8001a64:	fbb2 f0f5 	udiv	r0, r2, r5
 8001a68:	fb00 f301 	mul.w	r3, r0, r1
      break;
 8001a6c:	e00b      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x10a>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8001a6e:	68d2      	ldr	r2, [r2, #12]
 8001a70:	fa91 f1a1 	rbit	r1, r1
 8001a74:	fab1 f181 	clz	r1, r1
 8001a78:	f402 42fe 	and.w	r2, r2, #32512	; 0x7f00
 8001a7c:	40ca      	lsrs	r2, r1
 8001a7e:	fbb6 f0f5 	udiv	r0, r6, r5
 8001a82:	fb00 f302 	mul.w	r3, r0, r2
      break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 8001a86:	68e2      	ldr	r2, [r4, #12]
 8001a88:	f04f 60c0 	mov.w	r0, #100663296	; 0x6000000
 8001a8c:	fa90 f0a0 	rbit	r0, r0
 8001a90:	fab0 f080 	clz	r0, r0
    sysclockfreq = pllvco/pllr;
 8001a94:	f002 62c0 	and.w	r2, r2, #100663296	; 0x6000000
 8001a98:	fa22 f000 	lsr.w	r0, r2, r0
 8001a9c:	3001      	adds	r0, #1
 8001a9e:	0040      	lsls	r0, r0, #1
 8001aa0:	fbb3 f0f0 	udiv	r0, r3, r0
  }

  return sysclockfreq;
}
 8001aa4:	bd70      	pop	{r4, r5, r6, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	08009f30 	.word	0x08009f30
 8001ab0:	007a1200 	.word	0x007a1200
 8001ab4:	00f42400 	.word	0x00f42400

08001ab8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ab8:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001abe:	06dd      	lsls	r5, r3, #27
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac0:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ac2:	f140 808f 	bpl.w	8001be4 <HAL_RCC_OscConfig+0x12c>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8001ac6:	4d9e      	ldr	r5, [pc, #632]	; (8001d40 <HAL_RCC_OscConfig+0x288>)
 8001ac8:	68ab      	ldr	r3, [r5, #8]
 8001aca:	f013 0f0c 	tst.w	r3, #12
 8001ace:	d153      	bne.n	8001b78 <HAL_RCC_OscConfig+0xc0>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ad0:	682b      	ldr	r3, [r5, #0]
 8001ad2:	0798      	lsls	r0, r3, #30
 8001ad4:	d503      	bpl.n	8001ade <HAL_RCC_OscConfig+0x26>
 8001ad6:	69a3      	ldr	r3, [r4, #24]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 8256 	beq.w	8001f8a <HAL_RCC_OscConfig+0x4d2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ade:	682a      	ldr	r2, [r5, #0]
 8001ae0:	4b97      	ldr	r3, [pc, #604]	; (8001d40 <HAL_RCC_OscConfig+0x288>)
 8001ae2:	6a20      	ldr	r0, [r4, #32]
 8001ae4:	0711      	lsls	r1, r2, #28
 8001ae6:	bf56      	itet	pl
 8001ae8:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 8001aec:	681b      	ldrmi	r3, [r3, #0]
 8001aee:	091b      	lsrpl	r3, r3, #4
 8001af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001af4:	4283      	cmp	r3, r0
 8001af6:	d216      	bcs.n	8001b26 <HAL_RCC_OscConfig+0x6e>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001af8:	f7ff fefe 	bl	80018f8 <RCC_SetFlashLatencyFromMSIRange>
 8001afc:	2800      	cmp	r0, #0
 8001afe:	f040 8244 	bne.w	8001f8a <HAL_RCC_OscConfig+0x4d2>
          {
            return HAL_ERROR;
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b02:	682b      	ldr	r3, [r5, #0]
 8001b04:	f043 0308 	orr.w	r3, r3, #8
 8001b08:	602b      	str	r3, [r5, #0]
 8001b0a:	682b      	ldr	r3, [r5, #0]
 8001b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b10:	6a23      	ldr	r3, [r4, #32]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	602b      	str	r3, [r5, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b16:	686b      	ldr	r3, [r5, #4]
 8001b18:	69e2      	ldr	r2, [r4, #28]
 8001b1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b22:	606b      	str	r3, [r5, #4]
 8001b24:	e014      	b.n	8001b50 <HAL_RCC_OscConfig+0x98>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b26:	682b      	ldr	r3, [r5, #0]
 8001b28:	f043 0308 	orr.w	r3, r3, #8
 8001b2c:	602b      	str	r3, [r5, #0]
 8001b2e:	682b      	ldr	r3, [r5, #0]
 8001b30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b34:	4303      	orrs	r3, r0
 8001b36:	602b      	str	r3, [r5, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b38:	686b      	ldr	r3, [r5, #4]
 8001b3a:	69e2      	ldr	r2, [r4, #28]
 8001b3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b44:	606b      	str	r3, [r5, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b46:	f7ff fed7 	bl	80018f8 <RCC_SetFlashLatencyFromMSIRange>
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	f040 821d 	bne.w	8001f8a <HAL_RCC_OscConfig+0x4d2>
            return HAL_ERROR;
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001b50:	f7ff ff14 	bl	800197c <HAL_RCC_GetSysClockFreq>
 8001b54:	68ab      	ldr	r3, [r5, #8]
 8001b56:	22f0      	movs	r2, #240	; 0xf0
 8001b58:	fa92 f2a2 	rbit	r2, r2
 8001b5c:	fab2 f282 	clz	r2, r2
 8001b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b64:	40d3      	lsrs	r3, r2
 8001b66:	4a77      	ldr	r2, [pc, #476]	; (8001d44 <HAL_RCC_OscConfig+0x28c>)
 8001b68:	5cd3      	ldrb	r3, [r2, r3]
 8001b6a:	40d8      	lsrs	r0, r3
 8001b6c:	4b76      	ldr	r3, [pc, #472]	; (8001d48 <HAL_RCC_OscConfig+0x290>)
 8001b6e:	6018      	str	r0, [r3, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8001b70:	2000      	movs	r0, #0
 8001b72:	f7ff fa21 	bl	8000fb8 <HAL_InitTick>
 8001b76:	e035      	b.n	8001be4 <HAL_RCC_OscConfig+0x12c>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b78:	6983      	ldr	r3, [r0, #24]
 8001b7a:	b31b      	cbz	r3, 8001bc4 <HAL_RCC_OscConfig+0x10c>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b7c:	682b      	ldr	r3, [r5, #0]
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	602b      	str	r3, [r5, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b84:	f7ff fa40 	bl	8001008 <HAL_GetTick>
 8001b88:	4606      	mov	r6, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001b8a:	682a      	ldr	r2, [r5, #0]
 8001b8c:	4b6c      	ldr	r3, [pc, #432]	; (8001d40 <HAL_RCC_OscConfig+0x288>)
 8001b8e:	0792      	lsls	r2, r2, #30
 8001b90:	d406      	bmi.n	8001ba0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b92:	f7ff fa39 	bl	8001008 <HAL_GetTick>
 8001b96:	1b80      	subs	r0, r0, r6
 8001b98:	2802      	cmp	r0, #2
 8001b9a:	d9f6      	bls.n	8001b8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b9c:	2003      	movs	r0, #3
 8001b9e:	e1f5      	b.n	8001f8c <HAL_RCC_OscConfig+0x4d4>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	f042 0208 	orr.w	r2, r2, #8
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8001bae:	6a22      	ldr	r2, [r4, #32]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	69e1      	ldr	r1, [r4, #28]
 8001bb8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001bbc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	e00f      	b.n	8001be4 <HAL_RCC_OscConfig+0x12c>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bc4:	682b      	ldr	r3, [r5, #0]
 8001bc6:	f023 0301 	bic.w	r3, r3, #1
 8001bca:	602b      	str	r3, [r5, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fa1c 	bl	8001008 <HAL_GetTick>
 8001bd0:	4606      	mov	r6, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001bd2:	682b      	ldr	r3, [r5, #0]
 8001bd4:	079f      	lsls	r7, r3, #30
 8001bd6:	d505      	bpl.n	8001be4 <HAL_RCC_OscConfig+0x12c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bd8:	f7ff fa16 	bl	8001008 <HAL_GetTick>
 8001bdc:	1b80      	subs	r0, r0, r6
 8001bde:	2802      	cmp	r0, #2
 8001be0:	d9f7      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x11a>
 8001be2:	e7db      	b.n	8001b9c <HAL_RCC_OscConfig+0xe4>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be4:	6823      	ldr	r3, [r4, #0]
 8001be6:	07de      	lsls	r6, r3, #31
 8001be8:	d403      	bmi.n	8001bf2 <HAL_RCC_OscConfig+0x13a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bea:	6823      	ldr	r3, [r4, #0]
 8001bec:	079d      	lsls	r5, r3, #30
 8001bee:	d448      	bmi.n	8001c82 <HAL_RCC_OscConfig+0x1ca>
 8001bf0:	e09f      	b.n	8001d32 <HAL_RCC_OscConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8001bf2:	4d53      	ldr	r5, [pc, #332]	; (8001d40 <HAL_RCC_OscConfig+0x288>)
 8001bf4:	68ab      	ldr	r3, [r5, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d009      	beq.n	8001c12 <HAL_RCC_OscConfig+0x15a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bfe:	68ab      	ldr	r3, [r5, #8]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	2b0c      	cmp	r3, #12
 8001c06:	d10b      	bne.n	8001c20 <HAL_RCC_OscConfig+0x168>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c08:	68eb      	ldr	r3, [r5, #12]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d106      	bne.n	8001c20 <HAL_RCC_OscConfig+0x168>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c12:	682b      	ldr	r3, [r5, #0]
 8001c14:	0398      	lsls	r0, r3, #14
 8001c16:	d5e8      	bpl.n	8001bea <HAL_RCC_OscConfig+0x132>
 8001c18:	6863      	ldr	r3, [r4, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1e5      	bne.n	8001bea <HAL_RCC_OscConfig+0x132>
 8001c1e:	e1b4      	b.n	8001f8a <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c20:	6863      	ldr	r3, [r4, #4]
 8001c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c26:	d006      	beq.n	8001c36 <HAL_RCC_OscConfig+0x17e>
 8001c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c2c:	d108      	bne.n	8001c40 <HAL_RCC_OscConfig+0x188>
 8001c2e:	682b      	ldr	r3, [r5, #0]
 8001c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c34:	602b      	str	r3, [r5, #0]
 8001c36:	682b      	ldr	r3, [r5, #0]
 8001c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3c:	602b      	str	r3, [r5, #0]
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x19a>
 8001c40:	682a      	ldr	r2, [r5, #0]
 8001c42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c46:	602a      	str	r2, [r5, #0]
 8001c48:	682a      	ldr	r2, [r5, #0]
 8001c4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c4e:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c50:	b15b      	cbz	r3, 8001c6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c52:	f7ff f9d9 	bl	8001008 <HAL_GetTick>
 8001c56:	4606      	mov	r6, r0

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001c58:	682b      	ldr	r3, [r5, #0]
 8001c5a:	0399      	lsls	r1, r3, #14
 8001c5c:	d4c5      	bmi.n	8001bea <HAL_RCC_OscConfig+0x132>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c5e:	f7ff f9d3 	bl	8001008 <HAL_GetTick>
 8001c62:	1b80      	subs	r0, r0, r6
 8001c64:	2864      	cmp	r0, #100	; 0x64
 8001c66:	d9f7      	bls.n	8001c58 <HAL_RCC_OscConfig+0x1a0>
 8001c68:	e798      	b.n	8001b9c <HAL_RCC_OscConfig+0xe4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6a:	f7ff f9cd 	bl	8001008 <HAL_GetTick>
 8001c6e:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001c70:	682b      	ldr	r3, [r5, #0]
 8001c72:	039a      	lsls	r2, r3, #14
 8001c74:	d5b9      	bpl.n	8001bea <HAL_RCC_OscConfig+0x132>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c76:	f7ff f9c7 	bl	8001008 <HAL_GetTick>
 8001c7a:	1b80      	subs	r0, r0, r6
 8001c7c:	2864      	cmp	r0, #100	; 0x64
 8001c7e:	d9f7      	bls.n	8001c70 <HAL_RCC_OscConfig+0x1b8>
 8001c80:	e78c      	b.n	8001b9c <HAL_RCC_OscConfig+0xe4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001c82:	4d2f      	ldr	r5, [pc, #188]	; (8001d40 <HAL_RCC_OscConfig+0x288>)
 8001c84:	68ab      	ldr	r3, [r5, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d009      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x1ea>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c8e:	68ab      	ldr	r3, [r5, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001c90:	f003 030c 	and.w	r3, r3, #12
 8001c94:	2b0c      	cmp	r3, #12
 8001c96:	d11a      	bne.n	8001cce <HAL_RCC_OscConfig+0x216>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c98:	68eb      	ldr	r3, [r5, #12]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d115      	bne.n	8001cce <HAL_RCC_OscConfig+0x216>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ca2:	682b      	ldr	r3, [r5, #0]
 8001ca4:	055b      	lsls	r3, r3, #21
 8001ca6:	d503      	bpl.n	8001cb0 <HAL_RCC_OscConfig+0x1f8>
 8001ca8:	68e3      	ldr	r3, [r4, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 816d 	beq.w	8001f8a <HAL_RCC_OscConfig+0x4d2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb0:	686b      	ldr	r3, [r5, #4]
 8001cb2:	f04f 52f8 	mov.w	r2, #520093696	; 0x1f000000
 8001cb6:	fa92 f2a2 	rbit	r2, r2
 8001cba:	6921      	ldr	r1, [r4, #16]
 8001cbc:	fab2 f282 	clz	r2, r2
 8001cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc4:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	606b      	str	r3, [r5, #4]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ccc:	e031      	b.n	8001d32 <HAL_RCC_OscConfig+0x27a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cce:	68e3      	ldr	r3, [r4, #12]
 8001cd0:	b1fb      	cbz	r3, 8001d12 <HAL_RCC_OscConfig+0x25a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd2:	682b      	ldr	r3, [r5, #0]
 8001cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd8:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cda:	f7ff f995 	bl	8001008 <HAL_GetTick>
 8001cde:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001ce0:	682b      	ldr	r3, [r5, #0]
 8001ce2:	4817      	ldr	r0, [pc, #92]	; (8001d40 <HAL_RCC_OscConfig+0x288>)
 8001ce4:	055f      	lsls	r7, r3, #21
 8001ce6:	d405      	bmi.n	8001cf4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce8:	f7ff f98e 	bl	8001008 <HAL_GetTick>
 8001cec:	1b80      	subs	r0, r0, r6
 8001cee:	2802      	cmp	r0, #2
 8001cf0:	d9f6      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x228>
 8001cf2:	e753      	b.n	8001b9c <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf4:	6843      	ldr	r3, [r0, #4]
 8001cf6:	f04f 52f8 	mov.w	r2, #520093696	; 0x1f000000
 8001cfa:	fa92 f2a2 	rbit	r2, r2
 8001cfe:	6921      	ldr	r1, [r4, #16]
 8001d00:	fab2 f282 	clz	r2, r2
 8001d04:	fa01 f202 	lsl.w	r2, r1, r2
 8001d08:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	6043      	str	r3, [r0, #4]
 8001d10:	e00f      	b.n	8001d32 <HAL_RCC_OscConfig+0x27a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d12:	682b      	ldr	r3, [r5, #0]
 8001d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d18:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1a:	f7ff f975 	bl	8001008 <HAL_GetTick>
 8001d1e:	4606      	mov	r6, r0

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8001d20:	682b      	ldr	r3, [r5, #0]
 8001d22:	0558      	lsls	r0, r3, #21
 8001d24:	d505      	bpl.n	8001d32 <HAL_RCC_OscConfig+0x27a>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d26:	f7ff f96f 	bl	8001008 <HAL_GetTick>
 8001d2a:	1b80      	subs	r0, r0, r6
 8001d2c:	2802      	cmp	r0, #2
 8001d2e:	d9f7      	bls.n	8001d20 <HAL_RCC_OscConfig+0x268>
 8001d30:	e734      	b.n	8001b9c <HAL_RCC_OscConfig+0xe4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d32:	6823      	ldr	r3, [r4, #0]
 8001d34:	0719      	lsls	r1, r3, #28
 8001d36:	d409      	bmi.n	8001d4c <HAL_RCC_OscConfig+0x294>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d38:	6823      	ldr	r3, [r4, #0]
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	d42f      	bmi.n	8001d9e <HAL_RCC_OscConfig+0x2e6>
 8001d3e:	e097      	b.n	8001e70 <HAL_RCC_OscConfig+0x3b8>
 8001d40:	40021000 	.word	0x40021000
 8001d44:	08009f17 	.word	0x08009f17
 8001d48:	20000000 	.word	0x20000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d4c:	6963      	ldr	r3, [r4, #20]
 8001d4e:	4d91      	ldr	r5, [pc, #580]	; (8001f94 <HAL_RCC_OscConfig+0x4dc>)
 8001d50:	b193      	cbz	r3, 8001d78 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d52:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5e:	f7ff f953 	bl	8001008 <HAL_GetTick>
 8001d62:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001d64:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001d68:	079b      	lsls	r3, r3, #30
 8001d6a:	d4e5      	bmi.n	8001d38 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d6c:	f7ff f94c 	bl	8001008 <HAL_GetTick>
 8001d70:	1b80      	subs	r0, r0, r6
 8001d72:	2802      	cmp	r0, #2
 8001d74:	d9f6      	bls.n	8001d64 <HAL_RCC_OscConfig+0x2ac>
 8001d76:	e711      	b.n	8001b9c <HAL_RCC_OscConfig+0xe4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d78:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001d7c:	f023 0301 	bic.w	r3, r3, #1
 8001d80:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d84:	f7ff f940 	bl	8001008 <HAL_GetTick>
 8001d88:	4606      	mov	r6, r0

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8001d8a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001d8e:	079f      	lsls	r7, r3, #30
 8001d90:	d5d2      	bpl.n	8001d38 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d92:	f7ff f939 	bl	8001008 <HAL_GetTick>
 8001d96:	1b80      	subs	r0, r0, r6
 8001d98:	2802      	cmp	r0, #2
 8001d9a:	d9f6      	bls.n	8001d8a <HAL_RCC_OscConfig+0x2d2>
 8001d9c:	e6fe      	b.n	8001b9c <HAL_RCC_OscConfig+0xe4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d9e:	4d7d      	ldr	r5, [pc, #500]	; (8001f94 <HAL_RCC_OscConfig+0x4dc>)
 8001da0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001da2:	00d8      	lsls	r0, r3, #3
 8001da4:	d40a      	bmi.n	8001dbc <HAL_RCC_OscConfig+0x304>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dac:	65ab      	str	r3, [r5, #88]	; 0x58
 8001dae:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001db8:	2701      	movs	r7, #1
 8001dba:	e000      	b.n	8001dbe <HAL_RCC_OscConfig+0x306>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dbc:	2700      	movs	r7, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dbe:	4e76      	ldr	r6, [pc, #472]	; (8001f98 <HAL_RCC_OscConfig+0x4e0>)
 8001dc0:	6833      	ldr	r3, [r6, #0]
 8001dc2:	05d9      	lsls	r1, r3, #23
 8001dc4:	d503      	bpl.n	8001dce <HAL_RCC_OscConfig+0x316>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc6:	68a3      	ldr	r3, [r4, #8]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d111      	bne.n	8001df0 <HAL_RCC_OscConfig+0x338>
 8001dcc:	e018      	b.n	8001e00 <HAL_RCC_OscConfig+0x348>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dce:	6833      	ldr	r3, [r6, #0]
 8001dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd4:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dd6:	f7ff f917 	bl	8001008 <HAL_GetTick>
 8001dda:	4680      	mov	r8, r0

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ddc:	6833      	ldr	r3, [r6, #0]
 8001dde:	05da      	lsls	r2, r3, #23
 8001de0:	d4f1      	bmi.n	8001dc6 <HAL_RCC_OscConfig+0x30e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de2:	f7ff f911 	bl	8001008 <HAL_GetTick>
 8001de6:	ebc8 0000 	rsb	r0, r8, r0
 8001dea:	2802      	cmp	r0, #2
 8001dec:	d9f6      	bls.n	8001ddc <HAL_RCC_OscConfig+0x324>
 8001dee:	e6d5      	b.n	8001b9c <HAL_RCC_OscConfig+0xe4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df0:	2b05      	cmp	r3, #5
 8001df2:	d10c      	bne.n	8001e0e <HAL_RCC_OscConfig+0x356>
 8001df4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001df8:	f043 0304 	orr.w	r3, r3, #4
 8001dfc:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8001e00:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8001e0c:	e00c      	b.n	8001e28 <HAL_RCC_OscConfig+0x370>
 8001e0e:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8001e12:	f022 0201 	bic.w	r2, r2, #1
 8001e16:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 8001e1a:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8001e1e:	f022 0204 	bic.w	r2, r2, #4
 8001e22:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e26:	b173      	cbz	r3, 8001e46 <HAL_RCC_OscConfig+0x38e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e28:	f7ff f8ee 	bl	8001008 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2c:	f241 3888 	movw	r8, #5000	; 0x1388

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e30:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001e32:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001e36:	079b      	lsls	r3, r3, #30
 8001e38:	d40e      	bmi.n	8001e58 <HAL_RCC_OscConfig+0x3a0>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3a:	f7ff f8e5 	bl	8001008 <HAL_GetTick>
 8001e3e:	1b80      	subs	r0, r0, r6
 8001e40:	4540      	cmp	r0, r8
 8001e42:	d9f6      	bls.n	8001e32 <HAL_RCC_OscConfig+0x37a>
 8001e44:	e6aa      	b.n	8001b9c <HAL_RCC_OscConfig+0xe4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e46:	f7ff f8df 	bl	8001008 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4a:	f241 3888 	movw	r8, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4e:	4606      	mov	r6, r0

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8001e50:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001e54:	0798      	lsls	r0, r3, #30
 8001e56:	d405      	bmi.n	8001e64 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e58:	b157      	cbz	r7, 8001e70 <HAL_RCC_OscConfig+0x3b8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e5a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e60:	65ab      	str	r3, [r5, #88]	; 0x58
 8001e62:	e005      	b.n	8001e70 <HAL_RCC_OscConfig+0x3b8>
      tickstart = HAL_GetTick();

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e64:	f7ff f8d0 	bl	8001008 <HAL_GetTick>
 8001e68:	1b80      	subs	r0, r0, r6
 8001e6a:	4540      	cmp	r0, r8
 8001e6c:	d9f0      	bls.n	8001e50 <HAL_RCC_OscConfig+0x398>
 8001e6e:	e695      	b.n	8001b9c <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e70:	6823      	ldr	r3, [r4, #0]
 8001e72:	0699      	lsls	r1, r3, #26
 8001e74:	d402      	bmi.n	8001e7c <HAL_RCC_OscConfig+0x3c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e76:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e78:	bb4a      	cbnz	r2, 8001ece <HAL_RCC_OscConfig+0x416>
 8001e7a:	e05f      	b.n	8001f3c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e7e:	4d45      	ldr	r5, [pc, #276]	; (8001f94 <HAL_RCC_OscConfig+0x4dc>)
 8001e80:	b193      	cbz	r3, 8001ea8 <HAL_RCC_OscConfig+0x3f0>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e82:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8e:	f7ff f8bb 	bl	8001008 <HAL_GetTick>
 8001e92:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8001e94:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001e98:	079a      	lsls	r2, r3, #30
 8001e9a:	d4ec      	bmi.n	8001e76 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e9c:	f7ff f8b4 	bl	8001008 <HAL_GetTick>
 8001ea0:	1b80      	subs	r0, r0, r6
 8001ea2:	2802      	cmp	r0, #2
 8001ea4:	d9f6      	bls.n	8001e94 <HAL_RCC_OscConfig+0x3dc>
 8001ea6:	e679      	b.n	8001b9c <HAL_RCC_OscConfig+0xe4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ea8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001eac:	f023 0301 	bic.w	r3, r3, #1
 8001eb0:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb4:	f7ff f8a8 	bl	8001008 <HAL_GetTick>
 8001eb8:	4606      	mov	r6, r0

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8001eba:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001ebe:	079b      	lsls	r3, r3, #30
 8001ec0:	d5d9      	bpl.n	8001e76 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ec2:	f7ff f8a1 	bl	8001008 <HAL_GetTick>
 8001ec6:	1b80      	subs	r0, r0, r6
 8001ec8:	2802      	cmp	r0, #2
 8001eca:	d9f6      	bls.n	8001eba <HAL_RCC_OscConfig+0x402>
 8001ecc:	e666      	b.n	8001b9c <HAL_RCC_OscConfig+0xe4>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ece:	4d31      	ldr	r5, [pc, #196]	; (8001f94 <HAL_RCC_OscConfig+0x4dc>)
 8001ed0:	68ab      	ldr	r3, [r5, #8]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b0c      	cmp	r3, #12
 8001ed8:	d057      	beq.n	8001f8a <HAL_RCC_OscConfig+0x4d2>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eda:	682b      	ldr	r3, [r5, #0]
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001edc:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ede:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ee2:	602b      	str	r3, [r5, #0]
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ee4:	d138      	bne.n	8001f58 <HAL_RCC_OscConfig+0x4a0>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee6:	f7ff f88f 	bl	8001008 <HAL_GetTick>
 8001eea:	4606      	mov	r6, r0

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001eec:	682b      	ldr	r3, [r5, #0]
 8001eee:	4829      	ldr	r0, [pc, #164]	; (8001f94 <HAL_RCC_OscConfig+0x4dc>)
 8001ef0:	019f      	lsls	r7, r3, #6
 8001ef2:	d425      	bmi.n	8001f40 <HAL_RCC_OscConfig+0x488>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8001ef6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ef8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001efa:	06f6      	lsls	r6, r6, #27
 8001efc:	ea46 2103 	orr.w	r1, r6, r3, lsl #8
 8001f00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f02:	3a01      	subs	r2, #1
 8001f04:	430b      	orrs	r3, r1
 8001f06:	ea43 1102 	orr.w	r1, r3, r2, lsl #4
 8001f0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f0c:	085b      	lsrs	r3, r3, #1
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	ea41 5243 	orr.w	r2, r1, r3, lsl #21
 8001f14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f16:	085b      	lsrs	r3, r3, #1
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	ea42 6343 	orr.w	r3, r2, r3, lsl #25
 8001f1e:	60c3      	str	r3, [r0, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f20:	6803      	ldr	r3, [r0, #0]
 8001f22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f26:	6003      	str	r3, [r0, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f28:	68c3      	ldr	r3, [r0, #12]
 8001f2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f2e:	60c3      	str	r3, [r0, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f30:	f7ff f86a 	bl	8001008 <HAL_GetTick>
 8001f34:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001f36:	682b      	ldr	r3, [r5, #0]
 8001f38:	0199      	lsls	r1, r3, #6
 8001f3a:	d507      	bpl.n	8001f4c <HAL_RCC_OscConfig+0x494>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	e025      	b.n	8001f8c <HAL_RCC_OscConfig+0x4d4>
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f40:	f7ff f862 	bl	8001008 <HAL_GetTick>
 8001f44:	1b80      	subs	r0, r0, r6
 8001f46:	2802      	cmp	r0, #2
 8001f48:	d9d0      	bls.n	8001eec <HAL_RCC_OscConfig+0x434>
 8001f4a:	e627      	b.n	8001b9c <HAL_RCC_OscConfig+0xe4>
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4c:	f7ff f85c 	bl	8001008 <HAL_GetTick>
 8001f50:	1b00      	subs	r0, r0, r4
 8001f52:	2802      	cmp	r0, #2
 8001f54:	d9ef      	bls.n	8001f36 <HAL_RCC_OscConfig+0x47e>
 8001f56:	e621      	b.n	8001b9c <HAL_RCC_OscConfig+0xe4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001f58:	682b      	ldr	r3, [r5, #0]
 8001f5a:	011a      	lsls	r2, r3, #4
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f5c:	bf5e      	ittt	pl
 8001f5e:	68eb      	ldrpl	r3, [r5, #12]
 8001f60:	f023 0303 	bicpl.w	r3, r3, #3
 8001f64:	60eb      	strpl	r3, [r5, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001f66:	68eb      	ldr	r3, [r5, #12]
 8001f68:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f70:	60eb      	str	r3, [r5, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f72:	f7ff f849 	bl	8001008 <HAL_GetTick>
 8001f76:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001f78:	682b      	ldr	r3, [r5, #0]
 8001f7a:	019b      	lsls	r3, r3, #6
 8001f7c:	d5de      	bpl.n	8001f3c <HAL_RCC_OscConfig+0x484>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7e:	f7ff f843 	bl	8001008 <HAL_GetTick>
 8001f82:	1b00      	subs	r0, r0, r4
 8001f84:	2802      	cmp	r0, #2
 8001f86:	d9f7      	bls.n	8001f78 <HAL_RCC_OscConfig+0x4c0>
 8001f88:	e608      	b.n	8001b9c <HAL_RCC_OscConfig+0xe4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001f8a:	2001      	movs	r0, #1
    }
  }
  return HAL_OK;
}
 8001f8c:	b002      	add	sp, #8
 8001f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40007000 	.word	0x40007000

08001f9c <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f9c:	4a57      	ldr	r2, [pc, #348]	; (80020fc <HAL_RCC_ClockConfig+0x160>)
 8001f9e:	6813      	ldr	r3, [r2, #0]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001faa:	4605      	mov	r5, r0
 8001fac:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001fae:	d30a      	bcc.n	8001fc6 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb0:	6829      	ldr	r1, [r5, #0]
 8001fb2:	0788      	lsls	r0, r1, #30
 8001fb4:	d514      	bpl.n	8001fe0 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb6:	4852      	ldr	r0, [pc, #328]	; (8002100 <HAL_RCC_ClockConfig+0x164>)
 8001fb8:	6883      	ldr	r3, [r0, #8]
 8001fba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fbe:	68ab      	ldr	r3, [r5, #8]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	6083      	str	r3, [r0, #8]
 8001fc4:	e00c      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x44>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc6:	6813      	ldr	r3, [r2, #0]
 8001fc8:	f023 0307 	bic.w	r3, r3, #7
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fd0:	6813      	ldr	r3, [r2, #0]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	4299      	cmp	r1, r3
 8001fd8:	d0ea      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8001fda:	2001      	movs	r0, #1
 8001fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe0:	07ca      	lsls	r2, r1, #31
 8001fe2:	d406      	bmi.n	8001ff2 <HAL_RCC_ClockConfig+0x56>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001fe4:	4a45      	ldr	r2, [pc, #276]	; (80020fc <HAL_RCC_ClockConfig+0x160>)
 8001fe6:	6813      	ldr	r3, [r2, #0]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	429e      	cmp	r6, r3
 8001fee:	d351      	bcc.n	8002094 <HAL_RCC_ClockConfig+0xf8>
 8001ff0:	e05a      	b.n	80020a8 <HAL_RCC_ClockConfig+0x10c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff2:	686b      	ldr	r3, [r5, #4]
 8001ff4:	4c42      	ldr	r4, [pc, #264]	; (8002100 <HAL_RCC_ClockConfig+0x164>)
 8001ff6:	2b02      	cmp	r3, #2
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001ff8:	6822      	ldr	r2, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffa:	d102      	bne.n	8002002 <HAL_RCC_ClockConfig+0x66>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001ffc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002000:	e00a      	b.n	8002018 <HAL_RCC_ClockConfig+0x7c>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002002:	2b03      	cmp	r3, #3
 8002004:	d102      	bne.n	800200c <HAL_RCC_ClockConfig+0x70>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8002006:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800200a:	e005      	b.n	8002018 <HAL_RCC_ClockConfig+0x7c>
      {
        return HAL_ERROR;
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800200c:	b913      	cbnz	r3, 8002014 <HAL_RCC_ClockConfig+0x78>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800200e:	f012 0f02 	tst.w	r2, #2
 8002012:	e001      	b.n	8002018 <HAL_RCC_ClockConfig+0x7c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002014:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002018:	d0df      	beq.n	8001fda <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800201a:	68a2      	ldr	r2, [r4, #8]
 800201c:	f022 0203 	bic.w	r2, r2, #3
 8002020:	4313      	orrs	r3, r2
 8002022:	60a3      	str	r3, [r4, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002024:	f7fe fff0 	bl	8001008 <HAL_GetTick>

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002028:	686b      	ldr	r3, [r5, #4]
 800202a:	2b02      	cmp	r3, #2
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800202c:	4607      	mov	r7, r0

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202e:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002032:	d10c      	bne.n	800204e <HAL_RCC_ClockConfig+0xb2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8002034:	68a3      	ldr	r3, [r4, #8]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b08      	cmp	r3, #8
 800203c:	d0d2      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203e:	f7fe ffe3 	bl	8001008 <HAL_GetTick>
 8002042:	1bc0      	subs	r0, r0, r7
 8002044:	4540      	cmp	r0, r8
 8002046:	d9f5      	bls.n	8002034 <HAL_RCC_ClockConfig+0x98>
        {
          return HAL_TIMEOUT;
 8002048:	2003      	movs	r0, #3
 800204a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800204e:	2b03      	cmp	r3, #3
 8002050:	d10a      	bne.n	8002068 <HAL_RCC_ClockConfig+0xcc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002052:	68a3      	ldr	r3, [r4, #8]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b0c      	cmp	r3, #12
 800205a:	d0c3      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205c:	f7fe ffd4 	bl	8001008 <HAL_GetTick>
 8002060:	1bc0      	subs	r0, r0, r7
 8002062:	4540      	cmp	r0, r8
 8002064:	d9f5      	bls.n	8002052 <HAL_RCC_ClockConfig+0xb6>
 8002066:	e7ef      	b.n	8002048 <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002068:	b973      	cbnz	r3, 8002088 <HAL_RCC_ClockConfig+0xec>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 800206a:	68a3      	ldr	r3, [r4, #8]
 800206c:	f013 0f0c 	tst.w	r3, #12
 8002070:	d0b8      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002072:	f7fe ffc9 	bl	8001008 <HAL_GetTick>
 8002076:	1bc0      	subs	r0, r0, r7
 8002078:	4540      	cmp	r0, r8
 800207a:	d9f6      	bls.n	800206a <HAL_RCC_ClockConfig+0xce>
 800207c:	e7e4      	b.n	8002048 <HAL_RCC_ClockConfig+0xac>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800207e:	f7fe ffc3 	bl	8001008 <HAL_GetTick>
 8002082:	1bc0      	subs	r0, r0, r7
 8002084:	4540      	cmp	r0, r8
 8002086:	d8df      	bhi.n	8002048 <HAL_RCC_ClockConfig+0xac>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8002088:	68a3      	ldr	r3, [r4, #8]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b04      	cmp	r3, #4
 8002090:	d1f5      	bne.n	800207e <HAL_RCC_ClockConfig+0xe2>
 8002092:	e7a7      	b.n	8001fe4 <HAL_RCC_ClockConfig+0x48>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002094:	6813      	ldr	r3, [r2, #0]
 8002096:	f023 0307 	bic.w	r3, r3, #7
 800209a:	4333      	orrs	r3, r6
 800209c:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800209e:	6813      	ldr	r3, [r2, #0]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	429e      	cmp	r6, r3
 80020a6:	d198      	bne.n	8001fda <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	6829      	ldr	r1, [r5, #0]
 80020aa:	4c15      	ldr	r4, [pc, #84]	; (8002100 <HAL_RCC_ClockConfig+0x164>)
 80020ac:	f011 0f04 	tst.w	r1, #4
 80020b0:	d005      	beq.n	80020be <HAL_RCC_ClockConfig+0x122>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b2:	68a3      	ldr	r3, [r4, #8]
 80020b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020b8:	68eb      	ldr	r3, [r5, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60a3      	str	r3, [r4, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020be:	070b      	lsls	r3, r1, #28
 80020c0:	d506      	bpl.n	80020d0 <HAL_RCC_ClockConfig+0x134>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020c2:	68a3      	ldr	r3, [r4, #8]
 80020c4:	692a      	ldr	r2, [r5, #16]
 80020c6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80020ca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80020ce:	60a3      	str	r3, [r4, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80020d0:	f7ff fc54 	bl	800197c <HAL_RCC_GetSysClockFreq>
 80020d4:	68a3      	ldr	r3, [r4, #8]
 80020d6:	22f0      	movs	r2, #240	; 0xf0
 80020d8:	fa92 f2a2 	rbit	r2, r2
 80020dc:	fab2 f282 	clz	r2, r2
 80020e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e4:	40d3      	lsrs	r3, r2
 80020e6:	4a07      	ldr	r2, [pc, #28]	; (8002104 <HAL_RCC_ClockConfig+0x168>)
 80020e8:	5cd3      	ldrb	r3, [r2, r3]
 80020ea:	40d8      	lsrs	r0, r3
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_RCC_ClockConfig+0x16c>)
 80020ee:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80020f0:	2000      	movs	r0, #0
 80020f2:	f7fe ff61 	bl	8000fb8 <HAL_InitTick>

  return HAL_OK;
 80020f6:	2000      	movs	r0, #0
}
 80020f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020fc:	40022000 	.word	0x40022000
 8002100:	40021000 	.word	0x40021000
 8002104:	08009f17 	.word	0x08009f17
 8002108:	20000000 	.word	0x20000000

0800210c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800210c:	4b01      	ldr	r3, [pc, #4]	; (8002114 <HAL_RCC_GetHCLKFreq+0x8>)
 800210e:	6818      	ldr	r0, [r3, #0]
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	20000000 	.word	0x20000000

08002118 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <HAL_RCC_GetPCLK1Freq+0x24>)
 800211a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	fa92 f2a2 	rbit	r2, r2
 8002124:	fab2 f282 	clz	r2, r2
 8002128:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800212c:	40d3      	lsrs	r3, r2
 800212e:	4a04      	ldr	r2, [pc, #16]	; (8002140 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002130:	5cd3      	ldrb	r3, [r2, r3]
 8002132:	4a04      	ldr	r2, [pc, #16]	; (8002144 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002134:	6810      	ldr	r0, [r2, #0]
}
 8002136:	40d8      	lsrs	r0, r3
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40021000 	.word	0x40021000
 8002140:	08009f27 	.word	0x08009f27
 8002144:	20000000 	.word	0x20000000

08002148 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <HAL_RCC_GetPCLK2Freq+0x24>)
 800214a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	fa92 f2a2 	rbit	r2, r2
 8002154:	fab2 f282 	clz	r2, r2
 8002158:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800215c:	40d3      	lsrs	r3, r2
 800215e:	4a04      	ldr	r2, [pc, #16]	; (8002170 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002160:	5cd3      	ldrb	r3, [r2, r3]
 8002162:	4a04      	ldr	r2, [pc, #16]	; (8002174 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8002164:	6810      	ldr	r0, [r2, #0]
}
 8002166:	40d8      	lsrs	r0, r3
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
 8002170:	08009f27 	.word	0x08009f27
 8002174:	20000000 	.word	0x20000000

08002178 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800217a:	4b5a      	ldr	r3, [pc, #360]	; (80022e4 <RCCEx_PLLSAI1_Config+0x16c>)
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	f012 0f03 	tst.w	r2, #3
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002182:	4604      	mov	r4, r0
 8002184:	460e      	mov	r6, r1
 8002186:	461d      	mov	r5, r3
 8002188:	6800      	ldr	r0, [r0, #0]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800218a:	d013      	beq.n	80021b4 <RCCEx_PLLSAI1_Config+0x3c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	f002 0203 	and.w	r2, r2, #3
 8002192:	4282      	cmp	r2, r0
 8002194:	d124      	bne.n	80021e0 <RCCEx_PLLSAI1_Config+0x68>
       || 
 8002196:	b31a      	cbz	r2, 80021e0 <RCCEx_PLLSAI1_Config+0x68>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai1->PLLSAI1M)
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	2370      	movs	r3, #112	; 0x70
 800219c:	fa93 f3a3 	rbit	r3, r3
 80021a0:	fab3 f183 	clz	r1, r3
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
       || 
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
       || 
 80021a4:	f002 0370 	and.w	r3, r2, #112	; 0x70
 80021a8:	40cb      	lsrs	r3, r1
 80021aa:	6862      	ldr	r2, [r4, #4]
 80021ac:	3301      	adds	r3, #1
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d116      	bne.n	80021e0 <RCCEx_PLLSAI1_Config+0x68>
 80021b2:	e025      	b.n	8002200 <RCCEx_PLLSAI1_Config+0x88>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80021b4:	2802      	cmp	r0, #2
 80021b6:	d008      	beq.n	80021ca <RCCEx_PLLSAI1_Config+0x52>
 80021b8:	2803      	cmp	r0, #3
 80021ba:	d00a      	beq.n	80021d2 <RCCEx_PLLSAI1_Config+0x5a>
 80021bc:	2801      	cmp	r0, #1
 80021be:	d10f      	bne.n	80021e0 <RCCEx_PLLSAI1_Config+0x68>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	079f      	lsls	r7, r3, #30
 80021c4:	f140 808d 	bpl.w	80022e2 <RCCEx_PLLSAI1_Config+0x16a>
 80021c8:	e00c      	b.n	80021e4 <RCCEx_PLLSAI1_Config+0x6c>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80021d0:	e005      	b.n	80021de <RCCEx_PLLSAI1_Config+0x66>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	0391      	lsls	r1, r2, #14
 80021d6:	d405      	bmi.n	80021e4 <RCCEx_PLLSAI1_Config+0x6c>
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80021de:	d101      	bne.n	80021e4 <RCCEx_PLLSAI1_Config+0x6c>
 80021e0:	2001      	movs	r0, #1
 80021e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    if(status == HAL_OK)
    {
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 80021e4:	68e9      	ldr	r1, [r5, #12]
 80021e6:	2370      	movs	r3, #112	; 0x70
 80021e8:	fa93 f3a3 	rbit	r3, r3
 80021ec:	fab3 f283 	clz	r2, r3
 80021f0:	6863      	ldr	r3, [r4, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	4093      	lsls	r3, r2
 80021f6:	f021 0273 	bic.w	r2, r1, #115	; 0x73
 80021fa:	4310      	orrs	r0, r2
 80021fc:	4318      	orrs	r0, r3
 80021fe:	60e8      	str	r0, [r5, #12]
  }
  
  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002200:	682b      	ldr	r3, [r5, #0]
 8002202:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002206:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002208:	f7fe fefe 	bl	8001008 <HAL_GetTick>
 800220c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 800220e:	682b      	ldr	r3, [r5, #0]
 8002210:	4934      	ldr	r1, [pc, #208]	; (80022e4 <RCCEx_PLLSAI1_Config+0x16c>)
 8002212:	011a      	lsls	r2, r3, #4
 8002214:	d506      	bpl.n	8002224 <RCCEx_PLLSAI1_Config+0xac>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002216:	f7fe fef7 	bl	8001008 <HAL_GetTick>
 800221a:	1bc0      	subs	r0, r0, r7
 800221c:	2802      	cmp	r0, #2
 800221e:	d9f6      	bls.n	800220e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_TIMEOUT;
 8002220:	2003      	movs	r0, #3
 8002222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002224:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 8002228:	68a7      	ldr	r7, [r4, #8]
      }
    }

    if(status == HAL_OK)    
    {
      if(Divider == DIVIDER_P_UPDATE)
 800222a:	b9b6      	cbnz	r6, 800225a <RCCEx_PLLSAI1_Config+0xe2>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 800222c:	6908      	ldr	r0, [r1, #16]
 800222e:	fa93 f2a3 	rbit	r2, r3
 8002232:	f04f 4678 	mov.w	r6, #4160749568	; 0xf8000000
 8002236:	fab2 f282 	clz	r2, r2
 800223a:	fa96 f6a6 	rbit	r6, r6
 800223e:	fa07 f302 	lsl.w	r3, r7, r2
 8002242:	68e2      	ldr	r2, [r4, #12]
 8002244:	fab6 f686 	clz	r6, r6
 8002248:	40b2      	lsls	r2, r6
 800224a:	4313      	orrs	r3, r2
 800224c:	f020 4278 	bic.w	r2, r0, #4160749568	; 0xf8000000
 8002250:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002254:	431a      	orrs	r2, r3
 8002256:	610a      	str	r2, [r1, #16]
 8002258:	e02d      	b.n	80022b6 <RCCEx_PLLSAI1_Config+0x13e>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800225a:	2e01      	cmp	r6, #1
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 800225c:	6908      	ldr	r0, [r1, #16]
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800225e:	d113      	bne.n	8002288 <RCCEx_PLLSAI1_Config+0x110>
 8002260:	fa93 f2a3 	rbit	r2, r3
 8002264:	f44f 03c0 	mov.w	r3, #6291456	; 0x600000
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8002268:	fab2 f282 	clz	r2, r2
 800226c:	fa93 f3a3 	rbit	r3, r3
 8002270:	6926      	ldr	r6, [r4, #16]
 8002272:	0876      	lsrs	r6, r6, #1
 8002274:	fab3 f383 	clz	r3, r3
 8002278:	3e01      	subs	r6, #1
 800227a:	409e      	lsls	r6, r3
 800227c:	fa07 f302 	lsl.w	r3, r7, r2
 8002280:	4333      	orrs	r3, r6
 8002282:	f420 02c0 	bic.w	r2, r0, #6291456	; 0x600000
 8002286:	e012      	b.n	80022ae <RCCEx_PLLSAI1_Config+0x136>
 8002288:	fa93 f2a3 	rbit	r2, r3
 800228c:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8002290:	fab2 f282 	clz	r2, r2
 8002294:	fa93 f3a3 	rbit	r3, r3
 8002298:	6966      	ldr	r6, [r4, #20]
 800229a:	0876      	lsrs	r6, r6, #1
 800229c:	fab3 f383 	clz	r3, r3
 80022a0:	3e01      	subs	r6, #1
 80022a2:	409e      	lsls	r6, r3
 80022a4:	fa07 f302 	lsl.w	r3, r7, r2
 80022a8:	4333      	orrs	r3, r6
 80022aa:	f020 62c0 	bic.w	r2, r0, #100663296	; 0x6000000
 80022ae:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80022b2:	4313      	orrs	r3, r2
 80022b4:	610b      	str	r3, [r1, #16]
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1R)));
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80022b6:	682b      	ldr	r3, [r5, #0]
 80022b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022bc:	602b      	str	r3, [r5, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022be:	f7fe fea3 	bl	8001008 <HAL_GetTick>
 80022c2:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80022c4:	682b      	ldr	r3, [r5, #0]
 80022c6:	4a07      	ldr	r2, [pc, #28]	; (80022e4 <RCCEx_PLLSAI1_Config+0x16c>)
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	d405      	bmi.n	80022d8 <RCCEx_PLLSAI1_Config+0x160>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022cc:	f7fe fe9c 	bl	8001008 <HAL_GetTick>
 80022d0:	1b80      	subs	r0, r0, r6
 80022d2:	2802      	cmp	r0, #2
 80022d4:	d9f6      	bls.n	80022c4 <RCCEx_PLLSAI1_Config+0x14c>
 80022d6:	e7a3      	b.n	8002220 <RCCEx_PLLSAI1_Config+0xa8>
      }

      if(status == HAL_OK)    
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80022d8:	6911      	ldr	r1, [r2, #16]
 80022da:	69a3      	ldr	r3, [r4, #24]
 80022dc:	430b      	orrs	r3, r1
 80022de:	6113      	str	r3, [r2, #16]
 80022e0:	2000      	movs	r0, #0
      }
    }
  }
  
  return status;
}
 80022e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022e4:	40021000 	.word	0x40021000

080022e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022ec:	6805      	ldr	r5, [r0, #0]
 80022ee:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022f2:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022f4:	d01f      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022f6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80022f8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80022fc:	d004      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80022fe:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002302:	d00c      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x36>
 8002304:	b9b1      	cbnz	r1, 8002334 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8002306:	e005      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002308:	4a96      	ldr	r2, [pc, #600]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800230a:	68d3      	ldr	r3, [r2, #12]
 800230c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002310:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002312:	e004      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x36>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002314:	3004      	adds	r0, #4
 8002316:	f7ff ff2f 	bl	8002178 <RCCEx_PLLSAI1_Config>
    default:
      ret = HAL_ERROR;
      break;
    }

    if(ret == HAL_OK)
 800231a:	4605      	mov	r5, r0
 800231c:	b958      	cbnz	r0, 8002336 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800231e:	4991      	ldr	r1, [pc, #580]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002320:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002324:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002328:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002330:	2500      	movs	r5, #0
 8002332:	e000      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    case RCC_SAI1CLKSOURCE_PIN:      /* External clock is used as source of SAI1 clock*/
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002334:	2501      	movs	r5, #1
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002336:	6823      	ldr	r3, [r4, #0]
 8002338:	039e      	lsls	r6, r3, #14
 800233a:	d55a      	bpl.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800233c:	4e89      	ldr	r6, [pc, #548]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800233e:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002340:	00d8      	lsls	r0, r3, #3
 8002342:	d40a      	bmi.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002344:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234a:	65b3      	str	r3, [r6, #88]	; 0x58
 800234c:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002356:	2701      	movs	r7, #1
 8002358:	e000      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x74>
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
  {
    FlagStatus       pwrclkchanged = RESET;
 800235a:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800235c:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8002568 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8002360:	f8d8 3000 	ldr.w	r3, [r8]
 8002364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002368:	f8c8 3000 	str.w	r3, [r8]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800236c:	f7fe fe4c 	bl	8001008 <HAL_GetTick>
 8002370:	4681      	mov	r9, r0

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002372:	f8d8 3000 	ldr.w	r3, [r8]
 8002376:	05d9      	lsls	r1, r3, #23
 8002378:	d406      	bmi.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237a:	f7fe fe45 	bl	8001008 <HAL_GetTick>
 800237e:	ebc9 0000 	rsb	r0, r9, r0
 8002382:	2802      	cmp	r0, #2
 8002384:	d9f5      	bls.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002386:	e02e      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = HAL_TIMEOUT;
        break;
      }
    }

    if(ret == HAL_OK)
 8002388:	bb75      	cbnz	r5, 80023e8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800238a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800238e:	4a75      	ldr	r2, [pc, #468]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002390:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002394:	d014      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8002396:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002398:	428b      	cmp	r3, r1
 800239a:	d011      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800239c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023a0:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80023a4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80023a8:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023ac:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023b4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80023b8:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023c0:	07da      	lsls	r2, r3, #31
 80023c2:	f140 80c2 	bpl.w	800254a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c6:	f7fe fe1f 	bl	8001008 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ca:	f241 3988 	movw	r9, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ce:	4680      	mov	r8, r0

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80023d0:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80023d4:	079b      	lsls	r3, r3, #30
 80023d6:	f100 80b8 	bmi.w	800254a <HAL_RCCEx_PeriphCLKConfig+0x262>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7fe fe15 	bl	8001008 <HAL_GetTick>
 80023de:	ebc8 0000 	rsb	r0, r8, r0
 80023e2:	4548      	cmp	r0, r9
 80023e4:	d9f4      	bls.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
      {
        ret = HAL_TIMEOUT;
 80023e6:	2503      	movs	r5, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023e8:	b11f      	cbz	r7, 80023f2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ea:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80023ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023f0:	65b3      	str	r3, [r6, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023f2:	6823      	ldr	r3, [r4, #0]
 80023f4:	07df      	lsls	r7, r3, #31
 80023f6:	d508      	bpl.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023f8:	485a      	ldr	r0, [pc, #360]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80023fa:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80023fe:	f022 0103 	bic.w	r1, r2, #3
 8002402:	6a22      	ldr	r2, [r4, #32]
 8002404:	430a      	orrs	r2, r1
 8002406:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800240a:	079e      	lsls	r6, r3, #30
 800240c:	d508      	bpl.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800240e:	4855      	ldr	r0, [pc, #340]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002410:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002414:	f022 010c 	bic.w	r1, r2, #12
 8002418:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800241a:	430a      	orrs	r2, r1
 800241c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002420:	0698      	lsls	r0, r3, #26
 8002422:	d508      	bpl.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002424:	484f      	ldr	r0, [pc, #316]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002426:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800242a:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
 800242e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002430:	430a      	orrs	r2, r1
 8002432:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002436:	0599      	lsls	r1, r3, #22
 8002438:	d508      	bpl.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800243a:	484a      	ldr	r0, [pc, #296]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800243c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002440:	f422 2140 	bic.w	r1, r2, #786432	; 0xc0000
 8002444:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002446:	430a      	orrs	r2, r1
 8002448:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800244c:	055a      	lsls	r2, r3, #21
 800244e:	d508      	bpl.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002450:	4844      	ldr	r0, [pc, #272]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002452:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002456:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 800245a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800245c:	430a      	orrs	r2, r1
 800245e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002462:	065f      	lsls	r7, r3, #25
 8002464:	d508      	bpl.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x190>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002466:	483f      	ldr	r0, [pc, #252]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002468:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800246c:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002470:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002472:	430a      	orrs	r2, r1
 8002474:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002478:	05de      	lsls	r6, r3, #23
 800247a:	d508      	bpl.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800247c:	4839      	ldr	r0, [pc, #228]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800247e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002482:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8002486:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002488:	430a      	orrs	r2, r1
 800248a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800248e:	0498      	lsls	r0, r3, #18
 8002490:	d51a      	bpl.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002492:	4a34      	ldr	r2, [pc, #208]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002494:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002496:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800249a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800249e:	430b      	orrs	r3, r1

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024a0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024a8:	d104      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024aa:	68d3      	ldr	r3, [r2, #12]
 80024ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024b0:	60d3      	str	r3, [r2, #12]
 80024b2:	e009      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    }
    else
    {
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024b4:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80024b8:	d106      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024ba:	2101      	movs	r1, #1
 80024bc:	1d20      	adds	r0, r4, #4
 80024be:	f7ff fe5b 	bl	8002178 <RCCEx_PLLSAI1_Config>
      
        if(ret != HAL_OK)
 80024c2:	2800      	cmp	r0, #0
 80024c4:	bf18      	it	ne
 80024c6:	4605      	movne	r5, r0
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	0359      	lsls	r1, r3, #13
 80024cc:	d51a      	bpl.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024ce:	4a25      	ldr	r2, [pc, #148]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80024d0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80024d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80024d6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80024da:	430b      	orrs	r3, r1

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024dc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024e4:	d104      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024e6:	68d3      	ldr	r3, [r2, #12]
 80024e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024ec:	60d3      	str	r3, [r2, #12]
 80024ee:	e009      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024f0:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80024f4:	d106      	bne.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024f6:	2101      	movs	r1, #1
 80024f8:	1d20      	adds	r0, r4, #4
 80024fa:	f7ff fe3d 	bl	8002178 <RCCEx_PLLSAI1_Config>
      
      if(ret != HAL_OK)
 80024fe:	2800      	cmp	r0, #0
 8002500:	bf18      	it	ne
 8002502:	4605      	movne	r5, r0
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002504:	6823      	ldr	r3, [r4, #0]
 8002506:	045a      	lsls	r2, r3, #17
 8002508:	d512      	bpl.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800250a:	4916      	ldr	r1, [pc, #88]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800250c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800250e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002512:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002516:	4313      	orrs	r3, r2
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002518:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800251c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002520:	d106      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002522:	2102      	movs	r1, #2
 8002524:	1d20      	adds	r0, r4, #4
 8002526:	f7ff fe27 	bl	8002178 <RCCEx_PLLSAI1_Config>

      if(ret != HAL_OK)
 800252a:	2800      	cmp	r0, #0
 800252c:	bf18      	it	ne
 800252e:	4605      	movne	r5, r0
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002530:	6823      	ldr	r3, [r4, #0]
 8002532:	041b      	lsls	r3, r3, #16
 8002534:	d512      	bpl.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002536:	490b      	ldr	r1, [pc, #44]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002538:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800253c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002540:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
  }

#endif /* DFSDM1_Filter0 */

  return status;
 8002548:	e008      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800254a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800254e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002552:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002554:	4313      	orrs	r3, r2
 8002556:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 800255a:	e745      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  }

#endif /* DFSDM1_Filter0 */

  return status;
}
 800255c:	4628      	mov	r0, r5
 800255e:	b003      	add	sp, #12
 8002560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002564:	40021000 	.word	0x40021000
 8002568:	40007000 	.word	0x40007000

0800256c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800256c:	6a03      	ldr	r3, [r0, #32]
 800256e:	f023 0301 	bic.w	r3, r3, #1
 8002572:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002574:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002576:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002578:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800257a:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800257c:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800257e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8002582:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002586:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002588:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800258a:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800258e:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002590:	4d12      	ldr	r5, [pc, #72]	; (80025dc <TIM_OC1_SetConfig+0x70>)
 8002592:	42a8      	cmp	r0, r5
 8002594:	d006      	beq.n	80025a4 <TIM_OC1_SetConfig+0x38>
 8002596:	4e12      	ldr	r6, [pc, #72]	; (80025e0 <TIM_OC1_SetConfig+0x74>)
 8002598:	42b0      	cmp	r0, r6
 800259a:	d003      	beq.n	80025a4 <TIM_OC1_SetConfig+0x38>
 800259c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80025a0:	42b0      	cmp	r0, r6
 80025a2:	d114      	bne.n	80025ce <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025a4:	68ce      	ldr	r6, [r1, #12]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025a6:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025aa:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80025ac:	42a8      	cmp	r0, r5
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025ae:	f023 0304 	bic.w	r3, r3, #4
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80025b2:	d006      	beq.n	80025c2 <TIM_OC1_SetConfig+0x56>
 80025b4:	4d0a      	ldr	r5, [pc, #40]	; (80025e0 <TIM_OC1_SetConfig+0x74>)
 80025b6:	42a8      	cmp	r0, r5
 80025b8:	d003      	beq.n	80025c2 <TIM_OC1_SetConfig+0x56>
 80025ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025be:	42a8      	cmp	r0, r5
 80025c0:	d105      	bne.n	80025ce <TIM_OC1_SetConfig+0x62>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025c2:	694e      	ldr	r6, [r1, #20]
 80025c4:	698d      	ldr	r5, [r1, #24]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025ca:	4335      	orrs	r5, r6
 80025cc:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025ce:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025d0:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025d2:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025d4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025d6:	6203      	str	r3, [r0, #32]
 80025d8:	bd70      	pop	{r4, r5, r6, pc}
 80025da:	bf00      	nop
 80025dc:	40012c00 	.word	0x40012c00
 80025e0:	40014000 	.word	0x40014000

080025e4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025e4:	6a03      	ldr	r3, [r0, #32]
 80025e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025ea:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ec:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025ee:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025f0:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025f2:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025f4:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025f6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80025fa:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025fe:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8002600:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002602:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8002606:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800260a:	4d0f      	ldr	r5, [pc, #60]	; (8002648 <TIM_OC3_SetConfig+0x64>)
 800260c:	42a8      	cmp	r0, r5
 800260e:	d107      	bne.n	8002620 <TIM_OC3_SetConfig+0x3c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8002610:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002612:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8002616:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800261a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800261e:	e005      	b.n	800262c <TIM_OC3_SetConfig+0x48>
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002620:	4d0a      	ldr	r5, [pc, #40]	; (800264c <TIM_OC3_SetConfig+0x68>)
 8002622:	42a8      	cmp	r0, r5
 8002624:	d002      	beq.n	800262c <TIM_OC3_SetConfig+0x48>
 8002626:	4d0a      	ldr	r5, [pc, #40]	; (8002650 <TIM_OC3_SetConfig+0x6c>)
 8002628:	42a8      	cmp	r0, r5
 800262a:	d107      	bne.n	800263c <TIM_OC3_SetConfig+0x58>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 800262c:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800262e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8002632:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8002636:	698d      	ldr	r5, [r1, #24]
 8002638:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800263c:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800263e:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002640:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002642:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002644:	6203      	str	r3, [r0, #32]
}
 8002646:	bd30      	pop	{r4, r5, pc}
 8002648:	40012c00 	.word	0x40012c00
 800264c:	40014000 	.word	0x40014000
 8002650:	40014400 	.word	0x40014400

08002654 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002654:	6a03      	ldr	r3, [r0, #32]
 8002656:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800265a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800265c:	6a02      	ldr	r2, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800265e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002660:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002662:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002664:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002666:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800266a:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800266e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8002672:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002674:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8002678:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800267c:	4d0a      	ldr	r5, [pc, #40]	; (80026a8 <TIM_OC4_SetConfig+0x54>)
 800267e:	42a8      	cmp	r0, r5
 8002680:	d007      	beq.n	8002692 <TIM_OC4_SetConfig+0x3e>
 8002682:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002686:	42a8      	cmp	r0, r5
 8002688:	d003      	beq.n	8002692 <TIM_OC4_SetConfig+0x3e>
 800268a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800268e:	42a8      	cmp	r0, r5
 8002690:	d104      	bne.n	800269c <TIM_OC4_SetConfig+0x48>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002692:	694d      	ldr	r5, [r1, #20]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002694:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002698:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800269c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800269e:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026a0:	684b      	ldr	r3, [r1, #4]
 80026a2:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026a4:	6202      	str	r2, [r0, #32]
 80026a6:	bd30      	pop	{r4, r5, pc}
 80026a8:	40012c00 	.word	0x40012c00

080026ac <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80026ac:	6a03      	ldr	r3, [r0, #32]
 80026ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026b4:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b6:	6842      	ldr	r2, [r0, #4]
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80026b8:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80026ba:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026bc:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80026be:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80026c2:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026c6:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 80026c8:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80026ca:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 80026ce:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80026d2:	4d0b      	ldr	r5, [pc, #44]	; (8002700 <TIM_OC5_SetConfig+0x54>)
 80026d4:	42a8      	cmp	r0, r5
 80026d6:	d007      	beq.n	80026e8 <TIM_OC5_SetConfig+0x3c>
 80026d8:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80026dc:	42a8      	cmp	r0, r5
 80026de:	d003      	beq.n	80026e8 <TIM_OC5_SetConfig+0x3c>
 80026e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80026e4:	42a8      	cmp	r0, r5
 80026e6:	d104      	bne.n	80026f2 <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 80026e8:	694d      	ldr	r5, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 16);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80026ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 80026ee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026f2:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80026f4:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80026f6:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80026f8:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026fa:	6203      	str	r3, [r0, #32]
 80026fc:	bd30      	pop	{r4, r5, pc}
 80026fe:	bf00      	nop
 8002700:	40012c00 	.word	0x40012c00

08002704 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002704:	6a03      	ldr	r3, [r0, #32]
 8002706:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800270a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800270c:	6a02      	ldr	r2, [r0, #32]
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800270e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002710:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002712:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002714:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800271a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800271e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8002722:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002724:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8002728:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800272c:	4d0a      	ldr	r5, [pc, #40]	; (8002758 <TIM_OC6_SetConfig+0x54>)
 800272e:	42a8      	cmp	r0, r5
 8002730:	d007      	beq.n	8002742 <TIM_OC6_SetConfig+0x3e>
 8002732:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002736:	42a8      	cmp	r0, r5
 8002738:	d003      	beq.n	8002742 <TIM_OC6_SetConfig+0x3e>
 800273a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800273e:	42a8      	cmp	r0, r5
 8002740:	d104      	bne.n	800274c <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8002742:	694d      	ldr	r5, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 20);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002744:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8002748:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800274c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800274e:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002750:	684b      	ldr	r3, [r1, #4]
 8002752:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002754:	6202      	str	r2, [r0, #32]
 8002756:	bd30      	pop	{r4, r5, pc}
 8002758:	40012c00 	.word	0x40012c00

0800275c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800275c:	4a18      	ldr	r2, [pc, #96]	; (80027c0 <TIM_Base_SetConfig+0x64>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 800275e:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002760:	4290      	cmp	r0, r2
  * @param  TIMx: TIM peripheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002762:	b510      	push	{r4, lr}
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002764:	d002      	beq.n	800276c <TIM_Base_SetConfig+0x10>
 8002766:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800276a:	d109      	bne.n	8002780 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800276c:	684c      	ldr	r4, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800276e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002772:	4290      	cmp	r0, r2
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002774:	ea43 0304 	orr.w	r3, r3, r4
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002778:	d009      	beq.n	800278e <TIM_Base_SetConfig+0x32>
 800277a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800277e:	d006      	beq.n	800278e <TIM_Base_SetConfig+0x32>
 8002780:	4a10      	ldr	r2, [pc, #64]	; (80027c4 <TIM_Base_SetConfig+0x68>)
 8002782:	4290      	cmp	r0, r2
 8002784:	d003      	beq.n	800278e <TIM_Base_SetConfig+0x32>
 8002786:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800278a:	4290      	cmp	r0, r2
 800278c:	d103      	bne.n	8002796 <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800278e:	68ca      	ldr	r2, [r1, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002794:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8002796:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002798:	688b      	ldr	r3, [r1, #8]
 800279a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800279c:	680b      	ldr	r3, [r1, #0]
 800279e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a0:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <TIM_Base_SetConfig+0x64>)
 80027a2:	4298      	cmp	r0, r3
 80027a4:	d007      	beq.n	80027b6 <TIM_Base_SetConfig+0x5a>
 80027a6:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80027aa:	4298      	cmp	r0, r3
 80027ac:	d003      	beq.n	80027b6 <TIM_Base_SetConfig+0x5a>
 80027ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027b2:	4298      	cmp	r0, r3
 80027b4:	d101      	bne.n	80027ba <TIM_Base_SetConfig+0x5e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027b6:	690b      	ldr	r3, [r1, #16]
 80027b8:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027ba:	2301      	movs	r3, #1
 80027bc:	6143      	str	r3, [r0, #20]
 80027be:	bd10      	pop	{r4, pc}
 80027c0:	40012c00 	.word	0x40012c00
 80027c4:	40014000 	.word	0x40014000

080027c8 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and initialize the associated handle.
  * @param  htim: TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027c8:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80027ca:	4604      	mov	r4, r0
 80027cc:	b1a0      	cbz	r0, 80027f8 <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 80027ce:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80027d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027d6:	b91b      	cbnz	r3, 80027e0 <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027d8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027dc:	f001 f88c 	bl	80038f8 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80027e0:	2302      	movs	r3, #2
 80027e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027e6:	6820      	ldr	r0, [r4, #0]
 80027e8:	1d21      	adds	r1, r4, #4
 80027ea:	f7ff ffb7 	bl	800275c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80027ee:	2301      	movs	r3, #1
 80027f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 80027f4:	2000      	movs	r0, #0
 80027f6:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 80027f8:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 80027fa:	bd10      	pop	{r4, pc}

080027fc <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027fc:	6a03      	ldr	r3, [r0, #32]
 80027fe:	f023 0310 	bic.w	r3, r3, #16
 8002802:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002804:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002806:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002808:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800280a:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800280c:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800280e:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8002812:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002816:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 800281a:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800281c:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8002820:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002824:	4d0f      	ldr	r5, [pc, #60]	; (8002864 <TIM_OC2_SetConfig+0x68>)
 8002826:	42a8      	cmp	r0, r5
 8002828:	d107      	bne.n	800283a <TIM_OC2_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800282a:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800282c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8002830:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002838:	e005      	b.n	8002846 <TIM_OC2_SetConfig+0x4a>

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800283a:	4d0b      	ldr	r5, [pc, #44]	; (8002868 <TIM_OC2_SetConfig+0x6c>)
 800283c:	42a8      	cmp	r0, r5
 800283e:	d002      	beq.n	8002846 <TIM_OC2_SetConfig+0x4a>
 8002840:	4d0a      	ldr	r5, [pc, #40]	; (800286c <TIM_OC2_SetConfig+0x70>)
 8002842:	42a8      	cmp	r0, r5
 8002844:	d107      	bne.n	8002856 <TIM_OC2_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002846:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002848:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800284c:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002850:	698d      	ldr	r5, [r1, #24]
 8002852:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002856:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002858:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800285a:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800285c:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800285e:	6203      	str	r3, [r0, #32]
}
 8002860:	bd30      	pop	{r4, r5, pc}
 8002862:	bf00      	nop
 8002864:	40012c00 	.word	0x40012c00
 8002868:	40014000 	.word	0x40014000
 800286c:	40014400 	.word	0x40014400

08002870 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef* sConfig,
                                            uint32_t Channel)
{
 8002870:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002872:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002876:	2b01      	cmp	r3, #1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef* sConfig,
                                            uint32_t Channel)
{
 8002878:	4604      	mov	r4, r0
 800287a:	460d      	mov	r5, r1
 800287c:	f04f 0002 	mov.w	r0, #2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002880:	d07b      	beq.n	800297a <HAL_TIM_PWM_ConfigChannel+0x10a>
 8002882:	2301      	movs	r3, #1

  htim->State = HAL_TIM_STATE_BUSY;

  switch (Channel)
 8002884:	2a08      	cmp	r2, #8
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002886:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800288a:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39

  switch (Channel)
 800288e:	d03c      	beq.n	800290a <HAL_TIM_PWM_ConfigChannel+0x9a>
 8002890:	d813      	bhi.n	80028ba <HAL_TIM_PWM_ConfigChannel+0x4a>
 8002892:	b34a      	cbz	r2, 80028e8 <HAL_TIM_PWM_ConfigChannel+0x78>
 8002894:	2a04      	cmp	r2, #4
 8002896:	d16a      	bne.n	800296e <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002898:	6820      	ldr	r0, [r4, #0]
 800289a:	f7ff ffaf 	bl	80027fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800289e:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80028a0:	6909      	ldr	r1, [r1, #16]

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028a2:	699a      	ldr	r2, [r3, #24]
 80028a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028a8:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028aa:	699a      	ldr	r2, [r3, #24]
 80028ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028b0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80028b2:	699a      	ldr	r2, [r3, #24]
 80028b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80028b8:	e025      	b.n	8002906 <HAL_TIM_PWM_ConfigChannel+0x96>
  /* Process Locked */
  __HAL_LOCK(htim);

  htim->State = HAL_TIM_STATE_BUSY;

  switch (Channel)
 80028ba:	2a10      	cmp	r2, #16
 80028bc:	d036      	beq.n	800292c <HAL_TIM_PWM_ConfigChannel+0xbc>
 80028be:	2a14      	cmp	r2, #20
 80028c0:	d044      	beq.n	800294c <HAL_TIM_PWM_ConfigChannel+0xdc>
 80028c2:	2a0c      	cmp	r2, #12
 80028c4:	d153      	bne.n	800296e <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028c6:	6820      	ldr	r0, [r4, #0]
 80028c8:	f7ff fec4 	bl	8002654 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028cc:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80028ce:	6909      	ldr	r1, [r1, #16]

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028d0:	69da      	ldr	r2, [r3, #28]
 80028d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028d6:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028d8:	69da      	ldr	r2, [r3, #28]
 80028da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80028e0:	69da      	ldr	r2, [r3, #28]
 80028e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80028e6:	e01f      	b.n	8002928 <HAL_TIM_PWM_ConfigChannel+0xb8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028e8:	6820      	ldr	r0, [r4, #0]
 80028ea:	f7ff fe3f 	bl	800256c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028ee:	6823      	ldr	r3, [r4, #0]
 80028f0:	699a      	ldr	r2, [r3, #24]
 80028f2:	f042 0208 	orr.w	r2, r2, #8
 80028f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028f8:	699a      	ldr	r2, [r3, #24]
 80028fa:	f022 0204 	bic.w	r2, r2, #4
 80028fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002900:	6999      	ldr	r1, [r3, #24]
 8002902:	692a      	ldr	r2, [r5, #16]
 8002904:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002906:	619a      	str	r2, [r3, #24]
    }
    break;
 8002908:	e031      	b.n	800296e <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800290a:	6820      	ldr	r0, [r4, #0]
 800290c:	f7ff fe6a 	bl	80025e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002910:	6823      	ldr	r3, [r4, #0]
 8002912:	69da      	ldr	r2, [r3, #28]
 8002914:	f042 0208 	orr.w	r2, r2, #8
 8002918:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800291a:	69da      	ldr	r2, [r3, #28]
 800291c:	f022 0204 	bic.w	r2, r2, #4
 8002920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002922:	69d9      	ldr	r1, [r3, #28]
 8002924:	692a      	ldr	r2, [r5, #16]
 8002926:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002928:	61da      	str	r2, [r3, #28]
    }
    break;
 800292a:	e020      	b.n	800296e <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800292c:	6820      	ldr	r0, [r4, #0]
 800292e:	f7ff febd 	bl	80026ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002932:	6823      	ldr	r3, [r4, #0]
 8002934:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002936:	f042 0208 	orr.w	r2, r2, #8
 800293a:	655a      	str	r2, [r3, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800293c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800293e:	f022 0204 	bic.w	r2, r2, #4
 8002942:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002944:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002946:	692a      	ldr	r2, [r5, #16]
 8002948:	430a      	orrs	r2, r1
 800294a:	e00f      	b.n	800296c <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800294c:	6820      	ldr	r0, [r4, #0]
 800294e:	f7ff fed9 	bl	8002704 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002952:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 8002954:	6909      	ldr	r1, [r1, #16]

     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002956:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002958:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800295c:	655a      	str	r2, [r3, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800295e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002964:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 8002966:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002968:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800296c:	655a      	str	r2, [r3, #84]	; 0x54

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 800296e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8002970:	2000      	movs	r0, #0

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8002972:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002976:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 800297a:	bd38      	pop	{r3, r4, r5, pc}

0800297c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800297c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002980:	2b01      	cmp	r3, #1
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002982:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002984:	d018      	beq.n	80029b8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002986:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002988:	4c0c      	ldr	r4, [pc, #48]	; (80029bc <HAL_TIMEx_MasterConfigSynchronization+0x40>)

  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800298a:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800298c:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800298e:	42a2      	cmp	r2, r4
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002990:	bf02      	ittt	eq
 8002992:	684c      	ldreq	r4, [r1, #4]
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002994:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002998:	4323      	orreq	r3, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800299a:	680c      	ldr	r4, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800299c:	6889      	ldr	r1, [r1, #8]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800299e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029a2:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80029a4:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029a8:	6053      	str	r3, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029aa:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 80029ac:	2300      	movs	r3, #0

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80029ae:	6091      	str	r1, [r2, #8]

  __HAL_UNLOCK(htim);
 80029b0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029b8:	2002      	movs	r0, #2
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 80029ba:	bd30      	pop	{r4, r5, pc}
 80029bc:	40012c00 	.word	0x40012c00

080029c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80029c0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80029c4:	2b01      	cmp	r3, #1
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 80029c6:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80029c8:	d034      	beq.n	8002a34 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80029ca:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
  
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80029cc:	6804      	ldr	r4, [r0, #0]
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80029ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029d2:	688b      	ldr	r3, [r1, #8]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80029da:	684b      	ldr	r3, [r1, #4]
 80029dc:	4313      	orrs	r3, r2
 80029de:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80029e2:	680b      	ldr	r3, [r1, #0]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80029ea:	690b      	ldr	r3, [r1, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80029f2:	694b      	ldr	r3, [r1, #20]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80029f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 80029fc:	431a      	orrs	r2, r3
 80029fe:	698b      	ldr	r3, [r1, #24]
 8002a00:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002a04:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002a08:	4a0b      	ldr	r2, [pc, #44]	; (8002a38 <HAL_TIMEx_ConfigBreakDeadTime+0x78>)
 8002a0a:	4294      	cmp	r4, r2
 8002a0c:	d10c      	bne.n	8002a28 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002a0e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8002a10:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002a14:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002a18:	69ca      	ldr	r2, [r1, #28]
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a24:	6a0b      	ldr	r3, [r1, #32]
 8002a26:	4313      	orrs	r3, r2
  }
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002a28:	6463      	str	r3, [r4, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8002a30:	4618      	mov	r0, r3
 8002a32:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002a34:	2002      	movs	r0, #2
  htim->Instance->BDTR = tmpbdtr;
  
  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8002a36:	bd10      	pop	{r4, pc}
 8002a38:	40012c00 	.word	0x40012c00

08002a3c <HAL_UART_AbortReceive>:
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a3c:	6803      	ldr	r3, [r0, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	f422 7290 	bic.w	r2, r2, #288	; 0x120
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8002a44:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a46:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	f022 0201 	bic.w	r2, r2, #1
 8002a4e:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	0652      	lsls	r2, r2, #25
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8002a54:	4604      	mov	r4, r0
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a56:	d509      	bpl.n	8002a6c <HAL_UART_AbortReceive+0x30>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a58:	689a      	ldr	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if(huart->hdmarx != NULL)
 8002a5a:	6e40      	ldr	r0, [r0, #100]	; 0x64
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a60:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if(huart->hdmarx != NULL)
 8002a62:	b118      	cbz	r0, 8002a6c <HAL_UART_AbortReceive+0x30>
    {
      /* Set the UART DMA Abort callback to Null. 
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	6383      	str	r3, [r0, #56]	; 0x38

      HAL_DMA_Abort(huart->hdmarx);
 8002a68:	f7fe fe27 	bl	80016ba <HAL_DMA_Abort>

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0; 

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002a6c:	6823      	ldr	r3, [r4, #0]
      HAL_DMA_Abort(huart->hdmarx);
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0; 
 8002a6e:	2000      	movs	r0, #0

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002a70:	220f      	movs	r2, #15
      HAL_DMA_Abort(huart->hdmarx);
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0; 
 8002a72:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002a76:	621a      	str	r2, [r3, #32]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a78:	2320      	movs	r3, #32
 8002a7a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 8002a7e:	bd10      	pop	{r4, pc}

08002a80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a82:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002a84:	6805      	ldr	r5, [r0, #0]
 8002a86:	6923      	ldr	r3, [r4, #16]
 8002a88:	68a2      	ldr	r2, [r4, #8]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a8a:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002a8c:	6828      	ldr	r0, [r5, #0]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	6963      	ldr	r3, [r4, #20]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	ea43 0201 	orr.w	r2, r3, r1
 8002a98:	4b7d      	ldr	r3, [pc, #500]	; (8002c90 <UART_SetConfig+0x210>)
 8002a9a:	4003      	ands	r3, r0
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aa0:	686b      	ldr	r3, [r5, #4]
 8002aa2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002aa6:	68e3      	ldr	r3, [r4, #12]
 8002aa8:	4313      	orrs	r3, r2
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002aaa:	4a7a      	ldr	r2, [pc, #488]	; (8002c94 <UART_SetConfig+0x214>)
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aac:	606b      	str	r3, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002aae:	4295      	cmp	r5, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ab0:	bf18      	it	ne
 8002ab2:	6a22      	ldrne	r2, [r4, #32]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ab4:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ab6:	bf18      	it	ne
 8002ab8:	4313      	orrne	r3, r2
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002aba:	68aa      	ldr	r2, [r5, #8]
 8002abc:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ac4:	4b74      	ldr	r3, [pc, #464]	; (8002c98 <UART_SetConfig+0x218>)
 8002ac6:	429d      	cmp	r5, r3
 8002ac8:	d107      	bne.n	8002ada <UART_SetConfig+0x5a>
 8002aca:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002ace:	4a73      	ldr	r2, [pc, #460]	; (8002c9c <UART_SetConfig+0x21c>)
 8002ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	e009      	b.n	8002aee <UART_SetConfig+0x6e>
 8002ada:	4b71      	ldr	r3, [pc, #452]	; (8002ca0 <UART_SetConfig+0x220>)
 8002adc:	429d      	cmp	r5, r3
 8002ade:	d10b      	bne.n	8002af8 <UART_SetConfig+0x78>
 8002ae0:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002ae4:	4a6f      	ldr	r2, [pc, #444]	; (8002ca4 <UART_SetConfig+0x224>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aea:	f003 030c 	and.w	r3, r3, #12
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aee:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002af2:	5cd3      	ldrb	r3, [r2, r3]
 8002af4:	d065      	beq.n	8002bc2 <UART_SetConfig+0x142>
 8002af6:	e099      	b.n	8002c2c <UART_SetConfig+0x1ac>
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002af8:	4b66      	ldr	r3, [pc, #408]	; (8002c94 <UART_SetConfig+0x214>)
 8002afa:	429d      	cmp	r5, r3
 8002afc:	f040 8089 	bne.w	8002c12 <UART_SetConfig+0x192>
 8002b00:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8002b04:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8002b08:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 8002b0c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8002b10:	d014      	beq.n	8002b3c <UART_SetConfig+0xbc>
 8002b12:	d805      	bhi.n	8002b20 <UART_SetConfig+0xa0>
 8002b14:	2d00      	cmp	r5, #0
 8002b16:	f040 80b7 	bne.w	8002c88 <UART_SetConfig+0x208>
    tmpreg = 0;

    switch (clocksource)
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8002b1a:	f7ff fafd 	bl	8002118 <HAL_RCC_GetPCLK1Freq>
      break;
 8002b1e:	e010      	b.n	8002b42 <UART_SetConfig+0xc2>
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b20:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8002b24:	d007      	beq.n	8002b36 <UART_SetConfig+0xb6>
 8002b26:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 8002b2a:	f040 80ad 	bne.w	8002c88 <UART_SetConfig+0x208>
 8002b2e:	2508      	movs	r5, #8
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
      break;
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 8002b30:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002b34:	e008      	b.n	8002b48 <UART_SetConfig+0xc8>
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b36:	2502      	movs	r5, #2
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
      break;
    case UART_CLOCKSOURCE_HSI:
      tmpreg = (uint32_t) HSI_VALUE;
 8002b38:	485b      	ldr	r0, [pc, #364]	; (8002ca8 <UART_SetConfig+0x228>)
 8002b3a:	e005      	b.n	8002b48 <UART_SetConfig+0xc8>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 8002b3c:	f7fe ff1e 	bl	800197c <HAL_RCC_GetSysClockFreq>
      break;
 8002b40:	2504      	movs	r5, #4
        ret = HAL_ERROR;
      break;
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 8002b42:	2800      	cmp	r0, #0
 8002b44:	f000 809e 	beq.w	8002c84 <UART_SetConfig+0x204>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8002b48:	6862      	ldr	r2, [r4, #4]
 8002b4a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002b4e:	4283      	cmp	r3, r0
 8002b50:	f200 809a 	bhi.w	8002c88 <UART_SetConfig+0x208>
 8002b54:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002b58:	f200 8096 	bhi.w	8002c88 <UART_SetConfig+0x208>
      {
        ret = HAL_ERROR;
      }
      else
      {
        switch (clocksource)
 8002b5c:	2d08      	cmp	r5, #8
 8002b5e:	d827      	bhi.n	8002bb0 <UART_SetConfig+0x130>
 8002b60:	e8df f005 	tbb	[pc, r5]
 8002b64:	26082605 	.word	0x26082605
 8002b68:	2626260e 	.word	0x2626260e
 8002b6c:	1b          	.byte	0x1b
 8002b6d:	00          	.byte	0x00
        {
        case UART_CLOCKSOURCE_PCLK1:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002b6e:	f7ff fad3 	bl	8002118 <HAL_RCC_GetPCLK1Freq>
 8002b72:	e007      	b.n	8002b84 <UART_SetConfig+0x104>
          break;
        case UART_CLOCKSOURCE_HSI:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002b74:	484d      	ldr	r0, [pc, #308]	; (8002cac <UART_SetConfig+0x22c>)
 8002b76:	0855      	lsrs	r5, r2, #1
 8002b78:	2300      	movs	r3, #0
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	1940      	adds	r0, r0, r5
 8002b7e:	e011      	b.n	8002ba4 <UART_SetConfig+0x124>
          break;
        case UART_CLOCKSOURCE_SYSCLK:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002b80:	f7fe fefc 	bl	800197c <HAL_RCC_GetSysClockFreq>
 8002b84:	6862      	ldr	r2, [r4, #4]
 8002b86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b8a:	0856      	lsrs	r6, r2, #1
 8002b8c:	2700      	movs	r7, #0
 8002b8e:	fbe1 6700 	umlal	r6, r7, r1, r0
 8002b92:	2300      	movs	r3, #0
 8002b94:	4630      	mov	r0, r6
 8002b96:	4639      	mov	r1, r7
 8002b98:	e006      	b.n	8002ba8 <UART_SetConfig+0x128>
          break;
        case UART_CLOCKSOURCE_LSE:
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002b9a:	0850      	lsrs	r0, r2, #1
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8002ba4:	f141 0100 	adc.w	r1, r1, #0
 8002ba8:	f7fe f87a 	bl	8000ca0 <__aeabi_uldivmod>
          break;
 8002bac:	2200      	movs	r2, #0
 8002bae:	e000      	b.n	8002bb2 <UART_SetConfig+0x132>
        case UART_CLOCKSOURCE_UNDEFINED:
        default:
            ret = HAL_ERROR;
 8002bb0:	2201      	movs	r2, #1
          break;
        }
   
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8002bb2:	4b3f      	ldr	r3, [pc, #252]	; (8002cb0 <UART_SetConfig+0x230>)
 8002bb4:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8002bb8:	4299      	cmp	r1, r3
 8002bba:	d865      	bhi.n	8002c88 <UART_SetConfig+0x208>
        {
           huart->Instance->BRR = tmpreg;
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	60d8      	str	r0, [r3, #12]
 8002bc0:	e063      	b.n	8002c8a <UART_SetConfig+0x20a>
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    switch (clocksource)
 8002bc2:	2b08      	cmp	r3, #8
 8002bc4:	d828      	bhi.n	8002c18 <UART_SetConfig+0x198>
 8002bc6:	e8df f003 	tbb	[pc, r3]
 8002bca:	0805      	.short	0x0805
 8002bcc:	2712270b 	.word	0x2712270b
 8002bd0:	2727      	.short	0x2727
 8002bd2:	1b          	.byte	0x1b
 8002bd3:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002bd4:	f7ff faa0 	bl	8002118 <HAL_RCC_GetPCLK1Freq>
 8002bd8:	e00b      	b.n	8002bf2 <UART_SetConfig+0x172>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002bda:	f7ff fab5 	bl	8002148 <HAL_RCC_GetPCLK2Freq>
 8002bde:	e008      	b.n	8002bf2 <UART_SetConfig+0x172>
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002be0:	6860      	ldr	r0, [r4, #4]
 8002be2:	0842      	lsrs	r2, r0, #1
 8002be4:	f102 73f4 	add.w	r3, r2, #31981568	; 0x1e80000
 8002be8:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002bec:	e00c      	b.n	8002c08 <UART_SetConfig+0x188>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002bee:	f7fe fec5 	bl	800197c <HAL_RCC_GetSysClockFreq>
 8002bf2:	6863      	ldr	r3, [r4, #4]
 8002bf4:	085a      	lsrs	r2, r3, #1
 8002bf6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8002bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfe:	e005      	b.n	8002c0c <UART_SetConfig+0x18c>
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002c00:	6860      	ldr	r0, [r4, #4]
 8002c02:	0843      	lsrs	r3, r0, #1
 8002c04:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002c08:	fbb3 f3f0 	udiv	r3, r3, r0
 8002c0c:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c0e:	2200      	movs	r2, #0
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
 8002c10:	e004      	b.n	8002c1c <UART_SetConfig+0x19c>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c12:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002c16:	d137      	bne.n	8002c88 <UART_SetConfig+0x208>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002c18:	2201      	movs	r2, #1
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
 8002c1a:	2300      	movs	r3, #0
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8002c1c:	f3c3 0042 	ubfx	r0, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8002c20:	6821      	ldr	r1, [r4, #0]
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8002c22:	f023 030f 	bic.w	r3, r3, #15
    huart->Instance->BRR = brrtemp;
 8002c26:	4303      	orrs	r3, r0
 8002c28:	60cb      	str	r3, [r1, #12]
 8002c2a:	e02e      	b.n	8002c8a <UART_SetConfig+0x20a>
  }
  else
  {
    switch (clocksource)
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d82b      	bhi.n	8002c88 <UART_SetConfig+0x208>
 8002c30:	e8df f003 	tbb	[pc, r3]
 8002c34:	2a0b0805 	.word	0x2a0b0805
 8002c38:	2a2a2a14 	.word	0x2a2a2a14
 8002c3c:	1e          	.byte	0x1e
 8002c3d:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002c3e:	f7ff fa6b 	bl	8002118 <HAL_RCC_GetPCLK1Freq>
 8002c42:	e00d      	b.n	8002c60 <UART_SetConfig+0x1e0>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002c44:	f7ff fa80 	bl	8002148 <HAL_RCC_GetPCLK2Freq>
 8002c48:	e00a      	b.n	8002c60 <UART_SetConfig+0x1e0>
      break;
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002c4a:	6861      	ldr	r1, [r4, #4]
 8002c4c:	084a      	lsrs	r2, r1, #1
 8002c4e:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 8002c52:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c5a:	e00f      	b.n	8002c7c <UART_SetConfig+0x1fc>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c5c:	f7fe fe8e 	bl	800197c <HAL_RCC_GetSysClockFreq>
 8002c60:	6863      	ldr	r3, [r4, #4]
 8002c62:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002c66:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c6a:	b280      	uxth	r0, r0
 8002c6c:	60e8      	str	r0, [r5, #12]
 8002c6e:	e007      	b.n	8002c80 <UART_SetConfig+0x200>
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002c70:	6862      	ldr	r2, [r4, #4]
 8002c72:	0853      	lsrs	r3, r2, #1
 8002c74:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c78:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	60eb      	str	r3, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c80:	2200      	movs	r2, #0
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
 8002c82:	e002      	b.n	8002c8a <UART_SetConfig+0x20a>
 8002c84:	4602      	mov	r2, r0
 8002c86:	e000      	b.n	8002c8a <UART_SetConfig+0x20a>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002c88:	2201      	movs	r2, #1
    }
  }

  return ret;

}
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	efff69f3 	.word	0xefff69f3
 8002c94:	40008000 	.word	0x40008000
 8002c98:	40013800 	.word	0x40013800
 8002c9c:	08009e20 	.word	0x08009e20
 8002ca0:	40004400 	.word	0x40004400
 8002ca4:	08009e24 	.word	0x08009e24
 8002ca8:	00f42400 	.word	0x00f42400
 8002cac:	f4240000 	.word	0xf4240000
 8002cb0:	000ffcff 	.word	0x000ffcff

08002cb4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cb4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002cb6:	07da      	lsls	r2, r3, #31
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cb8:	b510      	push	{r4, lr}
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cba:	d506      	bpl.n	8002cca <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cbc:	6804      	ldr	r4, [r0, #0]
 8002cbe:	6862      	ldr	r2, [r4, #4]
 8002cc0:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8002cc4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cca:	079c      	lsls	r4, r3, #30
 8002ccc:	d506      	bpl.n	8002cdc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cce:	6804      	ldr	r4, [r0, #0]
 8002cd0:	6862      	ldr	r2, [r4, #4]
 8002cd2:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8002cd6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cdc:	0759      	lsls	r1, r3, #29
 8002cde:	d506      	bpl.n	8002cee <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ce0:	6804      	ldr	r4, [r0, #0]
 8002ce2:	6862      	ldr	r2, [r4, #4]
 8002ce4:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8002ce8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002cea:	430a      	orrs	r2, r1
 8002cec:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cee:	071a      	lsls	r2, r3, #28
 8002cf0:	d506      	bpl.n	8002d00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cf2:	6804      	ldr	r4, [r0, #0]
 8002cf4:	6862      	ldr	r2, [r4, #4]
 8002cf6:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8002cfa:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d00:	06dc      	lsls	r4, r3, #27
 8002d02:	d506      	bpl.n	8002d12 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d04:	6804      	ldr	r4, [r0, #0]
 8002d06:	68a2      	ldr	r2, [r4, #8]
 8002d08:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002d0c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d12:	0699      	lsls	r1, r3, #26
 8002d14:	d506      	bpl.n	8002d24 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d16:	6804      	ldr	r4, [r0, #0]
 8002d18:	68a2      	ldr	r2, [r4, #8]
 8002d1a:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002d1e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002d20:	430a      	orrs	r2, r1
 8002d22:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d24:	065a      	lsls	r2, r3, #25
 8002d26:	d50f      	bpl.n	8002d48 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d28:	6801      	ldr	r1, [r0, #0]
 8002d2a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002d2c:	684a      	ldr	r2, [r1, #4]
 8002d2e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002d32:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d34:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d38:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d3a:	d105      	bne.n	8002d48 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d3c:	684a      	ldr	r2, [r1, #4]
 8002d3e:	f422 04c0 	bic.w	r4, r2, #6291456	; 0x600000
 8002d42:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002d44:	4322      	orrs	r2, r4
 8002d46:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d48:	061b      	lsls	r3, r3, #24
 8002d4a:	d506      	bpl.n	8002d5a <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d4c:	6801      	ldr	r1, [r0, #0]
 8002d4e:	684b      	ldr	r3, [r1, #4]
 8002d50:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002d54:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002d56:	4313      	orrs	r3, r2
 8002d58:	604b      	str	r3, [r1, #4]
 8002d5a:	bd10      	pop	{r4, pc}

08002d5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d60:	9d06      	ldr	r5, [sp, #24]
 8002d62:	4604      	mov	r4, r0
 8002d64:	460f      	mov	r7, r1
 8002d66:	4616      	mov	r6, r2
 8002d68:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d6a:	6821      	ldr	r1, [r4, #0]
 8002d6c:	69ca      	ldr	r2, [r1, #28]
 8002d6e:	ea37 0302 	bics.w	r3, r7, r2
 8002d72:	bf0c      	ite	eq
 8002d74:	2201      	moveq	r2, #1
 8002d76:	2200      	movne	r2, #0
 8002d78:	42b2      	cmp	r2, r6
 8002d7a:	d11d      	bne.n	8002db8 <UART_WaitOnFlagUntilTimeout+0x5c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002d7c:	1c6b      	adds	r3, r5, #1
 8002d7e:	d0f5      	beq.n	8002d6c <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002d80:	b99d      	cbnz	r5, 8002daa <UART_WaitOnFlagUntilTimeout+0x4e>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d82:	6823      	ldr	r3, [r4, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d8a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	f022 0201 	bic.w	r2, r2, #1
 8002d92:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002d94:	2320      	movs	r3, #32
 8002d96:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002d9a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002da4:	2003      	movs	r0, #3
 8002da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002daa:	f7fe f92d 	bl	8001008 <HAL_GetTick>
 8002dae:	ebc8 0000 	rsb	r0, r8, r0
 8002db2:	4285      	cmp	r5, r0
 8002db4:	d2d9      	bcs.n	8002d6a <UART_WaitOnFlagUntilTimeout+0xe>
 8002db6:	e7e4      	b.n	8002d82 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002db8:	2000      	movs	r0, #0
}
 8002dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002dbe <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dbe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002dc2:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002dc4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002dc8:	2b20      	cmp	r3, #32
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dca:	4604      	mov	r4, r0
 8002dcc:	460d      	mov	r5, r1
 8002dce:	4690      	mov	r8, r2
  uint16_t* tmp;
  uint32_t tickstart = 0;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002dd0:	d14b      	bne.n	8002e6a <HAL_UART_Transmit+0xac>
  {
    if((pData == NULL ) || (Size == 0))
 8002dd2:	2900      	cmp	r1, #0
 8002dd4:	d047      	beq.n	8002e66 <HAL_UART_Transmit+0xa8>
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d045      	beq.n	8002e66 <HAL_UART_Transmit+0xa8>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dda:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d043      	beq.n	8002e6a <HAL_UART_Transmit+0xac>
 8002de2:	2301      	movs	r3, #1
 8002de4:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de8:	2300      	movs	r3, #0
 8002dea:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dec:	2321      	movs	r3, #33	; 0x21
 8002dee:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002df2:	f7fe f909 	bl	8001008 <HAL_GetTick>

    huart->TxXferSize = Size;
 8002df6:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002dfa:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 8002dfc:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0)
 8002e00:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002e04:	b292      	uxth	r2, r2
 8002e06:	b302      	cbz	r2, 8002e4a <HAL_UART_Transmit+0x8c>
    {
      huart->TxXferCount--;
 8002e08:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e0c:	9700      	str	r7, [sp, #0]

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
    {
      huart->TxXferCount--;
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e16:	2200      	movs	r2, #0
 8002e18:	4633      	mov	r3, r6
 8002e1a:	2180      	movs	r1, #128	; 0x80
 8002e1c:	4620      	mov	r0, r4
 8002e1e:	f7ff ff9d 	bl	8002d5c <UART_WaitOnFlagUntilTimeout>
 8002e22:	b108      	cbz	r0, 8002e28 <HAL_UART_Transmit+0x6a>
      {
        return HAL_TIMEOUT;
 8002e24:	2003      	movs	r0, #3
 8002e26:	e021      	b.n	8002e6c <HAL_UART_Transmit+0xae>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e28:	68a3      	ldr	r3, [r4, #8]
 8002e2a:	6822      	ldr	r2, [r4, #0]
 8002e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e30:	d107      	bne.n	8002e42 <HAL_UART_Transmit+0x84>
 8002e32:	6923      	ldr	r3, [r4, #16]
 8002e34:	b92b      	cbnz	r3, 8002e42 <HAL_UART_Transmit+0x84>
      {
        tmp = (uint16_t*) pData;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8002e36:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3e:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8002e40:	e7de      	b.n	8002e00 <HAL_UART_Transmit+0x42>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8002e42:	782b      	ldrb	r3, [r5, #0]
 8002e44:	8513      	strh	r3, [r2, #40]	; 0x28
 8002e46:	3501      	adds	r5, #1
 8002e48:	e7da      	b.n	8002e00 <HAL_UART_Transmit+0x42>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e4a:	9700      	str	r7, [sp, #0]
 8002e4c:	4633      	mov	r3, r6
 8002e4e:	2140      	movs	r1, #64	; 0x40
 8002e50:	4620      	mov	r0, r4
 8002e52:	f7ff ff83 	bl	8002d5c <UART_WaitOnFlagUntilTimeout>
 8002e56:	2800      	cmp	r0, #0
 8002e58:	d1e4      	bne.n	8002e24 <HAL_UART_Transmit+0x66>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e5a:	2320      	movs	r3, #32
 8002e5c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e60:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 8002e64:	e002      	b.n	8002e6c <HAL_UART_Transmit+0xae>
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0))
    {
      return  HAL_ERROR;
 8002e66:	2001      	movs	r0, #1
 8002e68:	e000      	b.n	8002e6c <HAL_UART_Transmit+0xae>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002e6a:	2002      	movs	r0, #2
  }
}
 8002e6c:	b002      	add	sp, #8
 8002e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002e72 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002e76:	4698      	mov	r8, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8002e78:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002e7c:	2b20      	cmp	r3, #32
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7e:	4604      	mov	r4, r0
 8002e80:	460d      	mov	r5, r1
 8002e82:	4616      	mov	r6, r2
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8002e84:	d15d      	bne.n	8002f42 <HAL_UART_Receive+0xd0>
  {
    if((pData == NULL ) || (Size == 0))
 8002e86:	2900      	cmp	r1, #0
 8002e88:	d059      	beq.n	8002f3e <HAL_UART_Receive+0xcc>
 8002e8a:	2a00      	cmp	r2, #0
 8002e8c:	d057      	beq.n	8002f3e <HAL_UART_Receive+0xcc>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e8e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d055      	beq.n	8002f42 <HAL_UART_Receive+0xd0>
 8002e96:	2301      	movs	r3, #1
 8002e98:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ea0:	2322      	movs	r3, #34	; 0x22
 8002ea2:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002ea6:	f7fe f8af 	bl	8001008 <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002eaa:	68a3      	ldr	r3, [r4, #8]
    huart->RxState = HAL_UART_STATE_BUSY_RX;

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();

    huart->RxXferSize = Size;
 8002eac:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002eb4:	4607      	mov	r7, r0

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;
 8002eb6:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002eba:	d104      	bne.n	8002ec6 <HAL_UART_Receive+0x54>
 8002ebc:	6923      	ldr	r3, [r4, #16]
 8002ebe:	b92b      	cbnz	r3, 8002ecc <HAL_UART_Receive+0x5a>
 8002ec0:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002ec4:	e00d      	b.n	8002ee2 <HAL_UART_Receive+0x70>
 8002ec6:	b92b      	cbnz	r3, 8002ed4 <HAL_UART_Receive+0x62>
 8002ec8:	6923      	ldr	r3, [r4, #16]
 8002eca:	b90b      	cbnz	r3, 8002ed0 <HAL_UART_Receive+0x5e>
 8002ecc:	23ff      	movs	r3, #255	; 0xff
 8002ece:	e008      	b.n	8002ee2 <HAL_UART_Receive+0x70>
 8002ed0:	237f      	movs	r3, #127	; 0x7f
 8002ed2:	e006      	b.n	8002ee2 <HAL_UART_Receive+0x70>
 8002ed4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ed8:	d105      	bne.n	8002ee6 <HAL_UART_Receive+0x74>
 8002eda:	6923      	ldr	r3, [r4, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0f7      	beq.n	8002ed0 <HAL_UART_Receive+0x5e>
 8002ee0:	233f      	movs	r3, #63	; 0x3f
 8002ee2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8002ee6:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0)
 8002eea:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8002eee:	b280      	uxth	r0, r0
 8002ef0:	b1f8      	cbz	r0, 8002f32 <HAL_UART_Receive+0xc0>
    {
      huart->RxXferCount--;
 8002ef2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ef6:	f8cd 8000 	str.w	r8, [sp]
    uhMask = huart->Mask;

    /* as long as data have to be received */
    while(huart->RxXferCount > 0)
    {
      huart->RxXferCount--;
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f02:	2200      	movs	r2, #0
 8002f04:	463b      	mov	r3, r7
 8002f06:	2120      	movs	r1, #32
 8002f08:	4620      	mov	r0, r4
 8002f0a:	f7ff ff27 	bl	8002d5c <UART_WaitOnFlagUntilTimeout>
 8002f0e:	b9d0      	cbnz	r0, 8002f46 <HAL_UART_Receive+0xd4>
      {
        return HAL_TIMEOUT;
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f10:	68a3      	ldr	r3, [r4, #8]
 8002f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	d106      	bne.n	8002f28 <HAL_UART_Receive+0xb6>
 8002f1a:	6922      	ldr	r2, [r4, #16]
 8002f1c:	b922      	cbnz	r2, 8002f28 <HAL_UART_Receive+0xb6>
      {
        tmp = (uint16_t*) pData ;
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002f1e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002f20:	4033      	ands	r3, r6
 8002f22:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2;
 8002f26:	e7e0      	b.n	8002eea <HAL_UART_Receive+0x78>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002f28:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002f2a:	4033      	ands	r3, r6
 8002f2c:	702b      	strb	r3, [r5, #0]
 8002f2e:	3501      	adds	r5, #1
 8002f30:	e7db      	b.n	8002eea <HAL_UART_Receive+0x78>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f32:	2320      	movs	r3, #32
 8002f34:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f38:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 8002f3c:	e004      	b.n	8002f48 <HAL_UART_Receive+0xd6>
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0))
    {
      return  HAL_ERROR;
 8002f3e:	2001      	movs	r0, #1
 8002f40:	e002      	b.n	8002f48 <HAL_UART_Receive+0xd6>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002f42:	2002      	movs	r0, #2
 8002f44:	e000      	b.n	8002f48 <HAL_UART_Receive+0xd6>
    while(huart->RxXferCount > 0)
    {
      huart->RxXferCount--;
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
      {
        return HAL_TIMEOUT;
 8002f46:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002f48:	b002      	add	sp, #8
 8002f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002f4e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f50:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f52:	2600      	movs	r6, #0
 8002f54:	66c6      	str	r6, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002f56:	f7fe f857 	bl	8001008 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	071a      	lsls	r2, r3, #28

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002f60:	4605      	mov	r5, r0

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f62:	d404      	bmi.n	8002f6e <UART_CheckIdleState+0x20>
      /* Timeout occurred */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	075b      	lsls	r3, r3, #29
 8002f6a:	d51a      	bpl.n	8002fa2 <UART_CheckIdleState+0x54>
 8002f6c:	e00d      	b.n	8002f8a <UART_CheckIdleState+0x3c>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	4632      	mov	r2, r6
 8002f76:	4603      	mov	r3, r0
 8002f78:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	f7ff feed 	bl	8002d5c <UART_WaitOnFlagUntilTimeout>
 8002f82:	2800      	cmp	r0, #0
 8002f84:	d0ee      	beq.n	8002f64 <UART_CheckIdleState+0x16>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f86:	2003      	movs	r0, #3
 8002f88:	e013      	b.n	8002fb2 <UART_CheckIdleState+0x64>
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	2200      	movs	r2, #0
 8002f92:	462b      	mov	r3, r5
 8002f94:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f98:	4620      	mov	r0, r4
 8002f9a:	f7ff fedf 	bl	8002d5c <UART_WaitOnFlagUntilTimeout>
 8002f9e:	2800      	cmp	r0, #0
 8002fa0:	d1f1      	bne.n	8002f86 <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002fa2:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fa4:	2000      	movs	r0, #0
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002fa6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002faa:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 8002fae:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
}
 8002fb2:	b002      	add	sp, #8
 8002fb4:	bd70      	pop	{r4, r5, r6, pc}

08002fb6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fb6:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002fb8:	4604      	mov	r4, r0
 8002fba:	b360      	cbz	r0, 8003016 <HAL_UART_Init+0x60>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002fbc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002fc0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002fc4:	b91b      	cbnz	r3, 8002fce <HAL_UART_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fc6:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fca:	f000 fcc1 	bl	8003950 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002fce:	6822      	ldr	r2, [r4, #0]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fd0:	2324      	movs	r3, #36	; 0x24
 8002fd2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002fd6:	6813      	ldr	r3, [r2, #0]
 8002fd8:	f023 0301 	bic.w	r3, r3, #1
 8002fdc:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fde:	4620      	mov	r0, r4
 8002fe0:	f7ff fd4e 	bl	8002a80 <UART_SetConfig>
 8002fe4:	2801      	cmp	r0, #1
 8002fe6:	d016      	beq.n	8003016 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fea:	b113      	cbz	r3, 8002ff2 <HAL_UART_Init+0x3c>
  {
    UART_AdvFeatureConfig(huart);
 8002fec:	4620      	mov	r0, r4
 8002fee:	f7ff fe61 	bl	8002cb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ff2:	6823      	ldr	r3, [r4, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ffa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003002:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800300a:	4620      	mov	r0, r4
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800300c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 800300e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003012:	f7ff bf9c 	b.w	8002f4e <UART_CheckIdleState>
}
 8003016:	2001      	movs	r0, #1
 8003018:	bd10      	pop	{r4, pc}

0800301a <GPIO_SetBits>:
void HD44780_GotoXY(unsigned char x, unsigned char y);
void HD44780_PutStr(char *str);
void HD44780_ClrScr(void);

void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 800301a:	2201      	movs	r2, #1
 800301c:	f7fe bc28 	b.w	8001870 <HAL_GPIO_WritePin>

08003020 <GPIO_ResetBits>:
}

void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8003020:	2200      	movs	r2, #0
 8003022:	f7fe bc25 	b.w	8001870 <HAL_GPIO_WritePin>
	...

08003028 <hd44780_wr_hi_nibble>:
}

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
 8003028:	b510      	push	{r4, lr}
 800302a:	4604      	mov	r4, r0
	if (data & 0x10) {
 800302c:	06e2      	lsls	r2, r4, #27
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 800302e:	f04f 0110 	mov.w	r1, #16
 8003032:	481a      	ldr	r0, [pc, #104]	; (800309c <hd44780_wr_hi_nibble+0x74>)
}

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
	if (data & 0x10) {
 8003034:	d502      	bpl.n	800303c <hd44780_wr_hi_nibble+0x14>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8003036:	f7ff fff0 	bl	800301a <GPIO_SetBits>
 800303a:	e001      	b.n	8003040 <hd44780_wr_hi_nibble+0x18>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 800303c:	f7ff fff0 	bl	8003020 <GPIO_ResetBits>
	}
	if (data & 0x20) {
 8003040:	06a3      	lsls	r3, r4, #26
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8003042:	f04f 0120 	mov.w	r1, #32
 8003046:	4815      	ldr	r0, [pc, #84]	; (800309c <hd44780_wr_hi_nibble+0x74>)
	if (data & 0x10) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	}
	if (data & 0x20) {
 8003048:	d502      	bpl.n	8003050 <hd44780_wr_hi_nibble+0x28>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 800304a:	f7ff ffe6 	bl	800301a <GPIO_SetBits>
 800304e:	e001      	b.n	8003054 <hd44780_wr_hi_nibble+0x2c>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8003050:	f7ff ffe6 	bl	8003020 <GPIO_ResetBits>
	}
	if (data & 0x40) {
 8003054:	0662      	lsls	r2, r4, #25
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8003056:	f04f 0140 	mov.w	r1, #64	; 0x40
 800305a:	4810      	ldr	r0, [pc, #64]	; (800309c <hd44780_wr_hi_nibble+0x74>)
	if (data & 0x20) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	}
	if (data & 0x40) {
 800305c:	d502      	bpl.n	8003064 <hd44780_wr_hi_nibble+0x3c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 800305e:	f7ff ffdc 	bl	800301a <GPIO_SetBits>
 8003062:	e001      	b.n	8003068 <hd44780_wr_hi_nibble+0x40>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8003064:	f7ff ffdc 	bl	8003020 <GPIO_ResetBits>
	}
	if (data & 0x80) {
 8003068:	0623      	lsls	r3, r4, #24
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 800306a:	f04f 0180 	mov.w	r1, #128	; 0x80
 800306e:	480b      	ldr	r0, [pc, #44]	; (800309c <hd44780_wr_hi_nibble+0x74>)
	if (data & 0x40) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	}
	if (data & 0x80) {
 8003070:	d502      	bpl.n	8003078 <hd44780_wr_hi_nibble+0x50>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8003072:	f7ff ffd2 	bl	800301a <GPIO_SetBits>
 8003076:	e001      	b.n	800307c <hd44780_wr_hi_nibble+0x54>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8003078:	f7ff ffd2 	bl	8003020 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 800307c:	2201      	movs	r2, #1
 800307e:	2102      	movs	r1, #2
 8003080:	4806      	ldr	r0, [pc, #24]	; (800309c <hd44780_wr_hi_nibble+0x74>)
 8003082:	f7fe fbf5 	bl	8001870 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 8003086:	2002      	movs	r0, #2
 8003088:	f7fd ffc4 	bl	8001014 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 800308c:	2200      	movs	r2, #0
 800308e:	2102      	movs	r1, #2
 8003090:	4802      	ldr	r0, [pc, #8]	; (800309c <hd44780_wr_hi_nibble+0x74>)
}
 8003092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	/* wait */
	hd44780_EN_high_delay()
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8003096:	f7fe bbeb 	b.w	8001870 <HAL_GPIO_WritePin>
 800309a:	bf00      	nop
 800309c:	48000400 	.word	0x48000400

080030a0 <hd44780_wr_lo_nibble>:
}

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
 80030a0:	b510      	push	{r4, lr}
 80030a2:	4604      	mov	r4, r0
	if (data & 0x01) {
 80030a4:	07e2      	lsls	r2, r4, #31
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 80030a6:	f04f 0110 	mov.w	r1, #16
 80030aa:	481a      	ldr	r0, [pc, #104]	; (8003114 <hd44780_wr_lo_nibble+0x74>)
}

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
	if (data & 0x01) {
 80030ac:	d502      	bpl.n	80030b4 <hd44780_wr_lo_nibble+0x14>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 80030ae:	f7ff ffb4 	bl	800301a <GPIO_SetBits>
 80030b2:	e001      	b.n	80030b8 <hd44780_wr_lo_nibble+0x18>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 80030b4:	f7ff ffb4 	bl	8003020 <GPIO_ResetBits>
	}
	if (data & 0x02) {
 80030b8:	07a3      	lsls	r3, r4, #30
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80030ba:	f04f 0120 	mov.w	r1, #32
 80030be:	4815      	ldr	r0, [pc, #84]	; (8003114 <hd44780_wr_lo_nibble+0x74>)
	if (data & 0x01) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	}
	if (data & 0x02) {
 80030c0:	d502      	bpl.n	80030c8 <hd44780_wr_lo_nibble+0x28>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80030c2:	f7ff ffaa 	bl	800301a <GPIO_SetBits>
 80030c6:	e001      	b.n	80030cc <hd44780_wr_lo_nibble+0x2c>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80030c8:	f7ff ffaa 	bl	8003020 <GPIO_ResetBits>
	}
	if (data & 0x04) {
 80030cc:	0762      	lsls	r2, r4, #29
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80030ce:	f04f 0140 	mov.w	r1, #64	; 0x40
 80030d2:	4810      	ldr	r0, [pc, #64]	; (8003114 <hd44780_wr_lo_nibble+0x74>)
	if (data & 0x02) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	}
	if (data & 0x04) {
 80030d4:	d502      	bpl.n	80030dc <hd44780_wr_lo_nibble+0x3c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80030d6:	f7ff ffa0 	bl	800301a <GPIO_SetBits>
 80030da:	e001      	b.n	80030e0 <hd44780_wr_lo_nibble+0x40>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80030dc:	f7ff ffa0 	bl	8003020 <GPIO_ResetBits>
	}
	if (data & 0x08) {
 80030e0:	0723      	lsls	r3, r4, #28
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80030e2:	f04f 0180 	mov.w	r1, #128	; 0x80
 80030e6:	480b      	ldr	r0, [pc, #44]	; (8003114 <hd44780_wr_lo_nibble+0x74>)
	if (data & 0x04) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	}
	if (data & 0x08) {
 80030e8:	d502      	bpl.n	80030f0 <hd44780_wr_lo_nibble+0x50>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80030ea:	f7ff ff96 	bl	800301a <GPIO_SetBits>
 80030ee:	e001      	b.n	80030f4 <hd44780_wr_lo_nibble+0x54>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80030f0:	f7ff ff96 	bl	8003020 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 80030f4:	2201      	movs	r2, #1
 80030f6:	2102      	movs	r1, #2
 80030f8:	4806      	ldr	r0, [pc, #24]	; (8003114 <hd44780_wr_lo_nibble+0x74>)
 80030fa:	f7fe fbb9 	bl	8001870 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 80030fe:	2002      	movs	r0, #2
 8003100:	f7fd ff88 	bl	8001014 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8003104:	2200      	movs	r2, #0
 8003106:	2102      	movs	r1, #2
 8003108:	4802      	ldr	r0, [pc, #8]	; (8003114 <hd44780_wr_lo_nibble+0x74>)
}
 800310a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	/* wait */
	hd44780_EN_high_delay()
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 800310e:	f7fe bbaf 	b.w	8001870 <HAL_GPIO_WritePin>
 8003112:	bf00      	nop
 8003114:	48000400 	.word	0x48000400

08003118 <hd44780_write>:
}

/* 4bit bus version */
void hd44780_write(unsigned char data) {
 8003118:	b510      	push	{r4, lr}
 800311a:	4604      	mov	r4, r0
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
 800311c:	f7ff ff84 	bl	8003028 <hd44780_wr_hi_nibble>
	hd44780_wr_lo_nibble(data);
 8003120:	4620      	mov	r0, r4
}
 8003122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/* 4bit bus version */
void hd44780_write(unsigned char data) {
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
	hd44780_wr_lo_nibble(data);
 8003126:	f7ff bfbb 	b.w	80030a0 <hd44780_wr_lo_nibble>
	...

0800312c <hd44780_wr_cmd>:
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 800312c:	b510      	push	{r4, lr}
	hd44780_RS_Off();
 800312e:	2200      	movs	r2, #0
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 8003130:	4604      	mov	r4, r0
	hd44780_RS_Off();
 8003132:	2101      	movs	r1, #1
 8003134:	4803      	ldr	r0, [pc, #12]	; (8003144 <hd44780_wr_cmd+0x18>)
 8003136:	f7fe fb9b 	bl	8001870 <HAL_GPIO_WritePin>
	hd44780_write(cmd);
 800313a:	4620      	mov	r0, r4
}
 800313c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
	hd44780_RS_Off();
	hd44780_write(cmd);
 8003140:	f7ff bfea 	b.w	8003118 <hd44780_write>
 8003144:	48000400 	.word	0x48000400

08003148 <hd44780_wr_data>:
}

void hd44780_wr_data(unsigned char data) {
 8003148:	b510      	push	{r4, lr}
	hd44780_RS_On();
 800314a:	2201      	movs	r2, #1
void hd44780_wr_cmd(unsigned char cmd) {
	hd44780_RS_Off();
	hd44780_write(cmd);
}

void hd44780_wr_data(unsigned char data) {
 800314c:	4604      	mov	r4, r0
	hd44780_RS_On();
 800314e:	4611      	mov	r1, r2
 8003150:	4803      	ldr	r0, [pc, #12]	; (8003160 <hd44780_wr_data+0x18>)
 8003152:	f7fe fb8d 	bl	8001870 <HAL_GPIO_WritePin>
	hd44780_write(data);
 8003156:	4620      	mov	r0, r4
}
 8003158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hd44780_write(cmd);
}

void hd44780_wr_data(unsigned char data) {
	hd44780_RS_On();
	hd44780_write(data);
 800315c:	f7ff bfdc 	b.w	8003118 <hd44780_write>
 8003160:	48000400 	.word	0x48000400

08003164 <HD44780_Init>:
void HD44780_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 8003164:	4b29      	ldr	r3, [pc, #164]	; (800320c <HD44780_Init+0xa8>)
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 8003166:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 8003168:	6cda      	ldr	r2, [r3, #76]	; 0x4c
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 800316a:	4d29      	ldr	r5, [pc, #164]	; (8003210 <HD44780_Init+0xac>)
void HD44780_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 800316c:	f042 0202 	orr.w	r2, r2, #2
 8003170:	64da      	str	r2, [r3, #76]	; 0x4c
 8003172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 8003174:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	9300      	str	r3, [sp, #0]
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800317c:	2401      	movs	r4, #1
void HD44780_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 800317e:	9b00      	ldr	r3, [sp, #0]
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8003180:	9402      	str	r4, [sp, #8]
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 8003182:	23f0      	movs	r3, #240	; 0xf0
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8003184:	2603      	movs	r6, #3

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8003186:	a901      	add	r1, sp, #4
 8003188:	4628      	mov	r0, r5
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 800318a:	9301      	str	r3, [sp, #4]
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 800318c:	9403      	str	r4, [sp, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800318e:	9604      	str	r6, [sp, #16]

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8003190:	f7fe fab2 	bl	80016f8 <HAL_GPIO_Init>

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	/* removed HD44780_RW_BIT from this declaration as we don't use
	 * R/~W on the LCD is grounded.
	 */
	GPIO_InitStructure.Pin = HD44780_RS_BIT |HD44780_RW_BIT| HD44780_EN_BIT;
 8003194:	230b      	movs	r3, #11
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 8003196:	a901      	add	r1, sp, #4
 8003198:	4628      	mov	r0, r5

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	/* removed HD44780_RW_BIT from this declaration as we don't use
	 * R/~W on the LCD is grounded.
	 */
	GPIO_InitStructure.Pin = HD44780_RS_BIT |HD44780_RW_BIT| HD44780_EN_BIT;
 800319a:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800319c:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 800319e:	9403      	str	r4, [sp, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80031a0:	9604      	str	r6, [sp, #16]

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 80031a2:	f7fe faa9 	bl	80016f8 <HAL_GPIO_Init>

	/* clear control bits */
	hd44780_EN_Off();
 80031a6:	4628      	mov	r0, r5
 80031a8:	2200      	movs	r2, #0
 80031aa:	2102      	movs	r1, #2
 80031ac:	f7fe fb60 	bl	8001870 <HAL_GPIO_WritePin>
	hd44780_RS_Off();
 80031b0:	4621      	mov	r1, r4
 80031b2:	4628      	mov	r0, r5
 80031b4:	2200      	movs	r2, #0
 80031b6:	f7fe fb5b 	bl	8001870 <HAL_GPIO_WritePin>
	hd44780_RW_Off();
 80031ba:	2200      	movs	r2, #0
 80031bc:	2108      	movs	r1, #8
 80031be:	4628      	mov	r0, r5
 80031c0:	f7fe fb56 	bl	8001870 <HAL_GPIO_WritePin>

	/* wait initial delay for LCD to settle */
	//HAL_Delay(100);		//added as nothing here and spec'd as 100ms after power-on. R. Hofer
	/* reset procedure - 3 function calls resets the device */
	hd44780_init_delay();
 80031c4:	2010      	movs	r0, #16
 80031c6:	f7fd ff25 	bl	8001014 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80031ca:	2030      	movs	r0, #48	; 0x30
 80031cc:	f7ff ff2c 	bl	8003028 <hd44780_wr_hi_nibble>
	hd44780_init_delay2();
 80031d0:	2005      	movs	r0, #5
 80031d2:	f7fd ff1f 	bl	8001014 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80031d6:	2030      	movs	r0, #48	; 0x30
 80031d8:	f7ff ff26 	bl	8003028 <hd44780_wr_hi_nibble>
	hd44780_init_delay3();
 80031dc:	4620      	mov	r0, r4
 80031de:	f7fd ff19 	bl	8001014 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80031e2:	2030      	movs	r0, #48	; 0x30
 80031e4:	f7ff ff20 	bl	8003028 <hd44780_wr_hi_nibble>

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT
	/* 4bit interface */
	hd44780_wr_hi_nibble( HD44780_CMD_FUNCTION);
 80031e8:	2020      	movs	r0, #32
 80031ea:	f7ff ff1d 	bl	8003028 <hd44780_wr_hi_nibble>
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT */

	/* sets the configured values - can be set again only after reset */
	hd44780_function(HD44780_CONF_BUS, HD44780_CONF_LINES, HD44780_CONF_FONT);
 80031ee:	2028      	movs	r0, #40	; 0x28
 80031f0:	f7ff ff9c 	bl	800312c <hd44780_wr_cmd>

	/* turn the display on with no cursor or blinking */
	hd44780_display(HD44780_DISP_ON, HD44780_DISP_CURS_OFF,
 80031f4:	200c      	movs	r0, #12
 80031f6:	f7ff ff99 	bl	800312c <hd44780_wr_cmd>
			HD44780_DISP_BLINK_OFF);

	/* clear the display */
	hd44780_clear();
 80031fa:	4620      	mov	r0, r4
 80031fc:	f7ff ff96 	bl	800312c <hd44780_wr_cmd>

	/* addr increment, shift cursor */
	hd44780_entry(HD44780_ENTRY_ADDR_INC, HD44780_ENTRY_SHIFT_CURS);
 8003200:	2006      	movs	r0, #6
 8003202:	f7ff ff93 	bl	800312c <hd44780_wr_cmd>

}
 8003206:	b006      	add	sp, #24
 8003208:	bd70      	pop	{r4, r5, r6, pc}
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000
 8003210:	48000400 	.word	0x48000400

08003214 <HD44780_GotoXY>:

	if (x > (HD44780_DISP_LENGTH - 1))
		x = 0;

	if (y > (HD44780_DISP_ROWS - 1))
		y = 0;
 8003214:	2901      	cmp	r1, #1
 8003216:	bf88      	it	hi
 8003218:	2100      	movhi	r1, #0
 800321a:	4b04      	ldr	r3, [pc, #16]	; (800322c <HD44780_GotoXY+0x18>)
		break;
	case 3:
		copy_y = 0xd4;
		break;
	}
	hd44780_wr_cmd(x + copy_y);
 800321c:	5c5b      	ldrb	r3, [r3, r1]
 *********************************************************************************************/
void HD44780_GotoXY(unsigned char x, unsigned char y) {
	unsigned char copy_y = 0;

	if (x > (HD44780_DISP_LENGTH - 1))
		x = 0;
 800321e:	280f      	cmp	r0, #15
 8003220:	bf88      	it	hi
 8003222:	2000      	movhi	r0, #0
		break;
	case 3:
		copy_y = 0xd4;
		break;
	}
	hd44780_wr_cmd(x + copy_y);
 8003224:	4418      	add	r0, r3
 8003226:	b2c0      	uxtb	r0, r0
 8003228:	f7ff bf80 	b.w	800312c <hd44780_wr_cmd>
 800322c:	08009e31 	.word	0x08009e31

08003230 <HD44780_PutStr>:

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 8003230:	b513      	push	{r0, r1, r4, lr}
	__IO unsigned int i = 0;
 8003232:	2300      	movs	r3, #0

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 8003234:	4604      	mov	r4, r0
	__IO unsigned int i = 0;
 8003236:	9301      	str	r3, [sp, #4]

	do {
		HD44780_PutChar(str[i]);
 8003238:	9b01      	ldr	r3, [sp, #4]
 Parameters			: c				-	character to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutChar(unsigned char c) {
	hd44780_wr_data(c & 0xff);
 800323a:	5ce0      	ldrb	r0, [r4, r3]
 800323c:	f7ff ff84 	bl	8003148 <hd44780_wr_data>
void HD44780_PutStr(char *str) {
	__IO unsigned int i = 0;

	do {
		HD44780_PutChar(str[i]);
		i++;
 8003240:	9b01      	ldr	r3, [sp, #4]
 8003242:	3301      	adds	r3, #1
 8003244:	9301      	str	r3, [sp, #4]
	} while (str[i] != '\0');
 8003246:	9b01      	ldr	r3, [sp, #4]
 8003248:	5ce3      	ldrb	r3, [r4, r3]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f4      	bne.n	8003238 <HD44780_PutStr+0x8>
}
 800324e:	b002      	add	sp, #8
 8003250:	bd10      	pop	{r4, pc}

08003252 <HD44780_ClrScr>:

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_ClrScr(void) {
	hd44780_wr_cmd(HD44780_CMD_CLEAR);
 8003252:	2001      	movs	r0, #1
 8003254:	f7ff bf6a 	b.w	800312c <hd44780_wr_cmd>

08003258 <subString>:
 *  FIRST VERSION : 2017-04-04
 *  DESCRIPTION   :
 ******************************************************************************/
#include "gps_parser.h"

const char* subString(const char* in_str, int8_t offset, int8_t len) {
 8003258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325a:	460d      	mov	r5, r1
 800325c:	4616      	mov	r6, r2
 800325e:	4607      	mov	r7, r0
    int8_t instr_length = strlen(in_str);
 8003260:	f7fc ffc0 	bl	80001e4 <strlen>
    if (offset + len > instr_length) {
 8003264:	19ab      	adds	r3, r5, r6
 8003266:	b240      	sxtb	r0, r0
 8003268:	4283      	cmp	r3, r0
 800326a:	dc09      	bgt.n	8003280 <subString+0x28>
        return NULL;
    }
    char *outstr = malloc((sizeof(in_str)+1));
 800326c:	2005      	movs	r0, #5
 800326e:	f000 fc85 	bl	8003b7c <malloc>
    strncpy(outstr, in_str + offset, len);
 8003272:	4632      	mov	r2, r6
const char* subString(const char* in_str, int8_t offset, int8_t len) {
    int8_t instr_length = strlen(in_str);
    if (offset + len > instr_length) {
        return NULL;
    }
    char *outstr = malloc((sizeof(in_str)+1));
 8003274:	4604      	mov	r4, r0
    strncpy(outstr, in_str + offset, len);
 8003276:	1979      	adds	r1, r7, r5
 8003278:	f000 ff68 	bl	800414c <strncpy>
    strcat(outstr, "\0");
    return outstr;
 800327c:	4620      	mov	r0, r4
 800327e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#include "gps_parser.h"

const char* subString(const char* in_str, int8_t offset, int8_t len) {
    int8_t instr_length = strlen(in_str);
    if (offset + len > instr_length) {
        return NULL;
 8003280:	2000      	movs	r0, #0
    }
    char *outstr = malloc((sizeof(in_str)+1));
    strncpy(outstr, in_str + offset, len);
    strcat(outstr, "\0");
    return outstr;
}
 8003282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003284 <truncateStr>:

int32_t truncateStr(char instr[], char *outstr[], const char delimeter) {
 8003284:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003286:	ad02      	add	r5, sp, #8
 8003288:	460e      	mov	r6, r1
 800328a:	f805 2d01 	strb.w	r2, [r5, #-1]!
    char *tempBuff;
    int32_t numberOfRawsOutArray = 0;
    tempBuff = strtok(instr, &delimeter);
 800328e:	4629      	mov	r1, r5
 8003290:	f001 fd96 	bl	8004dc0 <strtok>
    return outstr;
}

int32_t truncateStr(char instr[], char *outstr[], const char delimeter) {
    char *tempBuff;
    int32_t numberOfRawsOutArray = 0;
 8003294:	2400      	movs	r4, #0
    tempBuff = strtok(instr, &delimeter);
    while (tempBuff != NULL) {
 8003296:	b150      	cbz	r0, 80032ae <truncateStr+0x2a>
        strcpy(outstr[numberOfRawsOutArray], tempBuff);//(outstr[numberOfRawsOutArray], tempBuff);
 8003298:	4601      	mov	r1, r0
 800329a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800329e:	f000 ff4d 	bl	800413c <strcpy>
        strcat(outstr[numberOfRawsOutArray], "\0");
        numberOfRawsOutArray++;
        tempBuff = strtok(NULL, &delimeter);
 80032a2:	4629      	mov	r1, r5
 80032a4:	2000      	movs	r0, #0
    int32_t numberOfRawsOutArray = 0;
    tempBuff = strtok(instr, &delimeter);
    while (tempBuff != NULL) {
        strcpy(outstr[numberOfRawsOutArray], tempBuff);//(outstr[numberOfRawsOutArray], tempBuff);
        strcat(outstr[numberOfRawsOutArray], "\0");
        numberOfRawsOutArray++;
 80032a6:	3401      	adds	r4, #1
        tempBuff = strtok(NULL, &delimeter);
 80032a8:	f001 fd8a 	bl	8004dc0 <strtok>
 80032ac:	e7f3      	b.n	8003296 <truncateStr+0x12>
    }
    return numberOfRawsOutArray;
}
 80032ae:	4620      	mov	r0, r4
 80032b0:	b002      	add	sp, #8
 80032b2:	bd70      	pop	{r4, r5, r6, pc}

080032b4 <parseGPGGA>:

GPGGA_Message parseGPGGA(char* inStrMessage[], int32_t numb_of_raws){
 80032b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032b8:	ed2d 8b08 	vpush	{d8-d11}
 80032bc:	460d      	mov	r5, r1
 80032be:	b089      	sub	sp, #36	; 0x24
 80032c0:	4604      	mov	r4, r0
	GPGGA_Message gpggam_data;
    gpggam_data.utc_time[0] = atoi(subString(inStrMessage[1],0,2));
 80032c2:	2202      	movs	r2, #2
 80032c4:	2100      	movs	r1, #0
 80032c6:	6868      	ldr	r0, [r5, #4]
 80032c8:	f7ff ffc6 	bl	8003258 <subString>
 80032cc:	f000 fc2c 	bl	8003b28 <atoi>
    gpggam_data.utc_time[1] = atoi(subString(inStrMessage[1],2,2));
 80032d0:	2202      	movs	r2, #2
 80032d2:	4611      	mov	r1, r2
    return numberOfRawsOutArray;
}

GPGGA_Message parseGPGGA(char* inStrMessage[], int32_t numb_of_raws){
	GPGGA_Message gpggam_data;
    gpggam_data.utc_time[0] = atoi(subString(inStrMessage[1],0,2));
 80032d4:	9005      	str	r0, [sp, #20]
    gpggam_data.utc_time[1] = atoi(subString(inStrMessage[1],2,2));
 80032d6:	6868      	ldr	r0, [r5, #4]
 80032d8:	f7ff ffbe 	bl	8003258 <subString>
 80032dc:	f000 fc24 	bl	8003b28 <atoi>
    gpggam_data.utc_time[2] = atoi(subString(inStrMessage[1],4,2));
 80032e0:	2202      	movs	r2, #2
}

GPGGA_Message parseGPGGA(char* inStrMessage[], int32_t numb_of_raws){
	GPGGA_Message gpggam_data;
    gpggam_data.utc_time[0] = atoi(subString(inStrMessage[1],0,2));
    gpggam_data.utc_time[1] = atoi(subString(inStrMessage[1],2,2));
 80032e2:	4683      	mov	fp, r0
    gpggam_data.utc_time[2] = atoi(subString(inStrMessage[1],4,2));
 80032e4:	2104      	movs	r1, #4
 80032e6:	6868      	ldr	r0, [r5, #4]
 80032e8:	f7ff ffb6 	bl	8003258 <subString>
 80032ec:	f000 fc1c 	bl	8003b28 <atoi>

    gpggam_data.latitude = atof(subString(inStrMessage[2],0,8));
 80032f0:	2208      	movs	r2, #8

GPGGA_Message parseGPGGA(char* inStrMessage[], int32_t numb_of_raws){
	GPGGA_Message gpggam_data;
    gpggam_data.utc_time[0] = atoi(subString(inStrMessage[1],0,2));
    gpggam_data.utc_time[1] = atoi(subString(inStrMessage[1],2,2));
    gpggam_data.utc_time[2] = atoi(subString(inStrMessage[1],4,2));
 80032f2:	4682      	mov	sl, r0

    gpggam_data.latitude = atof(subString(inStrMessage[2],0,8));
 80032f4:	2100      	movs	r1, #0
 80032f6:	68a8      	ldr	r0, [r5, #8]
 80032f8:	f7ff ffae 	bl	8003258 <subString>
 80032fc:	f000 fc11 	bl	8003b22 <atof>
    gpggam_data.lat_direction = *subString(inStrMessage[3],0,1);
 8003300:	2201      	movs	r2, #1
 8003302:	2100      	movs	r1, #0
 8003304:	68e8      	ldr	r0, [r5, #12]
	GPGGA_Message gpggam_data;
    gpggam_data.utc_time[0] = atoi(subString(inStrMessage[1],0,2));
    gpggam_data.utc_time[1] = atoi(subString(inStrMessage[1],2,2));
    gpggam_data.utc_time[2] = atoi(subString(inStrMessage[1],4,2));

    gpggam_data.latitude = atof(subString(inStrMessage[2],0,8));
 8003306:	eeb0 ba40 	vmov.f32	s22, s0
 800330a:	eef0 ba60 	vmov.f32	s23, s1
    gpggam_data.lat_direction = *subString(inStrMessage[3],0,1);
 800330e:	f7ff ffa3 	bl	8003258 <subString>
    gpggam_data.longitude = atof(subString(inStrMessage[4],0,8));
 8003312:	2208      	movs	r2, #8
    gpggam_data.utc_time[0] = atoi(subString(inStrMessage[1],0,2));
    gpggam_data.utc_time[1] = atoi(subString(inStrMessage[1],2,2));
    gpggam_data.utc_time[2] = atoi(subString(inStrMessage[1],4,2));

    gpggam_data.latitude = atof(subString(inStrMessage[2],0,8));
    gpggam_data.lat_direction = *subString(inStrMessage[3],0,1);
 8003314:	7803      	ldrb	r3, [r0, #0]
    gpggam_data.longitude = atof(subString(inStrMessage[4],0,8));
 8003316:	6928      	ldr	r0, [r5, #16]
    gpggam_data.utc_time[0] = atoi(subString(inStrMessage[1],0,2));
    gpggam_data.utc_time[1] = atoi(subString(inStrMessage[1],2,2));
    gpggam_data.utc_time[2] = atoi(subString(inStrMessage[1],4,2));

    gpggam_data.latitude = atof(subString(inStrMessage[2],0,8));
    gpggam_data.lat_direction = *subString(inStrMessage[3],0,1);
 8003318:	9301      	str	r3, [sp, #4]
    gpggam_data.longitude = atof(subString(inStrMessage[4],0,8));
 800331a:	2100      	movs	r1, #0
 800331c:	f7ff ff9c 	bl	8003258 <subString>
 8003320:	f000 fbff 	bl	8003b22 <atof>
    gpggam_data.lon_direction = *subString(inStrMessage[5],0,1);
 8003324:	2201      	movs	r2, #1
 8003326:	2100      	movs	r1, #0
 8003328:	6968      	ldr	r0, [r5, #20]
    gpggam_data.utc_time[1] = atoi(subString(inStrMessage[1],2,2));
    gpggam_data.utc_time[2] = atoi(subString(inStrMessage[1],4,2));

    gpggam_data.latitude = atof(subString(inStrMessage[2],0,8));
    gpggam_data.lat_direction = *subString(inStrMessage[3],0,1);
    gpggam_data.longitude = atof(subString(inStrMessage[4],0,8));
 800332a:	eeb0 aa40 	vmov.f32	s20, s0
 800332e:	eef0 aa60 	vmov.f32	s21, s1
    gpggam_data.lon_direction = *subString(inStrMessage[5],0,1);
 8003332:	f7ff ff91 	bl	8003258 <subString>
    gpggam_data.fix_quality = atoi(subString(inStrMessage[6],0,1));
 8003336:	2201      	movs	r2, #1
    gpggam_data.utc_time[2] = atoi(subString(inStrMessage[1],4,2));

    gpggam_data.latitude = atof(subString(inStrMessage[2],0,8));
    gpggam_data.lat_direction = *subString(inStrMessage[3],0,1);
    gpggam_data.longitude = atof(subString(inStrMessage[4],0,8));
    gpggam_data.lon_direction = *subString(inStrMessage[5],0,1);
 8003338:	7803      	ldrb	r3, [r0, #0]
    gpggam_data.fix_quality = atoi(subString(inStrMessage[6],0,1));
 800333a:	69a8      	ldr	r0, [r5, #24]
    gpggam_data.utc_time[2] = atoi(subString(inStrMessage[1],4,2));

    gpggam_data.latitude = atof(subString(inStrMessage[2],0,8));
    gpggam_data.lat_direction = *subString(inStrMessage[3],0,1);
    gpggam_data.longitude = atof(subString(inStrMessage[4],0,8));
    gpggam_data.lon_direction = *subString(inStrMessage[5],0,1);
 800333c:	9304      	str	r3, [sp, #16]
    gpggam_data.fix_quality = atoi(subString(inStrMessage[6],0,1));
 800333e:	2100      	movs	r1, #0
 8003340:	f7ff ff8a 	bl	8003258 <subString>
 8003344:	f000 fbf0 	bl	8003b28 <atoi>
    gpggam_data.num_sattelites = atoi(subString(inStrMessage[7],0,2));
 8003348:	2202      	movs	r2, #2

    gpggam_data.latitude = atof(subString(inStrMessage[2],0,8));
    gpggam_data.lat_direction = *subString(inStrMessage[3],0,1);
    gpggam_data.longitude = atof(subString(inStrMessage[4],0,8));
    gpggam_data.lon_direction = *subString(inStrMessage[5],0,1);
    gpggam_data.fix_quality = atoi(subString(inStrMessage[6],0,1));
 800334a:	4681      	mov	r9, r0
    gpggam_data.num_sattelites = atoi(subString(inStrMessage[7],0,2));
 800334c:	2100      	movs	r1, #0
 800334e:	69e8      	ldr	r0, [r5, #28]
 8003350:	f7ff ff82 	bl	8003258 <subString>
 8003354:	f000 fbe8 	bl	8003b28 <atoi>
    gpggam_data.h_duration = atof(subString(inStrMessage[8],0,3));
 8003358:	2203      	movs	r2, #3
    gpggam_data.latitude = atof(subString(inStrMessage[2],0,8));
    gpggam_data.lat_direction = *subString(inStrMessage[3],0,1);
    gpggam_data.longitude = atof(subString(inStrMessage[4],0,8));
    gpggam_data.lon_direction = *subString(inStrMessage[5],0,1);
    gpggam_data.fix_quality = atoi(subString(inStrMessage[6],0,1));
    gpggam_data.num_sattelites = atoi(subString(inStrMessage[7],0,2));
 800335a:	4680      	mov	r8, r0
    gpggam_data.h_duration = atof(subString(inStrMessage[8],0,3));
 800335c:	2100      	movs	r1, #0
 800335e:	6a28      	ldr	r0, [r5, #32]
 8003360:	f7ff ff7a 	bl	8003258 <subString>
 8003364:	f000 fbdd 	bl	8003b22 <atof>
    gpggam_data.altitude = atof(subString(inStrMessage[9],0,5));
 8003368:	2205      	movs	r2, #5
 800336a:	2100      	movs	r1, #0
 800336c:	6a68      	ldr	r0, [r5, #36]	; 0x24
    gpggam_data.lat_direction = *subString(inStrMessage[3],0,1);
    gpggam_data.longitude = atof(subString(inStrMessage[4],0,8));
    gpggam_data.lon_direction = *subString(inStrMessage[5],0,1);
    gpggam_data.fix_quality = atoi(subString(inStrMessage[6],0,1));
    gpggam_data.num_sattelites = atoi(subString(inStrMessage[7],0,2));
    gpggam_data.h_duration = atof(subString(inStrMessage[8],0,3));
 800336e:	eeb0 9a40 	vmov.f32	s18, s0
 8003372:	eef0 9a60 	vmov.f32	s19, s1
    gpggam_data.altitude = atof(subString(inStrMessage[9],0,5));
 8003376:	f7ff ff6f 	bl	8003258 <subString>
 800337a:	f000 fbd2 	bl	8003b22 <atof>
    gpggam_data.altitude_unit = *subString(inStrMessage[10],0,1);
 800337e:	2201      	movs	r2, #1
 8003380:	2100      	movs	r1, #0
 8003382:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    gpggam_data.longitude = atof(subString(inStrMessage[4],0,8));
    gpggam_data.lon_direction = *subString(inStrMessage[5],0,1);
    gpggam_data.fix_quality = atoi(subString(inStrMessage[6],0,1));
    gpggam_data.num_sattelites = atoi(subString(inStrMessage[7],0,2));
    gpggam_data.h_duration = atof(subString(inStrMessage[8],0,3));
    gpggam_data.altitude = atof(subString(inStrMessage[9],0,5));
 8003384:	eeb0 8a40 	vmov.f32	s16, s0
 8003388:	eef0 8a60 	vmov.f32	s17, s1
    gpggam_data.altitude_unit = *subString(inStrMessage[10],0,1);
 800338c:	f7ff ff64 	bl	8003258 <subString>
    gpggam_data.height_of_geoid = atof(subString(inStrMessage[11],0,4));
 8003390:	2204      	movs	r2, #4
    gpggam_data.lon_direction = *subString(inStrMessage[5],0,1);
    gpggam_data.fix_quality = atoi(subString(inStrMessage[6],0,1));
    gpggam_data.num_sattelites = atoi(subString(inStrMessage[7],0,2));
    gpggam_data.h_duration = atof(subString(inStrMessage[8],0,3));
    gpggam_data.altitude = atof(subString(inStrMessage[9],0,5));
    gpggam_data.altitude_unit = *subString(inStrMessage[10],0,1);
 8003392:	7807      	ldrb	r7, [r0, #0]
    gpggam_data.height_of_geoid = atof(subString(inStrMessage[11],0,4));
 8003394:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003396:	2100      	movs	r1, #0
 8003398:	f7ff ff5e 	bl	8003258 <subString>
 800339c:	f000 fbc1 	bl	8003b22 <atof>
    gpggam_data.hog_unit = *subString(inStrMessage[12],0,1);
 80033a0:	2201      	movs	r2, #1
 80033a2:	2100      	movs	r1, #0
 80033a4:	6b28      	ldr	r0, [r5, #48]	; 0x30
    gpggam_data.fix_quality = atoi(subString(inStrMessage[6],0,1));
    gpggam_data.num_sattelites = atoi(subString(inStrMessage[7],0,2));
    gpggam_data.h_duration = atof(subString(inStrMessage[8],0,3));
    gpggam_data.altitude = atof(subString(inStrMessage[9],0,5));
    gpggam_data.altitude_unit = *subString(inStrMessage[10],0,1);
    gpggam_data.height_of_geoid = atof(subString(inStrMessage[11],0,4));
 80033a6:	ed8d 0b02 	vstr	d0, [sp, #8]
    gpggam_data.hog_unit = *subString(inStrMessage[12],0,1);
 80033aa:	f7ff ff55 	bl	8003258 <subString>
    char tmpCheckSum[4];
    strcpy(tmpCheckSum, subString(inStrMessage[13],1,2));
 80033ae:	2202      	movs	r2, #2
    gpggam_data.num_sattelites = atoi(subString(inStrMessage[7],0,2));
    gpggam_data.h_duration = atof(subString(inStrMessage[8],0,3));
    gpggam_data.altitude = atof(subString(inStrMessage[9],0,5));
    gpggam_data.altitude_unit = *subString(inStrMessage[10],0,1);
    gpggam_data.height_of_geoid = atof(subString(inStrMessage[11],0,4));
    gpggam_data.hog_unit = *subString(inStrMessage[12],0,1);
 80033b0:	7806      	ldrb	r6, [r0, #0]
    char tmpCheckSum[4];
    strcpy(tmpCheckSum, subString(inStrMessage[13],1,2));
 80033b2:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80033b4:	2101      	movs	r1, #1
 80033b6:	f7ff ff4f 	bl	8003258 <subString>
 80033ba:	4601      	mov	r1, r0
 80033bc:	a807      	add	r0, sp, #28
 80033be:	f000 febd 	bl	800413c <strcpy>
    gpggam_data.checksum = strtoul(tmpCheckSum, NULL, 16);
 80033c2:	2210      	movs	r2, #16
 80033c4:	2100      	movs	r1, #0
 80033c6:	a807      	add	r0, sp, #28
 80033c8:	f001 fe72 	bl	80050b0 <strtoul>
    return gpggam_data;
 80033cc:	9b05      	ldr	r3, [sp, #20]
 80033ce:	7023      	strb	r3, [r4, #0]
    gpggam_data.altitude_unit = *subString(inStrMessage[10],0,1);
    gpggam_data.height_of_geoid = atof(subString(inStrMessage[11],0,4));
    gpggam_data.hog_unit = *subString(inStrMessage[12],0,1);
    char tmpCheckSum[4];
    strcpy(tmpCheckSum, subString(inStrMessage[13],1,2));
    gpggam_data.checksum = strtoul(tmpCheckSum, NULL, 16);
 80033d0:	4605      	mov	r5, r0
    return gpggam_data;
 80033d2:	f884 b001 	strb.w	fp, [r4, #1]
 80033d6:	ec51 0b1b 	vmov	r0, r1, d11
 80033da:	f884 a002 	strb.w	sl, [r4, #2]
 80033de:	f7fd fc0f 	bl	8000c00 <__aeabi_d2f>
 80033e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80033e6:	6060      	str	r0, [r4, #4]
 80033e8:	72e3      	strb	r3, [r4, #11]
 80033ea:	ec51 0b1a 	vmov	r0, r1, d10
 80033ee:	f7fd fc07 	bl	8000c00 <__aeabi_d2f>
 80033f2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80033f6:	74e3      	strb	r3, [r4, #19]
 80033f8:	60e0      	str	r0, [r4, #12]
 80033fa:	f884 9014 	strb.w	r9, [r4, #20]
 80033fe:	ec51 0b19 	vmov	r0, r1, d9
 8003402:	f884 8015 	strb.w	r8, [r4, #21]
 8003406:	f7fd fbfb 	bl	8000c00 <__aeabi_d2f>
 800340a:	61a0      	str	r0, [r4, #24]
 800340c:	ec51 0b18 	vmov	r0, r1, d8
 8003410:	f7fd fbf6 	bl	8000c00 <__aeabi_d2f>
 8003414:	ed9d 0b02 	vldr	d0, [sp, #8]
 8003418:	61e0      	str	r0, [r4, #28]
 800341a:	f884 7020 	strb.w	r7, [r4, #32]
 800341e:	ec51 0b10 	vmov	r0, r1, d0
 8003422:	f7fd fbed 	bl	8000c00 <__aeabi_d2f>
 8003426:	6260      	str	r0, [r4, #36]	; 0x24
}
 8003428:	4620      	mov	r0, r4
    gpggam_data.height_of_geoid = atof(subString(inStrMessage[11],0,4));
    gpggam_data.hog_unit = *subString(inStrMessage[12],0,1);
    char tmpCheckSum[4];
    strcpy(tmpCheckSum, subString(inStrMessage[13],1,2));
    gpggam_data.checksum = strtoul(tmpCheckSum, NULL, 16);
    return gpggam_data;
 800342a:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
 800342e:	62e5      	str	r5, [r4, #44]	; 0x2c
}
 8003430:	b009      	add	sp, #36	; 0x24
 8003432:	ecbd 8b08 	vpop	{d8-d11}
 8003436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800343a:	0000      	movs	r0, r0
 800343c:	0000      	movs	r0, r0
	...

08003440 <uart_print_gpgga_message>:

void uart_print_gpgga_message(const GPGGA_Message *gpgga_data){
 8003440:	b538      	push	{r3, r4, r5, lr}
 8003442:	4604      	mov	r4, r0
	printf("\r\nTime: %d:%d:%d UTC\r\n",gpgga_data->utc_time[0],gpgga_data->utc_time[1],gpgga_data->utc_time[2]);
	printf("Latitude: %.3f", 1234.1234);
    printf(" %c \r\n", gpgga_data->lat_direction);
 8003444:	4d2a      	ldr	r5, [pc, #168]	; (80034f0 <uart_print_gpgga_message+0xb0>)
    gpggam_data.checksum = strtoul(tmpCheckSum, NULL, 16);
    return gpggam_data;
}

void uart_print_gpgga_message(const GPGGA_Message *gpgga_data){
	printf("\r\nTime: %d:%d:%d UTC\r\n",gpgga_data->utc_time[0],gpgga_data->utc_time[1],gpgga_data->utc_time[2]);
 8003446:	f990 1000 	ldrsb.w	r1, [r0]
 800344a:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800344e:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8003452:	4828      	ldr	r0, [pc, #160]	; (80034f4 <uart_print_gpgga_message+0xb4>)
 8003454:	f000 fdc4 	bl	8003fe0 <printf>
	printf("Latitude: %.3f", 1234.1234);
 8003458:	a323      	add	r3, pc, #140	; (adr r3, 80034e8 <uart_print_gpgga_message+0xa8>)
 800345a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345e:	4826      	ldr	r0, [pc, #152]	; (80034f8 <uart_print_gpgga_message+0xb8>)
 8003460:	f000 fdbe 	bl	8003fe0 <printf>
    printf(" %c \r\n", gpgga_data->lat_direction);
 8003464:	7ae1      	ldrb	r1, [r4, #11]
 8003466:	4628      	mov	r0, r5
 8003468:	f000 fdba 	bl	8003fe0 <printf>
    printf("Longitude: %f ", gpgga_data->longitude);
 800346c:	68e0      	ldr	r0, [r4, #12]
 800346e:	f7fd f87b 	bl	8000568 <__aeabi_f2d>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4821      	ldr	r0, [pc, #132]	; (80034fc <uart_print_gpgga_message+0xbc>)
 8003478:	f000 fdb2 	bl	8003fe0 <printf>
    printf(" %c \r\n", gpgga_data->lon_direction);
 800347c:	7ce1      	ldrb	r1, [r4, #19]
 800347e:	4628      	mov	r0, r5
 8003480:	f000 fdae 	bl	8003fe0 <printf>
    printf("Fix quality: %d \r\n", gpgga_data->fix_quality);
 8003484:	f994 1014 	ldrsb.w	r1, [r4, #20]
 8003488:	481d      	ldr	r0, [pc, #116]	; (8003500 <uart_print_gpgga_message+0xc0>)
 800348a:	f000 fda9 	bl	8003fe0 <printf>
    printf("Number of satellites: %d \r\n", gpgga_data->num_sattelites);
 800348e:	f994 1015 	ldrsb.w	r1, [r4, #21]
 8003492:	481c      	ldr	r0, [pc, #112]	; (8003504 <uart_print_gpgga_message+0xc4>)
 8003494:	f000 fda4 	bl	8003fe0 <printf>
    printf("Horizontal dilution: %f \r\n", gpgga_data->h_duration);
 8003498:	69a0      	ldr	r0, [r4, #24]
 800349a:	f7fd f865 	bl	8000568 <__aeabi_f2d>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4819      	ldr	r0, [pc, #100]	; (8003508 <uart_print_gpgga_message+0xc8>)
 80034a4:	f000 fd9c 	bl	8003fe0 <printf>
    printf("Altitude: %f", gpgga_data->altitude);
 80034a8:	69e0      	ldr	r0, [r4, #28]
 80034aa:	f7fd f85d 	bl	8000568 <__aeabi_f2d>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	4816      	ldr	r0, [pc, #88]	; (800350c <uart_print_gpgga_message+0xcc>)
 80034b4:	f000 fd94 	bl	8003fe0 <printf>
    printf(" %c \r\n", gpgga_data->altitude_unit);
 80034b8:	f894 1020 	ldrb.w	r1, [r4, #32]
 80034bc:	4628      	mov	r0, r5
 80034be:	f000 fd8f 	bl	8003fe0 <printf>
    printf("Height of geoid: %f", gpgga_data->height_of_geoid);
 80034c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80034c4:	f7fd f850 	bl	8000568 <__aeabi_f2d>
 80034c8:	460b      	mov	r3, r1
 80034ca:	4602      	mov	r2, r0
 80034cc:	4810      	ldr	r0, [pc, #64]	; (8003510 <uart_print_gpgga_message+0xd0>)
 80034ce:	f000 fd87 	bl	8003fe0 <printf>
    printf(" %c \r\n", gpgga_data->hog_unit);
 80034d2:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80034d6:	4628      	mov	r0, r5
 80034d8:	f000 fd82 	bl	8003fe0 <printf>
    printf("Checksum: %f ~\r\n", gpgga_data->checksum);
 80034dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80034de:	480d      	ldr	r0, [pc, #52]	; (8003514 <uart_print_gpgga_message+0xd4>)
}
 80034e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    printf("Horizontal dilution: %f \r\n", gpgga_data->h_duration);
    printf("Altitude: %f", gpgga_data->altitude);
    printf(" %c \r\n", gpgga_data->altitude_unit);
    printf("Height of geoid: %f", gpgga_data->height_of_geoid);
    printf(" %c \r\n", gpgga_data->hog_unit);
    printf("Checksum: %f ~\r\n", gpgga_data->checksum);
 80034e4:	f000 bd7c 	b.w	8003fe0 <printf>
 80034e8:	5c91d14e 	.word	0x5c91d14e
 80034ec:	4093487e 	.word	0x4093487e
 80034f0:	08009e5b 	.word	0x08009e5b
 80034f4:	08009e35 	.word	0x08009e35
 80034f8:	08009e4c 	.word	0x08009e4c
 80034fc:	08009e62 	.word	0x08009e62
 8003500:	08009e71 	.word	0x08009e71
 8003504:	08009e84 	.word	0x08009e84
 8003508:	08009ea0 	.word	0x08009ea0
 800350c:	08009ebb 	.word	0x08009ebb
 8003510:	08009ec8 	.word	0x08009ec8
 8003514:	08009edc 	.word	0x08009edc

08003518 <SystemClock_Config>:
	/* USER CODE END 3 */
}

/** System Clock Configuration
 */
void SystemClock_Config(void) {
 8003518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800351c:	b0ac      	sub	sp, #176	; 0xb0
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800351e:	2401      	movs	r4, #1
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8003520:	2500      	movs	r5, #0
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003522:	2602      	movs	r6, #2
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003524:	2710      	movs	r7, #16
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = 0;
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003526:	2360      	movs	r3, #96	; 0x60
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
	RCC_OscInitStruct.PLL.PLLM = 1;
	RCC_OscInitStruct.PLL.PLLN = 16;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003528:	f04f 0807 	mov.w	r8, #7
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800352c:	a806      	add	r0, sp, #24
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = 0;
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800352e:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003530:	9706      	str	r7, [sp, #24]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003532:	940c      	str	r4, [sp, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8003534:	950d      	str	r5, [sp, #52]	; 0x34
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003536:	9610      	str	r6, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003538:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 800353a:	9412      	str	r4, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 16;
 800353c:	9713      	str	r7, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800353e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003542:	9615      	str	r6, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003544:	9616      	str	r6, [sp, #88]	; 0x58
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003546:	f7fe fab7 	bl	8001ab8 <HAL_RCC_OscConfig>
		Error_Handler();
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800354a:	230f      	movs	r3, #15
 800354c:	9301      	str	r3, [sp, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800354e:	2303      	movs	r3, #3
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8003550:	4621      	mov	r1, r4

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003552:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8003554:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8003556:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800355a:	9305      	str	r3, [sp, #20]
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800355c:	9503      	str	r5, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800355e:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8003560:	f7fe fd1c 	bl	8001f9c <HAL_RCC_ClockConfig>
		Error_Handler();
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 8003564:	f244 0302 	movw	r3, #16386	; 0x4002
 8003568:	9317      	str	r3, [sp, #92]	; 0x5c
			| RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800356a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800356e:	9329      	str	r3, [sp, #164]	; 0xa4
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8003570:	a817      	add	r0, sp, #92	; 0x5c
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003572:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003576:	931e      	str	r3, [sp, #120]	; 0x78
		Error_Handler();
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
			| RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003578:	9520      	str	r5, [sp, #128]	; 0x80
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800357a:	9418      	str	r4, [sp, #96]	; 0x60
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800357c:	9419      	str	r4, [sp, #100]	; 0x64
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800357e:	971a      	str	r7, [sp, #104]	; 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003580:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003584:	961c      	str	r6, [sp, #112]	; 0x70
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003586:	961d      	str	r6, [sp, #116]	; 0x74
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8003588:	f7fe feae 	bl	80022e8 <HAL_RCCEx_PeriphCLKConfig>
		Error_Handler();
	}

	/**Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800358c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003590:	f7fe f97c 	bl	800188c <HAL_PWREx_ControlVoltageScaling>
		Error_Handler();
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8003594:	f7fe fdba 	bl	800210c <HAL_RCC_GetHCLKFreq>
 8003598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800359c:	fbb0 f0f3 	udiv	r0, r0, r3
 80035a0:	f7fe f864 	bl	800166c <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80035a4:	2004      	movs	r0, #4
 80035a6:	f7fe f877 	bl	8001698 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80035aa:	462a      	mov	r2, r5
 80035ac:	4629      	mov	r1, r5
 80035ae:	f04f 30ff 	mov.w	r0, #4294967295
 80035b2:	f7fe f827 	bl	8001604 <HAL_NVIC_SetPriority>
}
 80035b6:	b02c      	add	sp, #176	; 0xb0
 80035b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080035bc <main>:

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void) {
 80035bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035be:	b0c1      	sub	sp, #260	; 0x104
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80035c0:	f7fd fd0e 	bl	8000fe0 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80035c4:	f7ff ffa8 	bl	8003518 <SystemClock_Config>
static void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80035c8:	4b87      	ldr	r3, [pc, #540]	; (80037e8 <main+0x22c>)
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80035ca:	4888      	ldr	r0, [pc, #544]	; (80037ec <main+0x230>)
static void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80035cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c

	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	htim1.Instance = TIM1;
 80035ce:	4d88      	ldr	r5, [pc, #544]	; (80037f0 <main+0x234>)
static void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80035d0:	f042 0204 	orr.w	r2, r2, #4
 80035d4:	64da      	str	r2, [r3, #76]	; 0x4c
 80035d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035d8:	f002 0204 	and.w	r2, r2, #4
 80035dc:	9202      	str	r2, [sp, #8]
 80035de:	9a02      	ldr	r2, [sp, #8]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 80035e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035e2:	f042 0201 	orr.w	r2, r2, #1
 80035e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80035e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035ea:	f002 0201 	and.w	r2, r2, #1
 80035ee:	9203      	str	r2, [sp, #12]
 80035f0:	9a03      	ldr	r2, [sp, #12]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80035f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035f4:	f042 0202 	orr.w	r2, r2, #2
 80035f8:	64da      	str	r2, [r3, #76]	; 0x4c
 80035fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fc:	f003 0302 	and.w	r3, r3, #2
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8003600:	2200      	movs	r2, #0
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8003602:	9304      	str	r3, [sp, #16]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8003604:	2108      	movs	r1, #8

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003606:	2400      	movs	r4, #0
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003608:	2701      	movs	r7, #1
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800360a:	9b04      	ldr	r3, [sp, #16]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800360c:	f7fe f930 	bl	8001870 <HAL_GPIO_WritePin>
	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003610:	a920      	add	r1, sp, #128	; 0x80

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003612:	2308      	movs	r3, #8
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003614:	4875      	ldr	r0, [pc, #468]	; (80037ec <main+0x230>)

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003616:	9320      	str	r3, [sp, #128]	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003618:	9721      	str	r7, [sp, #132]	; 0x84
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361a:	9422      	str	r4, [sp, #136]	; 0x88
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361c:	9423      	str	r4, [sp, #140]	; 0x8c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800361e:	f7fe f86b 	bl	80016f8 <HAL_GPIO_Init>
}

/* USART2 init function */
static void MX_USART2_UART_Init(void) {

	huart2.Instance = USART2;
 8003622:	4874      	ldr	r0, [pc, #464]	; (80037f4 <main+0x238>)
	huart2.Init.BaudRate = 9600;
 8003624:	4a74      	ldr	r2, [pc, #464]	; (80037f8 <main+0x23c>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003626:	6084      	str	r4, [r0, #8]

/* USART2 init function */
static void MX_USART2_UART_Init(void) {

	huart2.Instance = USART2;
	huart2.Init.BaudRate = 9600;
 8003628:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800362c:	e880 000c 	stmia.w	r0, {r2, r3}
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003630:	230c      	movs	r3, #12
 8003632:	6143      	str	r3, [r0, #20]
static void MX_USART2_UART_Init(void) {

	huart2.Instance = USART2;
	huart2.Init.BaudRate = 9600;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003634:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003636:	6104      	str	r4, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003638:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800363a:	61c4      	str	r4, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800363c:	6204      	str	r4, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800363e:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003640:	f7ff fcb9 	bl	8002fb6 <HAL_UART_Init>

	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	htim1.Instance = TIM1;
 8003644:	4b6d      	ldr	r3, [pc, #436]	; (80037fc <main+0x240>)
	htim1.Init.Prescaler = 0;
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003646:	60ac      	str	r4, [r5, #8]
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	htim1.Instance = TIM1;
	htim1.Init.Prescaler = 0;
 8003648:	e885 0018 	stmia.w	r5, {r3, r4}
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim1.Init.Period = 9090;
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim1.Init.RepetitionCounter = 0;
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800364c:	4628      	mov	r0, r5
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	htim1.Instance = TIM1;
	htim1.Init.Prescaler = 0;
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim1.Init.Period = 9090;
 800364e:	f242 3382 	movw	r3, #9090	; 0x2382
 8003652:	60eb      	str	r3, [r5, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003654:	612c      	str	r4, [r5, #16]
	htim1.Init.RepetitionCounter = 0;
 8003656:	616c      	str	r4, [r5, #20]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8003658:	f7ff f8b6 	bl	80027c8 <HAL_TIM_PWM_Init>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800365c:	a905      	add	r1, sp, #20
 800365e:	4628      	mov	r0, r5
	htim1.Init.RepetitionCounter = 0;
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
		Error_Handler();
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003660:	9405      	str	r4, [sp, #20]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003662:	9406      	str	r4, [sp, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003664:	9407      	str	r4, [sp, #28]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8003666:	ae11      	add	r6, sp, #68	; 0x44
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8003668:	f7ff f988 	bl	800297c <HAL_TIMEx_MasterConfigSynchronization>
			!= HAL_OK) {
		Error_Handler();
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800366c:	2360      	movs	r3, #96	; 0x60
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800366e:	4622      	mov	r2, r4
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
			!= HAL_OK) {
		Error_Handler();
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003670:	9311      	str	r3, [sp, #68]	; 0x44
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8003672:	4631      	mov	r1, r6
			!= HAL_OK) {
		Error_Handler();
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.Pulse = 4045;
 8003674:	f640 73cd 	movw	r3, #4045	; 0xfcd
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8003678:	4628      	mov	r0, r5
			!= HAL_OK) {
		Error_Handler();
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.Pulse = 4045;
 800367a:	9312      	str	r3, [sp, #72]	; 0x48
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800367c:	9413      	str	r4, [sp, #76]	; 0x4c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800367e:	9414      	str	r4, [sp, #80]	; 0x50
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003680:	9415      	str	r4, [sp, #84]	; 0x54
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003682:	9416      	str	r4, [sp, #88]	; 0x58
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003684:	9417      	str	r4, [sp, #92]	; 0x5c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8003686:	f7ff f8f3 	bl	8002870 <HAL_TIM_PWM_ConfigChannel>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800368a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	sBreakDeadTimeConfig.BreakFilter = 0;
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
	sBreakDeadTimeConfig.Break2Filter = 0;
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800368e:	a920      	add	r1, sp, #128	; 0x80
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003690:	9325      	str	r3, [sp, #148]	; 0x94
	sBreakDeadTimeConfig.BreakFilter = 0;
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
	sBreakDeadTimeConfig.Break2Filter = 0;
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8003692:	4628      	mov	r0, r5
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
	sBreakDeadTimeConfig.BreakFilter = 0;
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003694:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003698:	9328      	str	r3, [sp, #160]	; 0xa0
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
			!= HAL_OK) {
		Error_Handler();
	}

	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800369a:	9420      	str	r4, [sp, #128]	; 0x80
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800369c:	9421      	str	r4, [sp, #132]	; 0x84
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800369e:	9422      	str	r4, [sp, #136]	; 0x88
	sBreakDeadTimeConfig.DeadTime = 0;
 80036a0:	9423      	str	r4, [sp, #140]	; 0x8c
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80036a2:	9424      	str	r4, [sp, #144]	; 0x90
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
	sBreakDeadTimeConfig.BreakFilter = 0;
 80036a4:	9426      	str	r4, [sp, #152]	; 0x98
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80036a6:	9427      	str	r4, [sp, #156]	; 0x9c
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
	sBreakDeadTimeConfig.Break2Filter = 0;
 80036a8:	9429      	str	r4, [sp, #164]	; 0xa4
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80036aa:	942a      	str	r4, [sp, #168]	; 0xa8
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80036ac:	f7ff f988 	bl	80029c0 <HAL_TIMEx_ConfigBreakDeadTime>
			!= HAL_OK) {
		Error_Handler();
	}

	HAL_TIM_MspPostInit(&htim1);
 80036b0:	4628      	mov	r0, r5
 80036b2:	f000 f935 	bl	8003920 <HAL_TIM_MspPostInit>

	ADC_ChannelConfTypeDef sConfig;

	/**Common config
	 */
	hadc1.Instance = ADC1;
 80036b6:	4d52      	ldr	r5, [pc, #328]	; (8003800 <main+0x244>)
 80036b8:	4b52      	ldr	r3, [pc, #328]	; (8003804 <main+0x248>)
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80036ba:	60ac      	str	r4, [r5, #8]
	ADC_ChannelConfTypeDef sConfig;

	/**Common config
	 */
	hadc1.Instance = ADC1;
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80036bc:	e885 0018 	stmia.w	r5, {r3, r4}
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	hadc1.Init.DMAContinuousRequests = DISABLE;
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
	hadc1.Init.OversamplingMode = DISABLE;
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80036c0:	4628      	mov	r0, r5
	hadc1.Instance = ADC1;
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80036c2:	2304      	movs	r3, #4
 80036c4:	616b      	str	r3, [r5, #20]
	/**Common config
	 */
	hadc1.Instance = ADC1;
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036c6:	60ec      	str	r4, [r5, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80036c8:	612c      	str	r4, [r5, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80036ca:	61ac      	str	r4, [r5, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80036cc:	61ec      	str	r4, [r5, #28]
	hadc1.Init.NbrOfConversion = 1;
 80036ce:	622f      	str	r7, [r5, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80036d0:	626c      	str	r4, [r5, #36]	; 0x24
	hadc1.Init.NbrOfDiscConversion = 1;
 80036d2:	62af      	str	r7, [r5, #40]	; 0x28
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036d4:	62ef      	str	r7, [r5, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036d6:	632c      	str	r4, [r5, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80036d8:	636c      	str	r4, [r5, #52]	; 0x34
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80036da:	63ac      	str	r4, [r5, #56]	; 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 80036dc:	63ec      	str	r4, [r5, #60]	; 0x3c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80036de:	f7fd fca5 	bl	800102c <HAL_ADC_Init>
		Error_Handler();
	}

	/**Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 80036e2:	2305      	movs	r3, #5
	sConfig.Rank = 1;
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
	sConfig.Offset = 0;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80036e4:	a920      	add	r1, sp, #128	; 0x80
 80036e6:	4628      	mov	r0, r5
		Error_Handler();
	}

	/**Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 80036e8:	9320      	str	r3, [sp, #128]	; 0x80
	sConfig.Rank = 1;
 80036ea:	9721      	str	r7, [sp, #132]	; 0x84
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80036ec:	9422      	str	r4, [sp, #136]	; 0x88
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80036ee:	9423      	str	r4, [sp, #140]	; 0x8c
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80036f0:	9424      	str	r4, [sp, #144]	; 0x90
	sConfig.Offset = 0;
 80036f2:	9425      	str	r4, [sp, #148]	; 0x94
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80036f4:	f7fd fd7a 	bl	80011ec <HAL_ADC_ConfigChannel>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_USART2_UART_Init();
	MX_TIM1_Init();
	MX_ADC1_Init();
	HD44780_Init();
 80036f8:	f7ff fd34 	bl	8003164 <HD44780_Init>
 80036fc:	4d42      	ldr	r5, [pc, #264]	; (8003808 <main+0x24c>)
		/* result will be checked to be ok or a timeout telling us whether
		 * the char should be copied over to recBuffer, or if comm should be reset */
		HAL_StatusTypeDef result = 0;

		/*check for a char on the serial port with a timeout value */
		result = HAL_UART_Receive(&huart2, &recChar, 1, 40000); //will wait up to 10s for
 80036fe:	483d      	ldr	r0, [pc, #244]	; (80037f4 <main+0x238>)
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* recChar will hold a single char received on the serial port*/
		char recChar = 0;
 8003700:	a940      	add	r1, sp, #256	; 0x100
 8003702:	2400      	movs	r4, #0
 8003704:	f801 4df9 	strb.w	r4, [r1, #-249]!
		/* result will be checked to be ok or a timeout telling us whether
		 * the char should be copied over to recBuffer, or if comm should be reset */
		HAL_StatusTypeDef result = 0;

		/*check for a char on the serial port with a timeout value */
		result = HAL_UART_Receive(&huart2, &recChar, 1, 40000); //will wait up to 10s for
 8003708:	f649 4340 	movw	r3, #40000	; 0x9c40
 800370c:	2201      	movs	r2, #1
 800370e:	f7ff fbb0 	bl	8002e72 <HAL_UART_Receive>
																// a char and then timeout
		if (result == HAL_OK)						//then we have rec'd a char
 8003712:	b9e0      	cbnz	r0, 800374e <main+0x192>
				{
			if (recChar == '$')	//STX! so let's start storing char in the recBuffer
 8003714:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003718:	4b3c      	ldr	r3, [pc, #240]	; (800380c <main+0x250>)
 800371a:	2924      	cmp	r1, #36	; 0x24
 800371c:	d104      	bne.n	8003728 <main+0x16c>
					{
				recBufferIndex = 0;			//$ is the first char in a sentence.
				recBuffer[recBufferIndex] = recChar;//so we've got to store it at the
 800371e:	4a3c      	ldr	r2, [pc, #240]	; (8003810 <main+0x254>)
 8003720:	7011      	strb	r1, [r2, #0]
													//start of our recBuffer
				recBufferIndex++;			//and inc the index so the next char
 8003722:	2201      	movs	r2, #1
 8003724:	701a      	strb	r2, [r3, #0]
 8003726:	e019      	b.n	800375c <main+0x1a0>
											//is stored in the next position in
											//the buffer
			} else if (recBufferIndex > 0)//then we're receiving the rest of the sentence
 8003728:	f993 2000 	ldrsb.w	r2, [r3]
 800372c:	2a00      	cmp	r2, #0
					{
				recBuffer[recBufferIndex] = recChar;//so place the rec'd char in the buffer
 800372e:	bfc1      	itttt	gt
 8003730:	4837      	ldrgt	r0, [pc, #220]	; (8003810 <main+0x254>)
 8003732:	5481      	strbgt	r1, [r0, r2]
				if (recBufferIndex < recBufferSize)	//and increment the index as long as
				{						//we don't exceed the size of the buffer
					recBufferIndex++;
 8003734:	3201      	addgt	r2, #1
 8003736:	701a      	strbgt	r2, [r3, #0]
				} else {
					recBufferIndex = 0;	//if we're we've exceeded the size of our
					printf("recBuffer Overflow\r\n");	//buffer so let's say so
				}
			}
			if (recChar == '\r')	//if we get a cr then we know we're at the
 8003738:	290d      	cmp	r1, #13
 800373a:	d10f      	bne.n	800375c <main+0x1a0>
					{									//end of our sentence
				recBuffer[recBufferIndex] = '\0';//put a null instead of cr in the buffer
 800373c:	f993 1000 	ldrsb.w	r1, [r3]
 8003740:	4833      	ldr	r0, [pc, #204]	; (8003810 <main+0x254>)
 8003742:	2200      	movs	r2, #0
												 //'cause that's what strings need
				recBufferIndex = 0;					//and reset the buffer index
 8003744:	701a      	strb	r2, [r3, #0]
				sentenceReceived = 1;	//and set the flag 'cause we've got a
 8003746:	2301      	movs	r3, #1
					printf("recBuffer Overflow\r\n");	//buffer so let's say so
				}
			}
			if (recChar == '\r')	//if we get a cr then we know we're at the
					{									//end of our sentence
				recBuffer[recBufferIndex] = '\0';//put a null instead of cr in the buffer
 8003748:	5442      	strb	r2, [r0, r1]
												 //'cause that's what strings need
				recBufferIndex = 0;					//and reset the buffer index
				sentenceReceived = 1;	//and set the flag 'cause we've got a
 800374a:	702b      	strb	r3, [r5, #0]
 800374c:	e006      	b.n	800375c <main+0x1a0>
										//complete senetence now.
			}
		} else if (result == HAL_TIMEOUT) {
 800374e:	2803      	cmp	r0, #3
 8003750:	d104      	bne.n	800375c <main+0x1a0>
			printf("serial port timeout\r\n");			//let's say so
 8003752:	4830      	ldr	r0, [pc, #192]	; (8003814 <main+0x258>)
 8003754:	f000 fca8 	bl	80040a8 <puts>
			recBufferIndex = 0;							//and start over
 8003758:	4b2c      	ldr	r3, [pc, #176]	; (800380c <main+0x250>)
 800375a:	701c      	strb	r4, [r3, #0]
		}

		if (sentenceReceived) {
 800375c:	f995 3000 	ldrsb.w	r3, [r5]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0cc      	beq.n	80036fe <main+0x142>
			/* your code goes here to parse the string inside recBuffer */
			//printf("recBuffer: %s\r\n", recBuffer);

			sentenceReceived = 0;
 8003764:	2400      	movs	r4, #0
			HAL_UART_AbortReceive(&huart2);
 8003766:	4823      	ldr	r0, [pc, #140]	; (80037f4 <main+0x238>)

		if (sentenceReceived) {
			/* your code goes here to parse the string inside recBuffer */
			//printf("recBuffer: %s\r\n", recBuffer);

			sentenceReceived = 0;
 8003768:	702c      	strb	r4, [r5, #0]
			HAL_UART_AbortReceive(&huart2);
 800376a:	f7ff f967 	bl	8002a3c <HAL_UART_AbortReceive>

			char gpsDataStr[128] = { '\0' };
 800376e:	2280      	movs	r2, #128	; 0x80
 8003770:	4621      	mov	r1, r4
 8003772:	eb0d 0002 	add.w	r0, sp, r2
 8003776:	f000 fc29 	bl	8003fcc <memset>
			strcpy(gpsDataStr, recBuffer);
 800377a:	4925      	ldr	r1, [pc, #148]	; (8003810 <main+0x254>)
 800377c:	a820      	add	r0, sp, #128	; 0x80
 800377e:	f000 fcdd 	bl	800413c <strcpy>
			char *pArrayOfGpsDataStr[15];
			for (int i = 0; i < 15; i++) {
				pArrayOfGpsDataStr[i] = malloc(
 8003782:	2080      	movs	r0, #128	; 0x80
 8003784:	f000 f9fa 	bl	8003b7c <malloc>
 8003788:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
			HAL_UART_AbortReceive(&huart2);

			char gpsDataStr[128] = { '\0' };
			strcpy(gpsDataStr, recBuffer);
			char *pArrayOfGpsDataStr[15];
			for (int i = 0; i < 15; i++) {
 800378c:	3401      	adds	r4, #1
 800378e:	2c0f      	cmp	r4, #15
 8003790:	d1f7      	bne.n	8003782 <main+0x1c6>
				pArrayOfGpsDataStr[i] = malloc(
						sizeof(gpsDataStr) * sizeof(char));
			}
			int32_t numbOfRaws = truncateStr(gpsDataStr, pArrayOfGpsDataStr,
 8003792:	222c      	movs	r2, #44	; 0x2c
 8003794:	4631      	mov	r1, r6
 8003796:	a820      	add	r0, sp, #128	; 0x80
 8003798:	f7ff fd74 	bl	8003284 <truncateStr>
					',');
			if(strcmp(pArrayOfGpsDataStr[0],"$SPD") == 0){
 800379c:	491e      	ldr	r1, [pc, #120]	; (8003818 <main+0x25c>)
			char *pArrayOfGpsDataStr[15];
			for (int i = 0; i < 15; i++) {
				pArrayOfGpsDataStr[i] = malloc(
						sizeof(gpsDataStr) * sizeof(char));
			}
			int32_t numbOfRaws = truncateStr(gpsDataStr, pArrayOfGpsDataStr,
 800379e:	4607      	mov	r7, r0
					',');
			if(strcmp(pArrayOfGpsDataStr[0],"$SPD") == 0){
 80037a0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80037a2:	f7fc fd15 	bl	80001d0 <strcmp>
 80037a6:	4604      	mov	r4, r0
 80037a8:	b990      	cbnz	r0, 80037d0 <main+0x214>
				HD44780_ClrScr();
 80037aa:	f7ff fd52 	bl	8003252 <HD44780_ClrScr>
				HD44780_PutStr("S:");
 80037ae:	481b      	ldr	r0, [pc, #108]	; (800381c <main+0x260>)
 80037b0:	f7ff fd3e 	bl	8003230 <HD44780_PutStr>
				HD44780_PutStr(pArrayOfGpsDataStr[2]);
 80037b4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80037b6:	f7ff fd3b 	bl	8003230 <HD44780_PutStr>
				HD44780_GotoXY(0,1);
 80037ba:	2101      	movs	r1, #1
 80037bc:	4620      	mov	r0, r4
 80037be:	f7ff fd29 	bl	8003214 <HD44780_GotoXY>
				HD44780_PutStr("N:");
 80037c2:	4817      	ldr	r0, [pc, #92]	; (8003820 <main+0x264>)
 80037c4:	f7ff fd34 	bl	8003230 <HD44780_PutStr>
				HD44780_PutStr(pArrayOfGpsDataStr[1]);
 80037c8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80037ca:	f7ff fd31 	bl	8003230 <HD44780_PutStr>
 80037ce:	e796      	b.n	80036fe <main+0x142>
			} else {
				GPGGA_Message parsedGpgga = parseGPGGA(pArrayOfGpsDataStr,
 80037d0:	463a      	mov	r2, r7
 80037d2:	4631      	mov	r1, r6
 80037d4:	a805      	add	r0, sp, #20
 80037d6:	f7ff fd6d 	bl	80032b4 <parseGPGGA>
					numbOfRaws);
				HAL_Delay(50);
 80037da:	2032      	movs	r0, #50	; 0x32
 80037dc:	f7fd fc1a 	bl	8001014 <HAL_Delay>
				uart_print_gpgga_message(&parsedGpgga);
 80037e0:	a805      	add	r0, sp, #20
 80037e2:	f7ff fe2d 	bl	8003440 <uart_print_gpgga_message>
			}
		}
	}
 80037e6:	e78a      	b.n	80036fe <main+0x142>
 80037e8:	40021000 	.word	0x40021000
 80037ec:	48000400 	.word	0x48000400
 80037f0:	20000730 	.word	0x20000730
 80037f4:	2000076c 	.word	0x2000076c
 80037f8:	40004400 	.word	0x40004400
 80037fc:	40012c00 	.word	0x40012c00
 8003800:	200006c8 	.word	0x200006c8
 8003804:	50040000 	.word	0x50040000
 8003808:	20000588 	.word	0x20000588
 800380c:	20000688 	.word	0x20000688
 8003810:	20000589 	.word	0x20000589
 8003814:	08009eed 	.word	0x08009eed
 8003818:	08009f02 	.word	0x08009f02
 800381c:	08009f07 	.word	0x08009f07
 8003820:	08009f0a 	.word	0x08009f0a

08003824 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void) {
 8003824:	4770      	bx	lr
	...

08003828 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003828:	4b21      	ldr	r3, [pc, #132]	; (80038b0 <HAL_MspInit+0x88>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800382a:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800382c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	661a      	str	r2, [r3, #96]	; 0x60
 8003834:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003836:	f002 0201 	and.w	r2, r2, #1
 800383a:	9200      	str	r2, [sp, #0]
 800383c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800383e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003840:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003844:	659a      	str	r2, [r3, #88]	; 0x58
 8003846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384c:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800384e:	2003      	movs	r0, #3
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();
 8003850:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003852:	f7fd fec5 	bl	80015e0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003856:	2200      	movs	r2, #0
 8003858:	4611      	mov	r1, r2
 800385a:	f06f 000b 	mvn.w	r0, #11
 800385e:	f7fd fed1 	bl	8001604 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003862:	2200      	movs	r2, #0
 8003864:	4611      	mov	r1, r2
 8003866:	f06f 000a 	mvn.w	r0, #10
 800386a:	f7fd fecb 	bl	8001604 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800386e:	2200      	movs	r2, #0
 8003870:	4611      	mov	r1, r2
 8003872:	f06f 0009 	mvn.w	r0, #9
 8003876:	f7fd fec5 	bl	8001604 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800387a:	2200      	movs	r2, #0
 800387c:	4611      	mov	r1, r2
 800387e:	f06f 0004 	mvn.w	r0, #4
 8003882:	f7fd febf 	bl	8001604 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003886:	2200      	movs	r2, #0
 8003888:	4611      	mov	r1, r2
 800388a:	f06f 0003 	mvn.w	r0, #3
 800388e:	f7fd feb9 	bl	8001604 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003892:	2200      	movs	r2, #0
 8003894:	4611      	mov	r1, r2
 8003896:	f06f 0001 	mvn.w	r0, #1
 800389a:	f7fd feb3 	bl	8001604 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800389e:	2200      	movs	r2, #0
 80038a0:	4611      	mov	r1, r2
 80038a2:	f04f 30ff 	mov.w	r0, #4294967295
 80038a6:	f7fd fead 	bl	8001604 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038aa:	b003      	add	sp, #12
 80038ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80038b0:	40021000 	.word	0x40021000

080038b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80038b6:	6802      	ldr	r2, [r0, #0]
 80038b8:	4b0e      	ldr	r3, [pc, #56]	; (80038f4 <HAL_ADC_MspInit+0x40>)
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d117      	bne.n	80038ee <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80038be:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80038c2:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PA0-CK_IN     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c6:	a901      	add	r1, sp, #4
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80038c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80038d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	9b00      	ldr	r3, [sp, #0]
  
    /**ADC1 GPIO Configuration    
    PA0-CK_IN     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80038da:	2301      	movs	r3, #1
 80038dc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80038de:	230b      	movs	r3, #11
 80038e0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    /**ADC1 GPIO Configuration    
    PA0-CK_IN     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ea:	f7fd ff05 	bl	80016f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80038ee:	b007      	add	sp, #28
 80038f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80038f4:	50040000 	.word	0x50040000

080038f8 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM1)
 80038f8:	6802      	ldr	r2, [r0, #0]
 80038fa:	4b08      	ldr	r3, [pc, #32]	; (800391c <HAL_TIM_PWM_MspInit+0x24>)
 80038fc:	429a      	cmp	r2, r3
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80038fe:	b082      	sub	sp, #8

  if(htim_pwm->Instance==TIM1)
 8003900:	d10a      	bne.n	8003918 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003902:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8003906:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003908:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800390c:	661a      	str	r2, [r3, #96]	; 0x60
 800390e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003914:	9301      	str	r3, [sp, #4]
 8003916:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003918:	b002      	add	sp, #8
 800391a:	4770      	bx	lr
 800391c:	40012c00 	.word	0x40012c00

08003920 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003920:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8003922:	6802      	ldr	r2, [r0, #0]
 8003924:	4b09      	ldr	r3, [pc, #36]	; (800394c <HAL_TIM_MspPostInit+0x2c>)
 8003926:	429a      	cmp	r2, r3
 8003928:	d10d      	bne.n	8003946 <HAL_TIM_MspPostInit+0x26>
  /* USER CODE END TIM1_MspPostInit 0 */
  
    /**TIM1 GPIO Configuration    
    PA7     ------> TIM1_CH1N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800392a:	2380      	movs	r3, #128	; 0x80
 800392c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800392e:	2302      	movs	r3, #2
 8003930:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003932:	2300      	movs	r3, #0
 8003934:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003936:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003938:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800393a:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800393c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003940:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003942:	f7fd fed9 	bl	80016f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003946:	b007      	add	sp, #28
 8003948:	f85d fb04 	ldr.w	pc, [sp], #4
 800394c:	40012c00 	.word	0x40012c00

08003950 <HAL_UART_MspInit>:
  /* USER CODE END TIM1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003950:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8003952:	6802      	ldr	r2, [r0, #0]
 8003954:	4b15      	ldr	r3, [pc, #84]	; (80039ac <HAL_UART_MspInit+0x5c>)
 8003956:	429a      	cmp	r2, r3
  /* USER CODE END TIM1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003958:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800395a:	d125      	bne.n	80039a8 <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800395c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003960:	2403      	movs	r4, #3
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003962:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003964:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003968:	659a      	str	r2, [r3, #88]	; 0x58
 800396a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800396c:	9404      	str	r4, [sp, #16]
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800396e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	9b00      	ldr	r3, [sp, #0]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003976:	2304      	movs	r3, #4
 8003978:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397a:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800397c:	2307      	movs	r3, #7
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800397e:	2501      	movs	r5, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003980:	a901      	add	r1, sp, #4
 8003982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003986:	9305      	str	r3, [sp, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003988:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800398a:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800398c:	f7fd feb4 	bl	80016f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003990:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003994:	a901      	add	r1, sp, #4
 8003996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800399a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399c:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800399e:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a0:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80039a2:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a4:	f7fd fea8 	bl	80016f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80039a8:	b006      	add	sp, #24
 80039aa:	bd70      	pop	{r4, r5, r6, pc}
 80039ac:	40004400 	.word	0x40004400

080039b0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80039b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039b2:	f7fd fb21 	bl	8000ff8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 80039ba:	f7fd be7a 	b.w	80016b2 <HAL_SYSTICK_IRQHandler>
	...

080039c0 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80039c0:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef result = HAL_OK;
	result = HAL_UART_Transmit(&huart2,ptr,len,500);
 80039c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80039c6:	b085      	sub	sp, #20
 80039c8:	4614      	mov	r4, r2
	HAL_StatusTypeDef result = HAL_OK;
	result = HAL_UART_Transmit(&huart2,ptr,len,500);
 80039ca:	4810      	ldr	r0, [pc, #64]	; (8003a0c <_write+0x4c>)
 80039cc:	b292      	uxth	r2, r2
 80039ce:	f7ff f9f6 	bl	8002dbe <HAL_UART_Transmit>
	if(result == HAL_ERROR|| result == HAL_BUSY || result == HAL_TIMEOUT )
 80039d2:	1e42      	subs	r2, r0, #1
 80039d4:	b2d2      	uxtb	r2, r2
 80039d6:	2a02      	cmp	r2, #2
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
	HAL_StatusTypeDef result = HAL_OK;
	result = HAL_UART_Transmit(&huart2,ptr,len,500);
 80039d8:	4605      	mov	r5, r0
	if(result == HAL_ERROR|| result == HAL_BUSY || result == HAL_TIMEOUT )
 80039da:	d813      	bhi.n	8003a04 <_write+0x44>
	{
		char stringBuffer[16] = {0};
 80039dc:	2210      	movs	r2, #16
 80039de:	2100      	movs	r1, #0
 80039e0:	4668      	mov	r0, sp
 80039e2:	f000 faf3 	bl	8003fcc <memset>
		HD44780_GotoXY(1,0); //move to second line first position
 80039e6:	2100      	movs	r1, #0
 80039e8:	2001      	movs	r0, #1
 80039ea:	f7ff fc13 	bl	8003214 <HD44780_GotoXY>
		snprintf(stringBuffer,16,"Error: %i",result);
 80039ee:	462b      	mov	r3, r5
 80039f0:	4a07      	ldr	r2, [pc, #28]	; (8003a10 <_write+0x50>)
 80039f2:	2110      	movs	r1, #16
 80039f4:	4668      	mov	r0, sp
 80039f6:	f000 fb6f 	bl	80040d8 <snprintf>
		HD44780_PutStr(stringBuffer);
 80039fa:	4668      	mov	r0, sp
 80039fc:	f7ff fc18 	bl	8003230 <HD44780_PutStr>

		Error_Handler();
 8003a00:	f7ff ff10 	bl	8003824 <Error_Handler>
	}
	return len;
}
 8003a04:	4620      	mov	r0, r4
 8003a06:	b005      	add	sp, #20
 8003a08:	bd30      	pop	{r4, r5, pc}
 8003a0a:	bf00      	nop
 8003a0c:	2000076c 	.word	0x2000076c
 8003a10:	08009f0d 	.word	0x08009f0d

08003a14 <_sbrk>:
{
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8003a14:	4b04      	ldr	r3, [pc, #16]	; (8003a28 <_sbrk+0x14>)
 8003a16:	6819      	ldr	r1, [r3, #0]
	}
	return len;
}

void * _sbrk(int32_t incr)
{
 8003a18:	4602      	mov	r2, r0
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8003a1a:	b909      	cbnz	r1, 8003a20 <_sbrk+0xc>
		heap_end = & end;
 8003a1c:	4903      	ldr	r1, [pc, #12]	; (8003a2c <_sbrk+0x18>)
 8003a1e:	6019      	str	r1, [r3, #0]
	}

	prev_heap_end = heap_end;
 8003a20:	6818      	ldr	r0, [r3, #0]
	heap_end += incr;
 8003a22:	4402      	add	r2, r0
 8003a24:	601a      	str	r2, [r3, #0]

	return (void *) prev_heap_end;
}
 8003a26:	4770      	bx	lr
 8003a28:	2000068c 	.word	0x2000068c
 8003a2c:	200007e0 	.word	0x200007e0

08003a30 <_close>:

int _close(int32_t file)
{
	errno = ENOSYS;
 8003a30:	4b02      	ldr	r3, [pc, #8]	; (8003a3c <_close+0xc>)
 8003a32:	2258      	movs	r2, #88	; 0x58
 8003a34:	601a      	str	r2, [r3, #0]
	return -1;
}
 8003a36:	f04f 30ff 	mov.w	r0, #4294967295
 8003a3a:	4770      	bx	lr
 8003a3c:	200007dc 	.word	0x200007dc

08003a40 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
	errno = ENOSYS;
 8003a40:	4b02      	ldr	r3, [pc, #8]	; (8003a4c <_fstat+0xc>)
 8003a42:	2258      	movs	r2, #88	; 0x58
 8003a44:	601a      	str	r2, [r3, #0]
	return -1;
}
 8003a46:	f04f 30ff 	mov.w	r0, #4294967295
 8003a4a:	4770      	bx	lr
 8003a4c:	200007dc 	.word	0x200007dc

08003a50 <_isatty>:

int _isatty(int32_t file)
{
	errno = ENOSYS;
 8003a50:	4b02      	ldr	r3, [pc, #8]	; (8003a5c <_isatty+0xc>)
 8003a52:	2258      	movs	r2, #88	; 0x58
 8003a54:	601a      	str	r2, [r3, #0]
	return 0;
}
 8003a56:	2000      	movs	r0, #0
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	200007dc 	.word	0x200007dc

08003a60 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
	errno = ENOSYS;
 8003a60:	4b02      	ldr	r3, [pc, #8]	; (8003a6c <_lseek+0xc>)
 8003a62:	2258      	movs	r2, #88	; 0x58
 8003a64:	601a      	str	r2, [r3, #0]
	return -1;
}
 8003a66:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6a:	4770      	bx	lr
 8003a6c:	200007dc 	.word	0x200007dc

08003a70 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8003a70:	b508      	push	{r3, lr}
	HAL_UART_Receive(&huart2,ptr,1,HAL_MAX_DELAY);
 8003a72:	2201      	movs	r2, #1
 8003a74:	f04f 33ff 	mov.w	r3, #4294967295
 8003a78:	4802      	ldr	r0, [pc, #8]	; (8003a84 <_read+0x14>)
 8003a7a:	f7ff f9fa 	bl	8002e72 <HAL_UART_Receive>
	return 1;
}
 8003a7e:	2001      	movs	r0, #1
 8003a80:	bd08      	pop	{r3, pc}
 8003a82:	bf00      	nop
 8003a84:	2000076c 	.word	0x2000076c

08003a88 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a88:	490f      	ldr	r1, [pc, #60]	; (8003ac8 <SystemInit+0x40>)
 8003a8a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003a8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003a96:	4b0d      	ldr	r3, [pc, #52]	; (8003acc <SystemInit+0x44>)
 8003a98:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003a9a:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003a9c:	f042 0201 	orr.w	r2, r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003aa2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8003aaa:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003aae:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8003ab0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ab4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003abc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003abe:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ac0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ac4:	608b      	str	r3, [r1, #8]
 8003ac6:	4770      	bx	lr
 8003ac8:	e000ed00 	.word	0xe000ed00
 8003acc:	40021000 	.word	0x40021000

08003ad0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b08 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003ad4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003ad6:	e003      	b.n	8003ae0 <LoopCopyDataInit>

08003ad8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003ada:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003adc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003ade:	3104      	adds	r1, #4

08003ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003ae0:	480b      	ldr	r0, [pc, #44]	; (8003b10 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003ae2:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003ae4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003ae6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003ae8:	d3f6      	bcc.n	8003ad8 <CopyDataInit>
	ldr	r2, =_sbss
 8003aea:	4a0b      	ldr	r2, [pc, #44]	; (8003b18 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003aec:	e002      	b.n	8003af4 <LoopFillZerobss>

08003aee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003aee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003af0:	f842 3b04 	str.w	r3, [r2], #4

08003af4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003af4:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <LoopForever+0x16>)
	cmp	r2, r3
 8003af6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003af8:	d3f9      	bcc.n	8003aee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003afa:	f7ff ffc5 	bl	8003a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003afe:	f000 f817 	bl	8003b30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b02:	f7ff fd5b 	bl	80035bc <main>

08003b06 <LoopForever>:

LoopForever:
    b LoopForever
 8003b06:	e7fe      	b.n	8003b06 <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003b08:	2000c000 	.word	0x2000c000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8003b0c:	0800a2b4 	.word	0x0800a2b4
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003b10:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003b14:	2000056c 	.word	0x2000056c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8003b18:	2000056c 	.word	0x2000056c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8003b1c:	200007e0 	.word	0x200007e0

08003b20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b20:	e7fe      	b.n	8003b20 <ADC1_IRQHandler>

08003b22 <atof>:
 8003b22:	2100      	movs	r1, #0
 8003b24:	f001 b944 	b.w	8004db0 <strtod>

08003b28 <atoi>:
 8003b28:	220a      	movs	r2, #10
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	f001 ba38 	b.w	8004fa0 <strtol>

08003b30 <__libc_init_array>:
 8003b30:	b570      	push	{r4, r5, r6, lr}
 8003b32:	4b0e      	ldr	r3, [pc, #56]	; (8003b6c <__libc_init_array+0x3c>)
 8003b34:	4c0e      	ldr	r4, [pc, #56]	; (8003b70 <__libc_init_array+0x40>)
 8003b36:	1ae4      	subs	r4, r4, r3
 8003b38:	10a4      	asrs	r4, r4, #2
 8003b3a:	2500      	movs	r5, #0
 8003b3c:	461e      	mov	r6, r3
 8003b3e:	42a5      	cmp	r5, r4
 8003b40:	d004      	beq.n	8003b4c <__libc_init_array+0x1c>
 8003b42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b46:	4798      	blx	r3
 8003b48:	3501      	adds	r5, #1
 8003b4a:	e7f8      	b.n	8003b3e <__libc_init_array+0xe>
 8003b4c:	f006 f95c 	bl	8009e08 <_init>
 8003b50:	4c08      	ldr	r4, [pc, #32]	; (8003b74 <__libc_init_array+0x44>)
 8003b52:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <__libc_init_array+0x48>)
 8003b54:	1ae4      	subs	r4, r4, r3
 8003b56:	10a4      	asrs	r4, r4, #2
 8003b58:	2500      	movs	r5, #0
 8003b5a:	461e      	mov	r6, r3
 8003b5c:	42a5      	cmp	r5, r4
 8003b5e:	d004      	beq.n	8003b6a <__libc_init_array+0x3a>
 8003b60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b64:	4798      	blx	r3
 8003b66:	3501      	adds	r5, #1
 8003b68:	e7f8      	b.n	8003b5c <__libc_init_array+0x2c>
 8003b6a:	bd70      	pop	{r4, r5, r6, pc}
 8003b6c:	0800a2ac 	.word	0x0800a2ac
 8003b70:	0800a2ac 	.word	0x0800a2ac
 8003b74:	0800a2b0 	.word	0x0800a2b0
 8003b78:	0800a2ac 	.word	0x0800a2ac

08003b7c <malloc>:
 8003b7c:	4b02      	ldr	r3, [pc, #8]	; (8003b88 <malloc+0xc>)
 8003b7e:	4601      	mov	r1, r0
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	f000 b803 	b.w	8003b8c <_malloc_r>
 8003b86:	bf00      	nop
 8003b88:	20000508 	.word	0x20000508

08003b8c <_malloc_r>:
 8003b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b90:	f101 040b 	add.w	r4, r1, #11
 8003b94:	2c16      	cmp	r4, #22
 8003b96:	b085      	sub	sp, #20
 8003b98:	4681      	mov	r9, r0
 8003b9a:	d903      	bls.n	8003ba4 <_malloc_r+0x18>
 8003b9c:	f034 0407 	bics.w	r4, r4, #7
 8003ba0:	d501      	bpl.n	8003ba6 <_malloc_r+0x1a>
 8003ba2:	e002      	b.n	8003baa <_malloc_r+0x1e>
 8003ba4:	2410      	movs	r4, #16
 8003ba6:	428c      	cmp	r4, r1
 8003ba8:	d203      	bcs.n	8003bb2 <_malloc_r+0x26>
 8003baa:	230c      	movs	r3, #12
 8003bac:	f8c9 3000 	str.w	r3, [r9]
 8003bb0:	e1ea      	b.n	8003f88 <_malloc_r+0x3fc>
 8003bb2:	4648      	mov	r0, r9
 8003bb4:	f000 fa12 	bl	8003fdc <__malloc_lock>
 8003bb8:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8003bbc:	4d9e      	ldr	r5, [pc, #632]	; (8003e38 <_malloc_r+0x2ac>)
 8003bbe:	d217      	bcs.n	8003bf0 <_malloc_r+0x64>
 8003bc0:	f104 0208 	add.w	r2, r4, #8
 8003bc4:	442a      	add	r2, r5
 8003bc6:	f1a2 0108 	sub.w	r1, r2, #8
 8003bca:	6856      	ldr	r6, [r2, #4]
 8003bcc:	428e      	cmp	r6, r1
 8003bce:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8003bd2:	d102      	bne.n	8003bda <_malloc_r+0x4e>
 8003bd4:	68d6      	ldr	r6, [r2, #12]
 8003bd6:	42b2      	cmp	r2, r6
 8003bd8:	d008      	beq.n	8003bec <_malloc_r+0x60>
 8003bda:	6873      	ldr	r3, [r6, #4]
 8003bdc:	68f2      	ldr	r2, [r6, #12]
 8003bde:	68b1      	ldr	r1, [r6, #8]
 8003be0:	f023 0303 	bic.w	r3, r3, #3
 8003be4:	60ca      	str	r2, [r1, #12]
 8003be6:	4433      	add	r3, r6
 8003be8:	6091      	str	r1, [r2, #8]
 8003bea:	e02f      	b.n	8003c4c <_malloc_r+0xc0>
 8003bec:	3302      	adds	r3, #2
 8003bee:	e03d      	b.n	8003c6c <_malloc_r+0xe0>
 8003bf0:	0a63      	lsrs	r3, r4, #9
 8003bf2:	d01a      	beq.n	8003c2a <_malloc_r+0x9e>
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d802      	bhi.n	8003bfe <_malloc_r+0x72>
 8003bf8:	09a3      	lsrs	r3, r4, #6
 8003bfa:	3338      	adds	r3, #56	; 0x38
 8003bfc:	e018      	b.n	8003c30 <_malloc_r+0xa4>
 8003bfe:	2b14      	cmp	r3, #20
 8003c00:	d801      	bhi.n	8003c06 <_malloc_r+0x7a>
 8003c02:	335b      	adds	r3, #91	; 0x5b
 8003c04:	e014      	b.n	8003c30 <_malloc_r+0xa4>
 8003c06:	2b54      	cmp	r3, #84	; 0x54
 8003c08:	d802      	bhi.n	8003c10 <_malloc_r+0x84>
 8003c0a:	0b23      	lsrs	r3, r4, #12
 8003c0c:	336e      	adds	r3, #110	; 0x6e
 8003c0e:	e00f      	b.n	8003c30 <_malloc_r+0xa4>
 8003c10:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003c14:	d802      	bhi.n	8003c1c <_malloc_r+0x90>
 8003c16:	0be3      	lsrs	r3, r4, #15
 8003c18:	3377      	adds	r3, #119	; 0x77
 8003c1a:	e009      	b.n	8003c30 <_malloc_r+0xa4>
 8003c1c:	f240 5254 	movw	r2, #1364	; 0x554
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d804      	bhi.n	8003c2e <_malloc_r+0xa2>
 8003c24:	0ca3      	lsrs	r3, r4, #18
 8003c26:	337c      	adds	r3, #124	; 0x7c
 8003c28:	e002      	b.n	8003c30 <_malloc_r+0xa4>
 8003c2a:	233f      	movs	r3, #63	; 0x3f
 8003c2c:	e000      	b.n	8003c30 <_malloc_r+0xa4>
 8003c2e:	237e      	movs	r3, #126	; 0x7e
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003c36:	f1a2 0008 	sub.w	r0, r2, #8
 8003c3a:	6856      	ldr	r6, [r2, #4]
 8003c3c:	e00c      	b.n	8003c58 <_malloc_r+0xcc>
 8003c3e:	2900      	cmp	r1, #0
 8003c40:	68f1      	ldr	r1, [r6, #12]
 8003c42:	db08      	blt.n	8003c56 <_malloc_r+0xca>
 8003c44:	68b3      	ldr	r3, [r6, #8]
 8003c46:	60d9      	str	r1, [r3, #12]
 8003c48:	608b      	str	r3, [r1, #8]
 8003c4a:	18b3      	adds	r3, r6, r2
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	f042 0201 	orr.w	r2, r2, #1
 8003c52:	605a      	str	r2, [r3, #4]
 8003c54:	e1a3      	b.n	8003f9e <_malloc_r+0x412>
 8003c56:	460e      	mov	r6, r1
 8003c58:	4286      	cmp	r6, r0
 8003c5a:	d006      	beq.n	8003c6a <_malloc_r+0xde>
 8003c5c:	6872      	ldr	r2, [r6, #4]
 8003c5e:	f022 0203 	bic.w	r2, r2, #3
 8003c62:	1b11      	subs	r1, r2, r4
 8003c64:	290f      	cmp	r1, #15
 8003c66:	ddea      	ble.n	8003c3e <_malloc_r+0xb2>
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	4a72      	ldr	r2, [pc, #456]	; (8003e38 <_malloc_r+0x2ac>)
 8003c6e:	692e      	ldr	r6, [r5, #16]
 8003c70:	f102 0708 	add.w	r7, r2, #8
 8003c74:	42be      	cmp	r6, r7
 8003c76:	4639      	mov	r1, r7
 8003c78:	d079      	beq.n	8003d6e <_malloc_r+0x1e2>
 8003c7a:	6870      	ldr	r0, [r6, #4]
 8003c7c:	f020 0003 	bic.w	r0, r0, #3
 8003c80:	ebc4 0e00 	rsb	lr, r4, r0
 8003c84:	f1be 0f0f 	cmp.w	lr, #15
 8003c88:	dd0d      	ble.n	8003ca6 <_malloc_r+0x11a>
 8003c8a:	1933      	adds	r3, r6, r4
 8003c8c:	f044 0401 	orr.w	r4, r4, #1
 8003c90:	6074      	str	r4, [r6, #4]
 8003c92:	6153      	str	r3, [r2, #20]
 8003c94:	6113      	str	r3, [r2, #16]
 8003c96:	f04e 0201 	orr.w	r2, lr, #1
 8003c9a:	60df      	str	r7, [r3, #12]
 8003c9c:	609f      	str	r7, [r3, #8]
 8003c9e:	605a      	str	r2, [r3, #4]
 8003ca0:	f843 e00e 	str.w	lr, [r3, lr]
 8003ca4:	e17b      	b.n	8003f9e <_malloc_r+0x412>
 8003ca6:	f1be 0f00 	cmp.w	lr, #0
 8003caa:	6157      	str	r7, [r2, #20]
 8003cac:	6117      	str	r7, [r2, #16]
 8003cae:	db05      	blt.n	8003cbc <_malloc_r+0x130>
 8003cb0:	4430      	add	r0, r6
 8003cb2:	6843      	ldr	r3, [r0, #4]
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	6043      	str	r3, [r0, #4]
 8003cba:	e170      	b.n	8003f9e <_malloc_r+0x412>
 8003cbc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003cc0:	d215      	bcs.n	8003cee <_malloc_r+0x162>
 8003cc2:	08c0      	lsrs	r0, r0, #3
 8003cc4:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8003cc8:	2701      	movs	r7, #1
 8003cca:	fa07 fe0e 	lsl.w	lr, r7, lr
 8003cce:	6857      	ldr	r7, [r2, #4]
 8003cd0:	3001      	adds	r0, #1
 8003cd2:	ea4e 0707 	orr.w	r7, lr, r7
 8003cd6:	6057      	str	r7, [r2, #4]
 8003cd8:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8003cdc:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8003ce0:	f8c6 e008 	str.w	lr, [r6, #8]
 8003ce4:	3f08      	subs	r7, #8
 8003ce6:	60f7      	str	r7, [r6, #12]
 8003ce8:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8003cec:	e03d      	b.n	8003d6a <_malloc_r+0x1de>
 8003cee:	0a42      	lsrs	r2, r0, #9
 8003cf0:	2a04      	cmp	r2, #4
 8003cf2:	d802      	bhi.n	8003cfa <_malloc_r+0x16e>
 8003cf4:	0982      	lsrs	r2, r0, #6
 8003cf6:	3238      	adds	r2, #56	; 0x38
 8003cf8:	e015      	b.n	8003d26 <_malloc_r+0x19a>
 8003cfa:	2a14      	cmp	r2, #20
 8003cfc:	d801      	bhi.n	8003d02 <_malloc_r+0x176>
 8003cfe:	325b      	adds	r2, #91	; 0x5b
 8003d00:	e011      	b.n	8003d26 <_malloc_r+0x19a>
 8003d02:	2a54      	cmp	r2, #84	; 0x54
 8003d04:	d802      	bhi.n	8003d0c <_malloc_r+0x180>
 8003d06:	0b02      	lsrs	r2, r0, #12
 8003d08:	326e      	adds	r2, #110	; 0x6e
 8003d0a:	e00c      	b.n	8003d26 <_malloc_r+0x19a>
 8003d0c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8003d10:	d802      	bhi.n	8003d18 <_malloc_r+0x18c>
 8003d12:	0bc2      	lsrs	r2, r0, #15
 8003d14:	3277      	adds	r2, #119	; 0x77
 8003d16:	e006      	b.n	8003d26 <_malloc_r+0x19a>
 8003d18:	f240 5754 	movw	r7, #1364	; 0x554
 8003d1c:	42ba      	cmp	r2, r7
 8003d1e:	bf9a      	itte	ls
 8003d20:	0c82      	lsrls	r2, r0, #18
 8003d22:	327c      	addls	r2, #124	; 0x7c
 8003d24:	227e      	movhi	r2, #126	; 0x7e
 8003d26:	1c57      	adds	r7, r2, #1
 8003d28:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8003d2c:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8003d30:	f8df c104 	ldr.w	ip, [pc, #260]	; 8003e38 <_malloc_r+0x2ac>
 8003d34:	45be      	cmp	lr, r7
 8003d36:	d10d      	bne.n	8003d54 <_malloc_r+0x1c8>
 8003d38:	2001      	movs	r0, #1
 8003d3a:	1092      	asrs	r2, r2, #2
 8003d3c:	fa00 f202 	lsl.w	r2, r0, r2
 8003d40:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8003d44:	4310      	orrs	r0, r2
 8003d46:	f8cc 0004 	str.w	r0, [ip, #4]
 8003d4a:	4672      	mov	r2, lr
 8003d4c:	e009      	b.n	8003d62 <_malloc_r+0x1d6>
 8003d4e:	68bf      	ldr	r7, [r7, #8]
 8003d50:	45be      	cmp	lr, r7
 8003d52:	d004      	beq.n	8003d5e <_malloc_r+0x1d2>
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	f022 0203 	bic.w	r2, r2, #3
 8003d5a:	4290      	cmp	r0, r2
 8003d5c:	d3f7      	bcc.n	8003d4e <_malloc_r+0x1c2>
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	46be      	mov	lr, r7
 8003d62:	60f2      	str	r2, [r6, #12]
 8003d64:	f8c6 e008 	str.w	lr, [r6, #8]
 8003d68:	6096      	str	r6, [r2, #8]
 8003d6a:	f8ce 600c 	str.w	r6, [lr, #12]
 8003d6e:	2001      	movs	r0, #1
 8003d70:	109a      	asrs	r2, r3, #2
 8003d72:	fa00 f202 	lsl.w	r2, r0, r2
 8003d76:	6868      	ldr	r0, [r5, #4]
 8003d78:	4282      	cmp	r2, r0
 8003d7a:	d85f      	bhi.n	8003e3c <_malloc_r+0x2b0>
 8003d7c:	4202      	tst	r2, r0
 8003d7e:	d106      	bne.n	8003d8e <_malloc_r+0x202>
 8003d80:	f023 0303 	bic.w	r3, r3, #3
 8003d84:	0052      	lsls	r2, r2, #1
 8003d86:	4202      	tst	r2, r0
 8003d88:	f103 0304 	add.w	r3, r3, #4
 8003d8c:	d0fa      	beq.n	8003d84 <_malloc_r+0x1f8>
 8003d8e:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 8003d92:	46c2      	mov	sl, r8
 8003d94:	469c      	mov	ip, r3
 8003d96:	f8da 600c 	ldr.w	r6, [sl, #12]
 8003d9a:	4556      	cmp	r6, sl
 8003d9c:	d02c      	beq.n	8003df8 <_malloc_r+0x26c>
 8003d9e:	6870      	ldr	r0, [r6, #4]
 8003da0:	68f7      	ldr	r7, [r6, #12]
 8003da2:	f020 0003 	bic.w	r0, r0, #3
 8003da6:	ebc4 0e00 	rsb	lr, r4, r0
 8003daa:	f1be 0f0f 	cmp.w	lr, #15
 8003dae:	dd11      	ble.n	8003dd4 <_malloc_r+0x248>
 8003db0:	1933      	adds	r3, r6, r4
 8003db2:	f044 0401 	orr.w	r4, r4, #1
 8003db6:	6074      	str	r4, [r6, #4]
 8003db8:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8003dbc:	60d7      	str	r7, [r2, #12]
 8003dbe:	60ba      	str	r2, [r7, #8]
 8003dc0:	f04e 0201 	orr.w	r2, lr, #1
 8003dc4:	616b      	str	r3, [r5, #20]
 8003dc6:	612b      	str	r3, [r5, #16]
 8003dc8:	60d9      	str	r1, [r3, #12]
 8003dca:	6099      	str	r1, [r3, #8]
 8003dcc:	605a      	str	r2, [r3, #4]
 8003dce:	f843 e00e 	str.w	lr, [r3, lr]
 8003dd2:	e00b      	b.n	8003dec <_malloc_r+0x260>
 8003dd4:	f1be 0f00 	cmp.w	lr, #0
 8003dd8:	db0c      	blt.n	8003df4 <_malloc_r+0x268>
 8003dda:	1833      	adds	r3, r6, r0
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	605a      	str	r2, [r3, #4]
 8003de4:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8003de8:	60df      	str	r7, [r3, #12]
 8003dea:	60bb      	str	r3, [r7, #8]
 8003dec:	4648      	mov	r0, r9
 8003dee:	f000 f8f6 	bl	8003fde <__malloc_unlock>
 8003df2:	e0d8      	b.n	8003fa6 <_malloc_r+0x41a>
 8003df4:	463e      	mov	r6, r7
 8003df6:	e7d0      	b.n	8003d9a <_malloc_r+0x20e>
 8003df8:	f10c 0c01 	add.w	ip, ip, #1
 8003dfc:	f01c 0f03 	tst.w	ip, #3
 8003e00:	f10a 0a08 	add.w	sl, sl, #8
 8003e04:	d1c7      	bne.n	8003d96 <_malloc_r+0x20a>
 8003e06:	0798      	lsls	r0, r3, #30
 8003e08:	d104      	bne.n	8003e14 <_malloc_r+0x288>
 8003e0a:	686b      	ldr	r3, [r5, #4]
 8003e0c:	ea23 0302 	bic.w	r3, r3, r2
 8003e10:	606b      	str	r3, [r5, #4]
 8003e12:	e005      	b.n	8003e20 <_malloc_r+0x294>
 8003e14:	f858 0908 	ldr.w	r0, [r8], #-8
 8003e18:	4580      	cmp	r8, r0
 8003e1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8003e1e:	d0f2      	beq.n	8003e06 <_malloc_r+0x27a>
 8003e20:	6868      	ldr	r0, [r5, #4]
 8003e22:	0052      	lsls	r2, r2, #1
 8003e24:	4282      	cmp	r2, r0
 8003e26:	d809      	bhi.n	8003e3c <_malloc_r+0x2b0>
 8003e28:	b142      	cbz	r2, 8003e3c <_malloc_r+0x2b0>
 8003e2a:	4663      	mov	r3, ip
 8003e2c:	4202      	tst	r2, r0
 8003e2e:	d1ae      	bne.n	8003d8e <_malloc_r+0x202>
 8003e30:	3304      	adds	r3, #4
 8003e32:	0052      	lsls	r2, r2, #1
 8003e34:	e7fa      	b.n	8003e2c <_malloc_r+0x2a0>
 8003e36:	bf00      	nop
 8003e38:	20000004 	.word	0x20000004
 8003e3c:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8003e40:	f8db 6004 	ldr.w	r6, [fp, #4]
 8003e44:	f026 0603 	bic.w	r6, r6, #3
 8003e48:	42b4      	cmp	r4, r6
 8003e4a:	d803      	bhi.n	8003e54 <_malloc_r+0x2c8>
 8003e4c:	1b33      	subs	r3, r6, r4
 8003e4e:	2b0f      	cmp	r3, #15
 8003e50:	f300 809c 	bgt.w	8003f8c <_malloc_r+0x400>
 8003e54:	4a56      	ldr	r2, [pc, #344]	; (8003fb0 <_malloc_r+0x424>)
 8003e56:	4957      	ldr	r1, [pc, #348]	; (8003fb4 <_malloc_r+0x428>)
 8003e58:	6812      	ldr	r2, [r2, #0]
 8003e5a:	6808      	ldr	r0, [r1, #0]
 8003e5c:	9101      	str	r1, [sp, #4]
 8003e5e:	f102 0810 	add.w	r8, r2, #16
 8003e62:	4a55      	ldr	r2, [pc, #340]	; (8003fb8 <_malloc_r+0x42c>)
 8003e64:	9203      	str	r2, [sp, #12]
 8003e66:	3001      	adds	r0, #1
 8003e68:	bf18      	it	ne
 8003e6a:	f102 31ff 	addne.w	r1, r2, #4294967295
 8003e6e:	44a0      	add	r8, r4
 8003e70:	bf1e      	ittt	ne
 8003e72:	4488      	addne	r8, r1
 8003e74:	4251      	negne	r1, r2
 8003e76:	ea01 0808 	andne.w	r8, r1, r8
 8003e7a:	eb0b 0306 	add.w	r3, fp, r6
 8003e7e:	4641      	mov	r1, r8
 8003e80:	4648      	mov	r0, r9
 8003e82:	9302      	str	r3, [sp, #8]
 8003e84:	f000 f918 	bl	80040b8 <_sbrk_r>
 8003e88:	1c42      	adds	r2, r0, #1
 8003e8a:	4607      	mov	r7, r0
 8003e8c:	d06f      	beq.n	8003f6e <_malloc_r+0x3e2>
 8003e8e:	9b02      	ldr	r3, [sp, #8]
 8003e90:	9a03      	ldr	r2, [sp, #12]
 8003e92:	4283      	cmp	r3, r0
 8003e94:	d901      	bls.n	8003e9a <_malloc_r+0x30e>
 8003e96:	45ab      	cmp	fp, r5
 8003e98:	d169      	bne.n	8003f6e <_malloc_r+0x3e2>
 8003e9a:	f8df a128 	ldr.w	sl, [pc, #296]	; 8003fc4 <_malloc_r+0x438>
 8003e9e:	f8df c128 	ldr.w	ip, [pc, #296]	; 8003fc8 <_malloc_r+0x43c>
 8003ea2:	f8da 0000 	ldr.w	r0, [sl]
 8003ea6:	42bb      	cmp	r3, r7
 8003ea8:	4440      	add	r0, r8
 8003eaa:	f8ca 0000 	str.w	r0, [sl]
 8003eae:	d108      	bne.n	8003ec2 <_malloc_r+0x336>
 8003eb0:	ea13 0f0c 	tst.w	r3, ip
 8003eb4:	d105      	bne.n	8003ec2 <_malloc_r+0x336>
 8003eb6:	68ab      	ldr	r3, [r5, #8]
 8003eb8:	4446      	add	r6, r8
 8003eba:	f046 0601 	orr.w	r6, r6, #1
 8003ebe:	605e      	str	r6, [r3, #4]
 8003ec0:	e049      	b.n	8003f56 <_malloc_r+0x3ca>
 8003ec2:	9901      	ldr	r1, [sp, #4]
 8003ec4:	f8d1 e000 	ldr.w	lr, [r1]
 8003ec8:	f1be 3fff 	cmp.w	lr, #4294967295
 8003ecc:	bf15      	itete	ne
 8003ece:	1afb      	subne	r3, r7, r3
 8003ed0:	4b38      	ldreq	r3, [pc, #224]	; (8003fb4 <_malloc_r+0x428>)
 8003ed2:	181b      	addne	r3, r3, r0
 8003ed4:	601f      	streq	r7, [r3, #0]
 8003ed6:	bf18      	it	ne
 8003ed8:	f8ca 3000 	strne.w	r3, [sl]
 8003edc:	f017 0307 	ands.w	r3, r7, #7
 8003ee0:	bf1c      	itt	ne
 8003ee2:	f1c3 0308 	rsbne	r3, r3, #8
 8003ee6:	18ff      	addne	r7, r7, r3
 8003ee8:	44b8      	add	r8, r7
 8003eea:	441a      	add	r2, r3
 8003eec:	ea08 080c 	and.w	r8, r8, ip
 8003ef0:	ebc8 0802 	rsb	r8, r8, r2
 8003ef4:	4641      	mov	r1, r8
 8003ef6:	4648      	mov	r0, r9
 8003ef8:	f000 f8de 	bl	80040b8 <_sbrk_r>
 8003efc:	1c43      	adds	r3, r0, #1
 8003efe:	bf04      	itt	eq
 8003f00:	4638      	moveq	r0, r7
 8003f02:	f04f 0800 	moveq.w	r8, #0
 8003f06:	f8da 3000 	ldr.w	r3, [sl]
 8003f0a:	60af      	str	r7, [r5, #8]
 8003f0c:	1bc2      	subs	r2, r0, r7
 8003f0e:	4442      	add	r2, r8
 8003f10:	4443      	add	r3, r8
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	45ab      	cmp	fp, r5
 8003f18:	f8ca 3000 	str.w	r3, [sl]
 8003f1c:	607a      	str	r2, [r7, #4]
 8003f1e:	d01a      	beq.n	8003f56 <_malloc_r+0x3ca>
 8003f20:	2e0f      	cmp	r6, #15
 8003f22:	d802      	bhi.n	8003f2a <_malloc_r+0x39e>
 8003f24:	2301      	movs	r3, #1
 8003f26:	607b      	str	r3, [r7, #4]
 8003f28:	e021      	b.n	8003f6e <_malloc_r+0x3e2>
 8003f2a:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003f2e:	3e0c      	subs	r6, #12
 8003f30:	f026 0607 	bic.w	r6, r6, #7
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	4333      	orrs	r3, r6
 8003f3a:	f8cb 3004 	str.w	r3, [fp, #4]
 8003f3e:	eb0b 0306 	add.w	r3, fp, r6
 8003f42:	2205      	movs	r2, #5
 8003f44:	2e0f      	cmp	r6, #15
 8003f46:	605a      	str	r2, [r3, #4]
 8003f48:	609a      	str	r2, [r3, #8]
 8003f4a:	d904      	bls.n	8003f56 <_malloc_r+0x3ca>
 8003f4c:	f10b 0108 	add.w	r1, fp, #8
 8003f50:	4648      	mov	r0, r9
 8003f52:	f004 f90f 	bl	8008174 <_free_r>
 8003f56:	4a19      	ldr	r2, [pc, #100]	; (8003fbc <_malloc_r+0x430>)
 8003f58:	f8da 3000 	ldr.w	r3, [sl]
 8003f5c:	6811      	ldr	r1, [r2, #0]
 8003f5e:	428b      	cmp	r3, r1
 8003f60:	bf88      	it	hi
 8003f62:	6013      	strhi	r3, [r2, #0]
 8003f64:	4a16      	ldr	r2, [pc, #88]	; (8003fc0 <_malloc_r+0x434>)
 8003f66:	6811      	ldr	r1, [r2, #0]
 8003f68:	428b      	cmp	r3, r1
 8003f6a:	bf88      	it	hi
 8003f6c:	6013      	strhi	r3, [r2, #0]
 8003f6e:	68ab      	ldr	r3, [r5, #8]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	f022 0203 	bic.w	r2, r2, #3
 8003f76:	4294      	cmp	r4, r2
 8003f78:	eba2 0304 	sub.w	r3, r2, r4
 8003f7c:	d801      	bhi.n	8003f82 <_malloc_r+0x3f6>
 8003f7e:	2b0f      	cmp	r3, #15
 8003f80:	dc04      	bgt.n	8003f8c <_malloc_r+0x400>
 8003f82:	4648      	mov	r0, r9
 8003f84:	f000 f82b 	bl	8003fde <__malloc_unlock>
 8003f88:	2600      	movs	r6, #0
 8003f8a:	e00c      	b.n	8003fa6 <_malloc_r+0x41a>
 8003f8c:	68ae      	ldr	r6, [r5, #8]
 8003f8e:	f044 0201 	orr.w	r2, r4, #1
 8003f92:	4434      	add	r4, r6
 8003f94:	f043 0301 	orr.w	r3, r3, #1
 8003f98:	6072      	str	r2, [r6, #4]
 8003f9a:	60ac      	str	r4, [r5, #8]
 8003f9c:	6063      	str	r3, [r4, #4]
 8003f9e:	4648      	mov	r0, r9
 8003fa0:	f000 f81d 	bl	8003fde <__malloc_unlock>
 8003fa4:	3608      	adds	r6, #8
 8003fa6:	4630      	mov	r0, r6
 8003fa8:	b005      	add	sp, #20
 8003faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000698 	.word	0x20000698
 8003fb4:	20000410 	.word	0x20000410
 8003fb8:	00000080 	.word	0x00000080
 8003fbc:	20000694 	.word	0x20000694
 8003fc0:	20000690 	.word	0x20000690
 8003fc4:	2000069c 	.word	0x2000069c
 8003fc8:	0000007f 	.word	0x0000007f

08003fcc <memset>:
 8003fcc:	4402      	add	r2, r0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d002      	beq.n	8003fda <memset+0xe>
 8003fd4:	f803 1b01 	strb.w	r1, [r3], #1
 8003fd8:	e7fa      	b.n	8003fd0 <memset+0x4>
 8003fda:	4770      	bx	lr

08003fdc <__malloc_lock>:
 8003fdc:	4770      	bx	lr

08003fde <__malloc_unlock>:
 8003fde:	4770      	bx	lr

08003fe0 <printf>:
 8003fe0:	b40f      	push	{r0, r1, r2, r3}
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	; (800400c <printf+0x2c>)
 8003fe4:	b513      	push	{r0, r1, r4, lr}
 8003fe6:	681c      	ldr	r4, [r3, #0]
 8003fe8:	b124      	cbz	r4, 8003ff4 <printf+0x14>
 8003fea:	69a3      	ldr	r3, [r4, #24]
 8003fec:	b913      	cbnz	r3, 8003ff4 <printf+0x14>
 8003fee:	4620      	mov	r0, r4
 8003ff0:	f003 fff8 	bl	8007fe4 <__sinit>
 8003ff4:	ab05      	add	r3, sp, #20
 8003ff6:	9a04      	ldr	r2, [sp, #16]
 8003ff8:	68a1      	ldr	r1, [r4, #8]
 8003ffa:	9301      	str	r3, [sp, #4]
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	f002 f827 	bl	8006050 <_vfprintf_r>
 8004002:	b002      	add	sp, #8
 8004004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004008:	b004      	add	sp, #16
 800400a:	4770      	bx	lr
 800400c:	20000508 	.word	0x20000508

08004010 <_puts_r>:
 8004010:	b530      	push	{r4, r5, lr}
 8004012:	4605      	mov	r5, r0
 8004014:	b089      	sub	sp, #36	; 0x24
 8004016:	4608      	mov	r0, r1
 8004018:	460c      	mov	r4, r1
 800401a:	f7fc f8e3 	bl	80001e4 <strlen>
 800401e:	4b1e      	ldr	r3, [pc, #120]	; (8004098 <_puts_r+0x88>)
 8004020:	9306      	str	r3, [sp, #24]
 8004022:	2301      	movs	r3, #1
 8004024:	9005      	str	r0, [sp, #20]
 8004026:	9307      	str	r3, [sp, #28]
 8004028:	4418      	add	r0, r3
 800402a:	ab04      	add	r3, sp, #16
 800402c:	9301      	str	r3, [sp, #4]
 800402e:	2302      	movs	r3, #2
 8004030:	9404      	str	r4, [sp, #16]
 8004032:	9003      	str	r0, [sp, #12]
 8004034:	9302      	str	r3, [sp, #8]
 8004036:	b125      	cbz	r5, 8004042 <_puts_r+0x32>
 8004038:	69ab      	ldr	r3, [r5, #24]
 800403a:	b913      	cbnz	r3, 8004042 <_puts_r+0x32>
 800403c:	4628      	mov	r0, r5
 800403e:	f003 ffd1 	bl	8007fe4 <__sinit>
 8004042:	69ab      	ldr	r3, [r5, #24]
 8004044:	68ac      	ldr	r4, [r5, #8]
 8004046:	b913      	cbnz	r3, 800404e <_puts_r+0x3e>
 8004048:	4628      	mov	r0, r5
 800404a:	f003 ffcb 	bl	8007fe4 <__sinit>
 800404e:	4b13      	ldr	r3, [pc, #76]	; (800409c <_puts_r+0x8c>)
 8004050:	429c      	cmp	r4, r3
 8004052:	d101      	bne.n	8004058 <_puts_r+0x48>
 8004054:	686c      	ldr	r4, [r5, #4]
 8004056:	e008      	b.n	800406a <_puts_r+0x5a>
 8004058:	4b11      	ldr	r3, [pc, #68]	; (80040a0 <_puts_r+0x90>)
 800405a:	429c      	cmp	r4, r3
 800405c:	d101      	bne.n	8004062 <_puts_r+0x52>
 800405e:	68ac      	ldr	r4, [r5, #8]
 8004060:	e003      	b.n	800406a <_puts_r+0x5a>
 8004062:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <_puts_r+0x94>)
 8004064:	429c      	cmp	r4, r3
 8004066:	bf08      	it	eq
 8004068:	68ec      	ldreq	r4, [r5, #12]
 800406a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800406e:	049a      	lsls	r2, r3, #18
 8004070:	d406      	bmi.n	8004080 <_puts_r+0x70>
 8004072:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004074:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004078:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800407c:	81a3      	strh	r3, [r4, #12]
 800407e:	6662      	str	r2, [r4, #100]	; 0x64
 8004080:	aa01      	add	r2, sp, #4
 8004082:	4621      	mov	r1, r4
 8004084:	4628      	mov	r0, r5
 8004086:	f004 f933 	bl	80082f0 <__sfvwrite_r>
 800408a:	2800      	cmp	r0, #0
 800408c:	bf14      	ite	ne
 800408e:	f04f 30ff 	movne.w	r0, #4294967295
 8004092:	200a      	moveq	r0, #10
 8004094:	b009      	add	sp, #36	; 0x24
 8004096:	bd30      	pop	{r4, r5, pc}
 8004098:	08009e60 	.word	0x08009e60
 800409c:	0800a134 	.word	0x0800a134
 80040a0:	0800a154 	.word	0x0800a154
 80040a4:	0800a174 	.word	0x0800a174

080040a8 <puts>:
 80040a8:	4b02      	ldr	r3, [pc, #8]	; (80040b4 <puts+0xc>)
 80040aa:	4601      	mov	r1, r0
 80040ac:	6818      	ldr	r0, [r3, #0]
 80040ae:	f7ff bfaf 	b.w	8004010 <_puts_r>
 80040b2:	bf00      	nop
 80040b4:	20000508 	.word	0x20000508

080040b8 <_sbrk_r>:
 80040b8:	b538      	push	{r3, r4, r5, lr}
 80040ba:	4c06      	ldr	r4, [pc, #24]	; (80040d4 <_sbrk_r+0x1c>)
 80040bc:	2300      	movs	r3, #0
 80040be:	4605      	mov	r5, r0
 80040c0:	4608      	mov	r0, r1
 80040c2:	6023      	str	r3, [r4, #0]
 80040c4:	f7ff fca6 	bl	8003a14 <_sbrk>
 80040c8:	1c43      	adds	r3, r0, #1
 80040ca:	d102      	bne.n	80040d2 <_sbrk_r+0x1a>
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	b103      	cbz	r3, 80040d2 <_sbrk_r+0x1a>
 80040d0:	602b      	str	r3, [r5, #0]
 80040d2:	bd38      	pop	{r3, r4, r5, pc}
 80040d4:	200007dc 	.word	0x200007dc

080040d8 <snprintf>:
 80040d8:	b40c      	push	{r2, r3}
 80040da:	b530      	push	{r4, r5, lr}
 80040dc:	4b16      	ldr	r3, [pc, #88]	; (8004138 <snprintf+0x60>)
 80040de:	1e0c      	subs	r4, r1, #0
 80040e0:	b09d      	sub	sp, #116	; 0x74
 80040e2:	681d      	ldr	r5, [r3, #0]
 80040e4:	da04      	bge.n	80040f0 <snprintf+0x18>
 80040e6:	238b      	movs	r3, #139	; 0x8b
 80040e8:	602b      	str	r3, [r5, #0]
 80040ea:	f04f 30ff 	mov.w	r0, #4294967295
 80040ee:	e01e      	b.n	800412e <snprintf+0x56>
 80040f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80040f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80040f8:	bf14      	ite	ne
 80040fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80040fe:	4623      	moveq	r3, r4
 8004100:	9304      	str	r3, [sp, #16]
 8004102:	9307      	str	r3, [sp, #28]
 8004104:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004108:	9002      	str	r0, [sp, #8]
 800410a:	9006      	str	r0, [sp, #24]
 800410c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004110:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004112:	ab21      	add	r3, sp, #132	; 0x84
 8004114:	a902      	add	r1, sp, #8
 8004116:	4628      	mov	r0, r5
 8004118:	9301      	str	r3, [sp, #4]
 800411a:	f000 ffd5 	bl	80050c8 <_svfprintf_r>
 800411e:	1c43      	adds	r3, r0, #1
 8004120:	bfbc      	itt	lt
 8004122:	238b      	movlt	r3, #139	; 0x8b
 8004124:	602b      	strlt	r3, [r5, #0]
 8004126:	b114      	cbz	r4, 800412e <snprintf+0x56>
 8004128:	9b02      	ldr	r3, [sp, #8]
 800412a:	2200      	movs	r2, #0
 800412c:	701a      	strb	r2, [r3, #0]
 800412e:	b01d      	add	sp, #116	; 0x74
 8004130:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004134:	b002      	add	sp, #8
 8004136:	4770      	bx	lr
 8004138:	20000508 	.word	0x20000508

0800413c <strcpy>:
 800413c:	4603      	mov	r3, r0
 800413e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004142:	f803 2b01 	strb.w	r2, [r3], #1
 8004146:	2a00      	cmp	r2, #0
 8004148:	d1f9      	bne.n	800413e <strcpy+0x2>
 800414a:	4770      	bx	lr

0800414c <strncpy>:
 800414c:	b510      	push	{r4, lr}
 800414e:	4603      	mov	r3, r0
 8004150:	b142      	cbz	r2, 8004164 <strncpy+0x18>
 8004152:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004156:	f803 4b01 	strb.w	r4, [r3], #1
 800415a:	3a01      	subs	r2, #1
 800415c:	2c00      	cmp	r4, #0
 800415e:	d1f7      	bne.n	8004150 <strncpy+0x4>
 8004160:	441a      	add	r2, r3
 8004162:	e000      	b.n	8004166 <strncpy+0x1a>
 8004164:	bd10      	pop	{r4, pc}
 8004166:	4293      	cmp	r3, r2
 8004168:	d002      	beq.n	8004170 <strncpy+0x24>
 800416a:	f803 4b01 	strb.w	r4, [r3], #1
 800416e:	e7fa      	b.n	8004166 <strncpy+0x1a>
 8004170:	bd10      	pop	{r4, pc}

08004172 <sulp>:
 8004172:	b570      	push	{r4, r5, r6, lr}
 8004174:	4604      	mov	r4, r0
 8004176:	460d      	mov	r5, r1
 8004178:	ec45 4b10 	vmov	d0, r4, r5
 800417c:	4616      	mov	r6, r2
 800417e:	f005 f89f 	bl	80092c0 <__ulp>
 8004182:	ec51 0b10 	vmov	r0, r1, d0
 8004186:	b17e      	cbz	r6, 80041a8 <sulp+0x36>
 8004188:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800418c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004190:	2b00      	cmp	r3, #0
 8004192:	dd09      	ble.n	80041a8 <sulp+0x36>
 8004194:	051b      	lsls	r3, r3, #20
 8004196:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800419a:	2400      	movs	r4, #0
 800419c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80041a0:	4622      	mov	r2, r4
 80041a2:	462b      	mov	r3, r5
 80041a4:	f7fc fa34 	bl	8000610 <__aeabi_dmul>
 80041a8:	bd70      	pop	{r4, r5, r6, pc}
 80041aa:	0000      	movs	r0, r0
 80041ac:	0000      	movs	r0, r0
	...

080041b0 <_strtod_r>:
 80041b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b4:	b09d      	sub	sp, #116	; 0x74
 80041b6:	2300      	movs	r3, #0
 80041b8:	9002      	str	r0, [sp, #8]
 80041ba:	460c      	mov	r4, r1
 80041bc:	9213      	str	r2, [sp, #76]	; 0x4c
 80041be:	9318      	str	r3, [sp, #96]	; 0x60
 80041c0:	f04f 0a00 	mov.w	sl, #0
 80041c4:	f04f 0b00 	mov.w	fp, #0
 80041c8:	9117      	str	r1, [sp, #92]	; 0x5c
 80041ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80041cc:	781a      	ldrb	r2, [r3, #0]
 80041ce:	2a0d      	cmp	r2, #13
 80041d0:	d805      	bhi.n	80041de <_strtod_r+0x2e>
 80041d2:	2a09      	cmp	r2, #9
 80041d4:	d213      	bcs.n	80041fe <_strtod_r+0x4e>
 80041d6:	2a00      	cmp	r2, #0
 80041d8:	f000 81ac 	beq.w	8004534 <_strtod_r+0x384>
 80041dc:	e012      	b.n	8004204 <_strtod_r+0x54>
 80041de:	2a2b      	cmp	r2, #43	; 0x2b
 80041e0:	d004      	beq.n	80041ec <_strtod_r+0x3c>
 80041e2:	2a2d      	cmp	r2, #45	; 0x2d
 80041e4:	d004      	beq.n	80041f0 <_strtod_r+0x40>
 80041e6:	2a20      	cmp	r2, #32
 80041e8:	d10c      	bne.n	8004204 <_strtod_r+0x54>
 80041ea:	e008      	b.n	80041fe <_strtod_r+0x4e>
 80041ec:	2200      	movs	r2, #0
 80041ee:	e000      	b.n	80041f2 <_strtod_r+0x42>
 80041f0:	2201      	movs	r2, #1
 80041f2:	920c      	str	r2, [sp, #48]	; 0x30
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	9217      	str	r2, [sp, #92]	; 0x5c
 80041f8:	785b      	ldrb	r3, [r3, #1]
 80041fa:	b92b      	cbnz	r3, 8004208 <_strtod_r+0x58>
 80041fc:	e19a      	b.n	8004534 <_strtod_r+0x384>
 80041fe:	3301      	adds	r3, #1
 8004200:	9317      	str	r3, [sp, #92]	; 0x5c
 8004202:	e7e2      	b.n	80041ca <_strtod_r+0x1a>
 8004204:	2300      	movs	r3, #0
 8004206:	930c      	str	r3, [sp, #48]	; 0x30
 8004208:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800420a:	782b      	ldrb	r3, [r5, #0]
 800420c:	2b30      	cmp	r3, #48	; 0x30
 800420e:	d15c      	bne.n	80042ca <_strtod_r+0x11a>
 8004210:	786b      	ldrb	r3, [r5, #1]
 8004212:	2b58      	cmp	r3, #88	; 0x58
 8004214:	d001      	beq.n	800421a <_strtod_r+0x6a>
 8004216:	2b78      	cmp	r3, #120	; 0x78
 8004218:	d14c      	bne.n	80042b4 <_strtod_r+0x104>
 800421a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800421c:	9301      	str	r3, [sp, #4]
 800421e:	ab18      	add	r3, sp, #96	; 0x60
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	4aa9      	ldr	r2, [pc, #676]	; (80044c8 <_strtod_r+0x318>)
 8004224:	9802      	ldr	r0, [sp, #8]
 8004226:	ab19      	add	r3, sp, #100	; 0x64
 8004228:	a917      	add	r1, sp, #92	; 0x5c
 800422a:	f004 fa14 	bl	8008656 <__gethex>
 800422e:	f010 0607 	ands.w	r6, r0, #7
 8004232:	4604      	mov	r4, r0
 8004234:	f000 8587 	beq.w	8004d46 <_strtod_r+0xb96>
 8004238:	2e06      	cmp	r6, #6
 800423a:	d105      	bne.n	8004248 <_strtod_r+0x98>
 800423c:	3501      	adds	r5, #1
 800423e:	2300      	movs	r3, #0
 8004240:	9517      	str	r5, [sp, #92]	; 0x5c
 8004242:	930c      	str	r3, [sp, #48]	; 0x30
 8004244:	f000 bd7f 	b.w	8004d46 <_strtod_r+0xb96>
 8004248:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800424a:	b13a      	cbz	r2, 800425c <_strtod_r+0xac>
 800424c:	2135      	movs	r1, #53	; 0x35
 800424e:	a81a      	add	r0, sp, #104	; 0x68
 8004250:	f005 f923 	bl	800949a <__copybits>
 8004254:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004256:	9802      	ldr	r0, [sp, #8]
 8004258:	f004 fda1 	bl	8008d9e <_Bfree>
 800425c:	2e06      	cmp	r6, #6
 800425e:	d822      	bhi.n	80042a6 <_strtod_r+0xf6>
 8004260:	e8df f006 	tbb	[pc, r6]
 8004264:	18080d04 	.word	0x18080d04
 8004268:	0d1d      	.short	0x0d1d
 800426a:	04          	.byte	0x04
 800426b:	00          	.byte	0x00
 800426c:	f04f 0b00 	mov.w	fp, #0
 8004270:	46da      	mov	sl, fp
 8004272:	e018      	b.n	80042a6 <_strtod_r+0xf6>
 8004274:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8004278:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 800427c:	e013      	b.n	80042a6 <_strtod_r+0xf6>
 800427e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004280:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004282:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8004286:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800428a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800428e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004292:	e008      	b.n	80042a6 <_strtod_r+0xf6>
 8004294:	f8df b234 	ldr.w	fp, [pc, #564]	; 80044cc <_strtod_r+0x31c>
 8004298:	f04f 0a00 	mov.w	sl, #0
 800429c:	e003      	b.n	80042a6 <_strtod_r+0xf6>
 800429e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80042a2:	f04f 3aff 	mov.w	sl, #4294967295
 80042a6:	0721      	lsls	r1, r4, #28
 80042a8:	f140 854d 	bpl.w	8004d46 <_strtod_r+0xb96>
 80042ac:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80042b0:	f000 bd49 	b.w	8004d46 <_strtod_r+0xb96>
 80042b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80042ba:	785b      	ldrb	r3, [r3, #1]
 80042bc:	2b30      	cmp	r3, #48	; 0x30
 80042be:	d0f9      	beq.n	80042b4 <_strtod_r+0x104>
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 8540 	beq.w	8004d46 <_strtod_r+0xb96>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <_strtod_r+0x11c>
 80042ca:	2300      	movs	r3, #0
 80042cc:	f04f 0800 	mov.w	r8, #0
 80042d0:	9306      	str	r3, [sp, #24]
 80042d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80042d4:	9307      	str	r3, [sp, #28]
 80042d6:	f8cd 8014 	str.w	r8, [sp, #20]
 80042da:	f8cd 8010 	str.w	r8, [sp, #16]
 80042de:	220a      	movs	r2, #10
 80042e0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80042e2:	782e      	ldrb	r6, [r5, #0]
 80042e4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80042e8:	b2d9      	uxtb	r1, r3
 80042ea:	2909      	cmp	r1, #9
 80042ec:	d80e      	bhi.n	800430c <_strtod_r+0x15c>
 80042ee:	9904      	ldr	r1, [sp, #16]
 80042f0:	2908      	cmp	r1, #8
 80042f2:	bfdd      	ittte	le
 80042f4:	9905      	ldrle	r1, [sp, #20]
 80042f6:	fb02 3301 	mlale	r3, r2, r1, r3
 80042fa:	9305      	strle	r3, [sp, #20]
 80042fc:	fb02 3808 	mlagt	r8, r2, r8, r3
 8004300:	9b04      	ldr	r3, [sp, #16]
 8004302:	3501      	adds	r5, #1
 8004304:	3301      	adds	r3, #1
 8004306:	9304      	str	r3, [sp, #16]
 8004308:	9517      	str	r5, [sp, #92]	; 0x5c
 800430a:	e7e9      	b.n	80042e0 <_strtod_r+0x130>
 800430c:	9802      	ldr	r0, [sp, #8]
 800430e:	f004 fc7f 	bl	8008c10 <_localeconv_r>
 8004312:	6807      	ldr	r7, [r0, #0]
 8004314:	9802      	ldr	r0, [sp, #8]
 8004316:	f004 fc7b 	bl	8008c10 <_localeconv_r>
 800431a:	6800      	ldr	r0, [r0, #0]
 800431c:	f7fb ff62 	bl	80001e4 <strlen>
 8004320:	4639      	mov	r1, r7
 8004322:	4602      	mov	r2, r0
 8004324:	4628      	mov	r0, r5
 8004326:	f005 fae0 	bl	80098ea <strncmp>
 800432a:	4607      	mov	r7, r0
 800432c:	b128      	cbz	r0, 800433a <_strtod_r+0x18a>
 800432e:	2000      	movs	r0, #0
 8004330:	4633      	mov	r3, r6
 8004332:	9d04      	ldr	r5, [sp, #16]
 8004334:	4602      	mov	r2, r0
 8004336:	4601      	mov	r1, r0
 8004338:	e057      	b.n	80043ea <_strtod_r+0x23a>
 800433a:	9802      	ldr	r0, [sp, #8]
 800433c:	f004 fc68 	bl	8008c10 <_localeconv_r>
 8004340:	6800      	ldr	r0, [r0, #0]
 8004342:	f7fb ff4f 	bl	80001e4 <strlen>
 8004346:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004348:	181a      	adds	r2, r3, r0
 800434a:	9217      	str	r2, [sp, #92]	; 0x5c
 800434c:	9a04      	ldr	r2, [sp, #16]
 800434e:	5c1b      	ldrb	r3, [r3, r0]
 8004350:	2a00      	cmp	r2, #0
 8004352:	d142      	bne.n	80043da <_strtod_r+0x22a>
 8004354:	4610      	mov	r0, r2
 8004356:	2b30      	cmp	r3, #48	; 0x30
 8004358:	d105      	bne.n	8004366 <_strtod_r+0x1b6>
 800435a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	9217      	str	r2, [sp, #92]	; 0x5c
 8004360:	3001      	adds	r0, #1
 8004362:	785b      	ldrb	r3, [r3, #1]
 8004364:	e7f7      	b.n	8004356 <_strtod_r+0x1a6>
 8004366:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800436a:	2a08      	cmp	r2, #8
 800436c:	d843      	bhi.n	80043f6 <_strtod_r+0x246>
 800436e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004370:	9207      	str	r2, [sp, #28]
 8004372:	4602      	mov	r2, r0
 8004374:	2000      	movs	r0, #0
 8004376:	4605      	mov	r5, r0
 8004378:	3b30      	subs	r3, #48	; 0x30
 800437a:	f100 0101 	add.w	r1, r0, #1
 800437e:	d026      	beq.n	80043ce <_strtod_r+0x21e>
 8004380:	440a      	add	r2, r1
 8004382:	eb05 0c00 	add.w	ip, r5, r0
 8004386:	4629      	mov	r1, r5
 8004388:	260a      	movs	r6, #10
 800438a:	4561      	cmp	r1, ip
 800438c:	d00e      	beq.n	80043ac <_strtod_r+0x1fc>
 800438e:	3101      	adds	r1, #1
 8004390:	f101 3eff 	add.w	lr, r1, #4294967295
 8004394:	f1be 0f08 	cmp.w	lr, #8
 8004398:	dc03      	bgt.n	80043a2 <_strtod_r+0x1f2>
 800439a:	9f05      	ldr	r7, [sp, #20]
 800439c:	4377      	muls	r7, r6
 800439e:	9705      	str	r7, [sp, #20]
 80043a0:	e7f3      	b.n	800438a <_strtod_r+0x1da>
 80043a2:	2910      	cmp	r1, #16
 80043a4:	bfd8      	it	le
 80043a6:	fb06 f808 	mulle.w	r8, r6, r8
 80043aa:	e7ee      	b.n	800438a <_strtod_r+0x1da>
 80043ac:	4428      	add	r0, r5
 80043ae:	2808      	cmp	r0, #8
 80043b0:	f100 0501 	add.w	r5, r0, #1
 80043b4:	dc05      	bgt.n	80043c2 <_strtod_r+0x212>
 80043b6:	9805      	ldr	r0, [sp, #20]
 80043b8:	210a      	movs	r1, #10
 80043ba:	fb01 3300 	mla	r3, r1, r0, r3
 80043be:	9305      	str	r3, [sp, #20]
 80043c0:	e004      	b.n	80043cc <_strtod_r+0x21c>
 80043c2:	2d10      	cmp	r5, #16
 80043c4:	bfdc      	itt	le
 80043c6:	210a      	movle	r1, #10
 80043c8:	fb01 3808 	mlale	r8, r1, r8, r3
 80043cc:	2100      	movs	r1, #0
 80043ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80043d0:	1c58      	adds	r0, r3, #1
 80043d2:	9017      	str	r0, [sp, #92]	; 0x5c
 80043d4:	785b      	ldrb	r3, [r3, #1]
 80043d6:	4608      	mov	r0, r1
 80043d8:	e002      	b.n	80043e0 <_strtod_r+0x230>
 80043da:	9d04      	ldr	r5, [sp, #16]
 80043dc:	4638      	mov	r0, r7
 80043de:	463a      	mov	r2, r7
 80043e0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80043e4:	2909      	cmp	r1, #9
 80043e6:	d9c7      	bls.n	8004378 <_strtod_r+0x1c8>
 80043e8:	2101      	movs	r1, #1
 80043ea:	2b65      	cmp	r3, #101	; 0x65
 80043ec:	d001      	beq.n	80043f2 <_strtod_r+0x242>
 80043ee:	2b45      	cmp	r3, #69	; 0x45
 80043f0:	d151      	bne.n	8004496 <_strtod_r+0x2e6>
 80043f2:	b96d      	cbnz	r5, 8004410 <_strtod_r+0x260>
 80043f4:	e004      	b.n	8004400 <_strtod_r+0x250>
 80043f6:	2b65      	cmp	r3, #101	; 0x65
 80043f8:	f040 84b3 	bne.w	8004d62 <_strtod_r+0xbb2>
 80043fc:	2200      	movs	r2, #0
 80043fe:	2101      	movs	r1, #1
 8004400:	b928      	cbnz	r0, 800440e <_strtod_r+0x25e>
 8004402:	9b06      	ldr	r3, [sp, #24]
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 8095 	beq.w	8004534 <_strtod_r+0x384>
 800440a:	4605      	mov	r5, r0
 800440c:	e000      	b.n	8004410 <_strtod_r+0x260>
 800440e:	2500      	movs	r5, #0
 8004410:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8004412:	1c63      	adds	r3, r4, #1
 8004414:	9317      	str	r3, [sp, #92]	; 0x5c
 8004416:	7863      	ldrb	r3, [r4, #1]
 8004418:	2b2b      	cmp	r3, #43	; 0x2b
 800441a:	d006      	beq.n	800442a <_strtod_r+0x27a>
 800441c:	2b2d      	cmp	r3, #45	; 0x2d
 800441e:	d002      	beq.n	8004426 <_strtod_r+0x276>
 8004420:	2600      	movs	r6, #0
 8004422:	9603      	str	r6, [sp, #12]
 8004424:	e006      	b.n	8004434 <_strtod_r+0x284>
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <_strtod_r+0x27c>
 800442a:	2300      	movs	r3, #0
 800442c:	9303      	str	r3, [sp, #12]
 800442e:	1ca3      	adds	r3, r4, #2
 8004430:	9317      	str	r3, [sp, #92]	; 0x5c
 8004432:	78a3      	ldrb	r3, [r4, #2]
 8004434:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8004438:	2e09      	cmp	r6, #9
 800443a:	d82b      	bhi.n	8004494 <_strtod_r+0x2e4>
 800443c:	2b30      	cmp	r3, #48	; 0x30
 800443e:	d104      	bne.n	800444a <_strtod_r+0x29a>
 8004440:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004442:	1c5e      	adds	r6, r3, #1
 8004444:	9617      	str	r6, [sp, #92]	; 0x5c
 8004446:	785b      	ldrb	r3, [r3, #1]
 8004448:	e7f8      	b.n	800443c <_strtod_r+0x28c>
 800444a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 800444e:	2e08      	cmp	r6, #8
 8004450:	d821      	bhi.n	8004496 <_strtod_r+0x2e6>
 8004452:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004456:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004458:	f04f 0c0a 	mov.w	ip, #10
 800445c:	461f      	mov	r7, r3
 800445e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004460:	1c5e      	adds	r6, r3, #1
 8004462:	9617      	str	r6, [sp, #92]	; 0x5c
 8004464:	785b      	ldrb	r3, [r3, #1]
 8004466:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
 800446a:	f1b9 0f09 	cmp.w	r9, #9
 800446e:	d804      	bhi.n	800447a <_strtod_r+0x2ca>
 8004470:	fb0c 3e0e 	mla	lr, ip, lr, r3
 8004474:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004478:	e7f1      	b.n	800445e <_strtod_r+0x2ae>
 800447a:	1bf6      	subs	r6, r6, r7
 800447c:	2e08      	cmp	r6, #8
 800447e:	f644 691f 	movw	r9, #19999	; 0x4e1f
 8004482:	dc02      	bgt.n	800448a <_strtod_r+0x2da>
 8004484:	45f1      	cmp	r9, lr
 8004486:	bfa8      	it	ge
 8004488:	46f1      	movge	r9, lr
 800448a:	9e03      	ldr	r6, [sp, #12]
 800448c:	b12e      	cbz	r6, 800449a <_strtod_r+0x2ea>
 800448e:	f1c9 0900 	rsb	r9, r9, #0
 8004492:	e002      	b.n	800449a <_strtod_r+0x2ea>
 8004494:	9417      	str	r4, [sp, #92]	; 0x5c
 8004496:	f04f 0900 	mov.w	r9, #0
 800449a:	2d00      	cmp	r5, #0
 800449c:	d153      	bne.n	8004546 <_strtod_r+0x396>
 800449e:	2800      	cmp	r0, #0
 80044a0:	f040 8451 	bne.w	8004d46 <_strtod_r+0xb96>
 80044a4:	9a06      	ldr	r2, [sp, #24]
 80044a6:	2a00      	cmp	r2, #0
 80044a8:	f040 844d 	bne.w	8004d46 <_strtod_r+0xb96>
 80044ac:	2900      	cmp	r1, #0
 80044ae:	d141      	bne.n	8004534 <_strtod_r+0x384>
 80044b0:	2b4e      	cmp	r3, #78	; 0x4e
 80044b2:	d020      	beq.n	80044f6 <_strtod_r+0x346>
 80044b4:	dc02      	bgt.n	80044bc <_strtod_r+0x30c>
 80044b6:	2b49      	cmp	r3, #73	; 0x49
 80044b8:	d00a      	beq.n	80044d0 <_strtod_r+0x320>
 80044ba:	e03b      	b.n	8004534 <_strtod_r+0x384>
 80044bc:	2b69      	cmp	r3, #105	; 0x69
 80044be:	d007      	beq.n	80044d0 <_strtod_r+0x320>
 80044c0:	2b6e      	cmp	r3, #110	; 0x6e
 80044c2:	d018      	beq.n	80044f6 <_strtod_r+0x346>
 80044c4:	e036      	b.n	8004534 <_strtod_r+0x384>
 80044c6:	bf00      	nop
 80044c8:	08009f60 	.word	0x08009f60
 80044cc:	7ff00000 	.word	0x7ff00000
 80044d0:	49a8      	ldr	r1, [pc, #672]	; (8004774 <_strtod_r+0x5c4>)
 80044d2:	a817      	add	r0, sp, #92	; 0x5c
 80044d4:	f004 faf0 	bl	8008ab8 <__match>
 80044d8:	b360      	cbz	r0, 8004534 <_strtod_r+0x384>
 80044da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80044dc:	49a6      	ldr	r1, [pc, #664]	; (8004778 <_strtod_r+0x5c8>)
 80044de:	3b01      	subs	r3, #1
 80044e0:	a817      	add	r0, sp, #92	; 0x5c
 80044e2:	9317      	str	r3, [sp, #92]	; 0x5c
 80044e4:	f004 fae8 	bl	8008ab8 <__match>
 80044e8:	b910      	cbnz	r0, 80044f0 <_strtod_r+0x340>
 80044ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80044ec:	3301      	adds	r3, #1
 80044ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80044f0:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 8004794 <_strtod_r+0x5e4>
 80044f4:	e01a      	b.n	800452c <_strtod_r+0x37c>
 80044f6:	49a1      	ldr	r1, [pc, #644]	; (800477c <_strtod_r+0x5cc>)
 80044f8:	a817      	add	r0, sp, #92	; 0x5c
 80044fa:	f004 fadd 	bl	8008ab8 <__match>
 80044fe:	b1c8      	cbz	r0, 8004534 <_strtod_r+0x384>
 8004500:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b28      	cmp	r3, #40	; 0x28
 8004506:	d10f      	bne.n	8004528 <_strtod_r+0x378>
 8004508:	aa1a      	add	r2, sp, #104	; 0x68
 800450a:	499d      	ldr	r1, [pc, #628]	; (8004780 <_strtod_r+0x5d0>)
 800450c:	a817      	add	r0, sp, #92	; 0x5c
 800450e:	f004 fae6 	bl	8008ade <__hexnan>
 8004512:	2805      	cmp	r0, #5
 8004514:	d108      	bne.n	8004528 <_strtod_r+0x378>
 8004516:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004518:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800451c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004520:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004524:	f000 bc0f 	b.w	8004d46 <_strtod_r+0xb96>
 8004528:	f8df b26c 	ldr.w	fp, [pc, #620]	; 8004798 <_strtod_r+0x5e8>
 800452c:	f04f 0a00 	mov.w	sl, #0
 8004530:	f000 bc09 	b.w	8004d46 <_strtod_r+0xb96>
 8004534:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004536:	9417      	str	r4, [sp, #92]	; 0x5c
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 840f 	beq.w	8004d5c <_strtod_r+0xbac>
 800453e:	2300      	movs	r3, #0
 8004540:	930c      	str	r3, [sp, #48]	; 0x30
 8004542:	f000 bc02 	b.w	8004d4a <_strtod_r+0xb9a>
 8004546:	9b04      	ldr	r3, [sp, #16]
 8004548:	9805      	ldr	r0, [sp, #20]
 800454a:	2b00      	cmp	r3, #0
 800454c:	bf08      	it	eq
 800454e:	462b      	moveq	r3, r5
 8004550:	2d10      	cmp	r5, #16
 8004552:	462c      	mov	r4, r5
 8004554:	ebc2 0909 	rsb	r9, r2, r9
 8004558:	bfa8      	it	ge
 800455a:	2410      	movge	r4, #16
 800455c:	9304      	str	r3, [sp, #16]
 800455e:	f7fb ffe1 	bl	8000524 <__aeabi_ui2d>
 8004562:	2c09      	cmp	r4, #9
 8004564:	4682      	mov	sl, r0
 8004566:	468b      	mov	fp, r1
 8004568:	dd13      	ble.n	8004592 <_strtod_r+0x3e2>
 800456a:	4b86      	ldr	r3, [pc, #536]	; (8004784 <_strtod_r+0x5d4>)
 800456c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004570:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004574:	f7fc f84c 	bl	8000610 <__aeabi_dmul>
 8004578:	4606      	mov	r6, r0
 800457a:	4640      	mov	r0, r8
 800457c:	460f      	mov	r7, r1
 800457e:	f7fb ffd1 	bl	8000524 <__aeabi_ui2d>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4630      	mov	r0, r6
 8004588:	4639      	mov	r1, r7
 800458a:	f7fb fe8f 	bl	80002ac <__adddf3>
 800458e:	4682      	mov	sl, r0
 8004590:	468b      	mov	fp, r1
 8004592:	2d0f      	cmp	r5, #15
 8004594:	dc36      	bgt.n	8004604 <_strtod_r+0x454>
 8004596:	f1b9 0f00 	cmp.w	r9, #0
 800459a:	f000 83d4 	beq.w	8004d46 <_strtod_r+0xb96>
 800459e:	dd24      	ble.n	80045ea <_strtod_r+0x43a>
 80045a0:	f1b9 0f16 	cmp.w	r9, #22
 80045a4:	dc07      	bgt.n	80045b6 <_strtod_r+0x406>
 80045a6:	4d77      	ldr	r5, [pc, #476]	; (8004784 <_strtod_r+0x5d4>)
 80045a8:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 80045ac:	4652      	mov	r2, sl
 80045ae:	465b      	mov	r3, fp
 80045b0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80045b4:	e014      	b.n	80045e0 <_strtod_r+0x430>
 80045b6:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80045ba:	4599      	cmp	r9, r3
 80045bc:	dc22      	bgt.n	8004604 <_strtod_r+0x454>
 80045be:	4c71      	ldr	r4, [pc, #452]	; (8004784 <_strtod_r+0x5d4>)
 80045c0:	f1c5 050f 	rsb	r5, r5, #15
 80045c4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80045c8:	ebc5 0509 	rsb	r5, r5, r9
 80045cc:	4652      	mov	r2, sl
 80045ce:	465b      	mov	r3, fp
 80045d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045d4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80045d8:	f7fc f81a 	bl	8000610 <__aeabi_dmul>
 80045dc:	e9d4 2300 	ldrd	r2, r3, [r4]
 80045e0:	f7fc f816 	bl	8000610 <__aeabi_dmul>
 80045e4:	4682      	mov	sl, r0
 80045e6:	468b      	mov	fp, r1
 80045e8:	e3ad      	b.n	8004d46 <_strtod_r+0xb96>
 80045ea:	f119 0f16 	cmn.w	r9, #22
 80045ee:	db09      	blt.n	8004604 <_strtod_r+0x454>
 80045f0:	4d64      	ldr	r5, [pc, #400]	; (8004784 <_strtod_r+0x5d4>)
 80045f2:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
 80045f6:	e9d9 2300 	ldrd	r2, r3, [r9]
 80045fa:	4650      	mov	r0, sl
 80045fc:	4659      	mov	r1, fp
 80045fe:	f7fc f931 	bl	8000864 <__aeabi_ddiv>
 8004602:	e7ef      	b.n	80045e4 <_strtod_r+0x434>
 8004604:	1b2c      	subs	r4, r5, r4
 8004606:	444c      	add	r4, r9
 8004608:	2c00      	cmp	r4, #0
 800460a:	dd57      	ble.n	80046bc <_strtod_r+0x50c>
 800460c:	f014 010f 	ands.w	r1, r4, #15
 8004610:	d00a      	beq.n	8004628 <_strtod_r+0x478>
 8004612:	4b5c      	ldr	r3, [pc, #368]	; (8004784 <_strtod_r+0x5d4>)
 8004614:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004618:	4652      	mov	r2, sl
 800461a:	465b      	mov	r3, fp
 800461c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004620:	f7fb fff6 	bl	8000610 <__aeabi_dmul>
 8004624:	4682      	mov	sl, r0
 8004626:	468b      	mov	fp, r1
 8004628:	f034 040f 	bics.w	r4, r4, #15
 800462c:	f000 80b8 	beq.w	80047a0 <_strtod_r+0x5f0>
 8004630:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 8004634:	dd0b      	ble.n	800464e <_strtod_r+0x49e>
 8004636:	2400      	movs	r4, #0
 8004638:	4625      	mov	r5, r4
 800463a:	9405      	str	r4, [sp, #20]
 800463c:	9404      	str	r4, [sp, #16]
 800463e:	9a02      	ldr	r2, [sp, #8]
 8004640:	f8df b150 	ldr.w	fp, [pc, #336]	; 8004794 <_strtod_r+0x5e4>
 8004644:	2322      	movs	r3, #34	; 0x22
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	f04f 0a00 	mov.w	sl, #0
 800464c:	e187      	b.n	800495e <_strtod_r+0x7ae>
 800464e:	4e4e      	ldr	r6, [pc, #312]	; (8004788 <_strtod_r+0x5d8>)
 8004650:	2300      	movs	r3, #0
 8004652:	1124      	asrs	r4, r4, #4
 8004654:	4650      	mov	r0, sl
 8004656:	4659      	mov	r1, fp
 8004658:	4698      	mov	r8, r3
 800465a:	4637      	mov	r7, r6
 800465c:	2c01      	cmp	r4, #1
 800465e:	dd0b      	ble.n	8004678 <_strtod_r+0x4c8>
 8004660:	07e2      	lsls	r2, r4, #31
 8004662:	d504      	bpl.n	800466e <_strtod_r+0x4be>
 8004664:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004668:	f7fb ffd2 	bl	8000610 <__aeabi_dmul>
 800466c:	2301      	movs	r3, #1
 800466e:	f108 0801 	add.w	r8, r8, #1
 8004672:	1064      	asrs	r4, r4, #1
 8004674:	3608      	adds	r6, #8
 8004676:	e7f1      	b.n	800465c <_strtod_r+0x4ac>
 8004678:	b10b      	cbz	r3, 800467e <_strtod_r+0x4ce>
 800467a:	4682      	mov	sl, r0
 800467c:	468b      	mov	fp, r1
 800467e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004682:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8004686:	4652      	mov	r2, sl
 8004688:	465b      	mov	r3, fp
 800468a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800468e:	f7fb ffbf 	bl	8000610 <__aeabi_dmul>
 8004692:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004696:	468b      	mov	fp, r1
 8004698:	460a      	mov	r2, r1
 800469a:	0d1b      	lsrs	r3, r3, #20
 800469c:	493b      	ldr	r1, [pc, #236]	; (800478c <_strtod_r+0x5dc>)
 800469e:	051b      	lsls	r3, r3, #20
 80046a0:	428b      	cmp	r3, r1
 80046a2:	4682      	mov	sl, r0
 80046a4:	d8c7      	bhi.n	8004636 <_strtod_r+0x486>
 80046a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80046aa:	428b      	cmp	r3, r1
 80046ac:	bf86      	itte	hi
 80046ae:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; 800479c <_strtod_r+0x5ec>
 80046b2:	f04f 3aff 	movhi.w	sl, #4294967295
 80046b6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80046ba:	e071      	b.n	80047a0 <_strtod_r+0x5f0>
 80046bc:	d070      	beq.n	80047a0 <_strtod_r+0x5f0>
 80046be:	4264      	negs	r4, r4
 80046c0:	f014 020f 	ands.w	r2, r4, #15
 80046c4:	d00a      	beq.n	80046dc <_strtod_r+0x52c>
 80046c6:	4b2f      	ldr	r3, [pc, #188]	; (8004784 <_strtod_r+0x5d4>)
 80046c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046cc:	4650      	mov	r0, sl
 80046ce:	4659      	mov	r1, fp
 80046d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d4:	f7fc f8c6 	bl	8000864 <__aeabi_ddiv>
 80046d8:	4682      	mov	sl, r0
 80046da:	468b      	mov	fp, r1
 80046dc:	1124      	asrs	r4, r4, #4
 80046de:	d05f      	beq.n	80047a0 <_strtod_r+0x5f0>
 80046e0:	2c1f      	cmp	r4, #31
 80046e2:	dd04      	ble.n	80046ee <_strtod_r+0x53e>
 80046e4:	2400      	movs	r4, #0
 80046e6:	4625      	mov	r5, r4
 80046e8:	9405      	str	r4, [sp, #20]
 80046ea:	9404      	str	r4, [sp, #16]
 80046ec:	e130      	b.n	8004950 <_strtod_r+0x7a0>
 80046ee:	f014 0f10 	tst.w	r4, #16
 80046f2:	bf0c      	ite	eq
 80046f4:	2300      	moveq	r3, #0
 80046f6:	236a      	movne	r3, #106	; 0x6a
 80046f8:	4e25      	ldr	r6, [pc, #148]	; (8004790 <_strtod_r+0x5e0>)
 80046fa:	9303      	str	r3, [sp, #12]
 80046fc:	4650      	mov	r0, sl
 80046fe:	4659      	mov	r1, fp
 8004700:	2300      	movs	r3, #0
 8004702:	2c00      	cmp	r4, #0
 8004704:	dd09      	ble.n	800471a <_strtod_r+0x56a>
 8004706:	07e2      	lsls	r2, r4, #31
 8004708:	d504      	bpl.n	8004714 <_strtod_r+0x564>
 800470a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800470e:	f7fb ff7f 	bl	8000610 <__aeabi_dmul>
 8004712:	2301      	movs	r3, #1
 8004714:	1064      	asrs	r4, r4, #1
 8004716:	3608      	adds	r6, #8
 8004718:	e7f3      	b.n	8004702 <_strtod_r+0x552>
 800471a:	b10b      	cbz	r3, 8004720 <_strtod_r+0x570>
 800471c:	4682      	mov	sl, r0
 800471e:	468b      	mov	fp, r1
 8004720:	9b03      	ldr	r3, [sp, #12]
 8004722:	b1eb      	cbz	r3, 8004760 <_strtod_r+0x5b0>
 8004724:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8004728:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800472c:	2b00      	cmp	r3, #0
 800472e:	4659      	mov	r1, fp
 8004730:	dd16      	ble.n	8004760 <_strtod_r+0x5b0>
 8004732:	2b1f      	cmp	r3, #31
 8004734:	dd0e      	ble.n	8004754 <_strtod_r+0x5a4>
 8004736:	2b34      	cmp	r3, #52	; 0x34
 8004738:	bfde      	ittt	le
 800473a:	3b20      	suble	r3, #32
 800473c:	f04f 32ff 	movle.w	r2, #4294967295
 8004740:	fa02 f303 	lslle.w	r3, r2, r3
 8004744:	f04f 0a00 	mov.w	sl, #0
 8004748:	bfcc      	ite	gt
 800474a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800474e:	ea03 0b01 	andle.w	fp, r3, r1
 8004752:	e005      	b.n	8004760 <_strtod_r+0x5b0>
 8004754:	f04f 32ff 	mov.w	r2, #4294967295
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	ea03 0a0a 	and.w	sl, r3, sl
 8004760:	2200      	movs	r2, #0
 8004762:	2300      	movs	r3, #0
 8004764:	4650      	mov	r0, sl
 8004766:	4659      	mov	r1, fp
 8004768:	f7fc f9ba 	bl	8000ae0 <__aeabi_dcmpeq>
 800476c:	2800      	cmp	r0, #0
 800476e:	d1b9      	bne.n	80046e4 <_strtod_r+0x534>
 8004770:	e018      	b.n	80047a4 <_strtod_r+0x5f4>
 8004772:	bf00      	nop
 8004774:	08009fc5 	.word	0x08009fc5
 8004778:	0800a128 	.word	0x0800a128
 800477c:	08009fcd 	.word	0x08009fcd
 8004780:	08009f74 	.word	0x08009f74
 8004784:	0800a1a8 	.word	0x0800a1a8
 8004788:	0800a270 	.word	0x0800a270
 800478c:	7ca00000 	.word	0x7ca00000
 8004790:	08009f88 	.word	0x08009f88
 8004794:	7ff00000 	.word	0x7ff00000
 8004798:	fff80000 	.word	0xfff80000
 800479c:	7fefffff 	.word	0x7fefffff
 80047a0:	2300      	movs	r3, #0
 80047a2:	9303      	str	r3, [sp, #12]
 80047a4:	9b05      	ldr	r3, [sp, #20]
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	9a04      	ldr	r2, [sp, #16]
 80047aa:	9907      	ldr	r1, [sp, #28]
 80047ac:	9802      	ldr	r0, [sp, #8]
 80047ae:	462b      	mov	r3, r5
 80047b0:	f004 fb47 	bl	8008e42 <__s2b>
 80047b4:	9005      	str	r0, [sp, #20]
 80047b6:	2800      	cmp	r0, #0
 80047b8:	f43f af3d 	beq.w	8004636 <_strtod_r+0x486>
 80047bc:	f1b9 0f00 	cmp.w	r9, #0
 80047c0:	f1c9 0300 	rsb	r3, r9, #0
 80047c4:	bfa8      	it	ge
 80047c6:	2300      	movge	r3, #0
 80047c8:	930d      	str	r3, [sp, #52]	; 0x34
 80047ca:	2400      	movs	r4, #0
 80047cc:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 80047d0:	9312      	str	r3, [sp, #72]	; 0x48
 80047d2:	4625      	mov	r5, r4
 80047d4:	9b05      	ldr	r3, [sp, #20]
 80047d6:	9802      	ldr	r0, [sp, #8]
 80047d8:	6859      	ldr	r1, [r3, #4]
 80047da:	f004 faab 	bl	8008d34 <_Balloc>
 80047de:	9004      	str	r0, [sp, #16]
 80047e0:	2800      	cmp	r0, #0
 80047e2:	f43f af2c 	beq.w	800463e <_strtod_r+0x48e>
 80047e6:	9b05      	ldr	r3, [sp, #20]
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	3202      	adds	r2, #2
 80047ec:	f103 010c 	add.w	r1, r3, #12
 80047f0:	0092      	lsls	r2, r2, #2
 80047f2:	300c      	adds	r0, #12
 80047f4:	f004 fa78 	bl	8008ce8 <memcpy>
 80047f8:	aa1a      	add	r2, sp, #104	; 0x68
 80047fa:	a919      	add	r1, sp, #100	; 0x64
 80047fc:	ec4b ab10 	vmov	d0, sl, fp
 8004800:	9802      	ldr	r0, [sp, #8]
 8004802:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004806:	f004 fdd0 	bl	80093aa <__d2b>
 800480a:	9018      	str	r0, [sp, #96]	; 0x60
 800480c:	2800      	cmp	r0, #0
 800480e:	f43f af16 	beq.w	800463e <_strtod_r+0x48e>
 8004812:	2101      	movs	r1, #1
 8004814:	9802      	ldr	r0, [sp, #8]
 8004816:	f004 fb9f 	bl	8008f58 <__i2b>
 800481a:	4605      	mov	r5, r0
 800481c:	2800      	cmp	r0, #0
 800481e:	f43f af0e 	beq.w	800463e <_strtod_r+0x48e>
 8004822:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004824:	9903      	ldr	r1, [sp, #12]
 8004826:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8004828:	2b00      	cmp	r3, #0
 800482a:	bfad      	iteet	ge
 800482c:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 800482e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8004830:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
 8004834:	eb02 0803 	addge.w	r8, r2, r3
 8004838:	bfb8      	it	lt
 800483a:	1ad2      	sublt	r2, r2, r3
 800483c:	eba3 0301 	sub.w	r3, r3, r1
 8004840:	4433      	add	r3, r6
 8004842:	49b5      	ldr	r1, [pc, #724]	; (8004b18 <_strtod_r+0x968>)
 8004844:	bfa8      	it	ge
 8004846:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 8004848:	3b01      	subs	r3, #1
 800484a:	428b      	cmp	r3, r1
 800484c:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
 8004850:	f280 808a 	bge.w	8004968 <_strtod_r+0x7b8>
 8004854:	1ac9      	subs	r1, r1, r3
 8004856:	291f      	cmp	r1, #31
 8004858:	bfc8      	it	gt
 800485a:	4fb0      	ldrgt	r7, [pc, #704]	; (8004b1c <_strtod_r+0x96c>)
 800485c:	f04f 0901 	mov.w	r9, #1
 8004860:	bfd4      	ite	le
 8004862:	fa09 f301 	lslle.w	r3, r9, r1
 8004866:	1aff      	subgt	r7, r7, r3
 8004868:	eba6 0601 	sub.w	r6, r6, r1
 800486c:	bfd9      	ittee	le
 800486e:	9306      	strle	r3, [sp, #24]
 8004870:	2700      	movle	r7, #0
 8004872:	fa09 f707 	lslgt.w	r7, r9, r7
 8004876:	f8cd 9018 	strgt.w	r9, [sp, #24]
 800487a:	eb08 0906 	add.w	r9, r8, r6
 800487e:	9b03      	ldr	r3, [sp, #12]
 8004880:	45c8      	cmp	r8, r9
 8004882:	4416      	add	r6, r2
 8004884:	441e      	add	r6, r3
 8004886:	4643      	mov	r3, r8
 8004888:	bfa8      	it	ge
 800488a:	464b      	movge	r3, r9
 800488c:	42b3      	cmp	r3, r6
 800488e:	bfa8      	it	ge
 8004890:	4633      	movge	r3, r6
 8004892:	2b00      	cmp	r3, #0
 8004894:	bfc2      	ittt	gt
 8004896:	ebc3 0909 	rsbgt	r9, r3, r9
 800489a:	1af6      	subgt	r6, r6, r3
 800489c:	ebc3 0808 	rsbgt	r8, r3, r8
 80048a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d164      	bne.n	8004970 <_strtod_r+0x7c0>
 80048a6:	f1b9 0f00 	cmp.w	r9, #0
 80048aa:	dc7a      	bgt.n	80049a2 <_strtod_r+0x7f2>
 80048ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f040 8081 	bne.w	80049b6 <_strtod_r+0x806>
 80048b4:	2e00      	cmp	r6, #0
 80048b6:	f300 8088 	bgt.w	80049ca <_strtod_r+0x81a>
 80048ba:	f1b8 0f00 	cmp.w	r8, #0
 80048be:	f300 808e 	bgt.w	80049de <_strtod_r+0x82e>
 80048c2:	9a04      	ldr	r2, [sp, #16]
 80048c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80048c6:	9802      	ldr	r0, [sp, #8]
 80048c8:	f004 fc9b 	bl	8009202 <__mdiff>
 80048cc:	4604      	mov	r4, r0
 80048ce:	2800      	cmp	r0, #0
 80048d0:	f43f aeb5 	beq.w	800463e <_strtod_r+0x48e>
 80048d4:	68c3      	ldr	r3, [r0, #12]
 80048d6:	9307      	str	r3, [sp, #28]
 80048d8:	2300      	movs	r3, #0
 80048da:	60c3      	str	r3, [r0, #12]
 80048dc:	4629      	mov	r1, r5
 80048de:	f004 fc74 	bl	80091ca <__mcmp>
 80048e2:	2800      	cmp	r0, #0
 80048e4:	f280 8089 	bge.w	80049fa <_strtod_r+0x84a>
 80048e8:	9b07      	ldr	r3, [sp, #28]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f040 8204 	bne.w	8004cf8 <_strtod_r+0xb48>
 80048f0:	f1ba 0f00 	cmp.w	sl, #0
 80048f4:	f040 8200 	bne.w	8004cf8 <_strtod_r+0xb48>
 80048f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f040 81fb 	bne.w	8004cf8 <_strtod_r+0xb48>
 8004902:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004906:	0d1b      	lsrs	r3, r3, #20
 8004908:	051b      	lsls	r3, r3, #20
 800490a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800490e:	f240 81f3 	bls.w	8004cf8 <_strtod_r+0xb48>
 8004912:	6963      	ldr	r3, [r4, #20]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d06c      	beq.n	80049f2 <_strtod_r+0x842>
 8004918:	4621      	mov	r1, r4
 800491a:	2201      	movs	r2, #1
 800491c:	9802      	ldr	r0, [sp, #8]
 800491e:	f004 fc03 	bl	8009128 <__lshift>
 8004922:	4629      	mov	r1, r5
 8004924:	4604      	mov	r4, r0
 8004926:	f004 fc50 	bl	80091ca <__mcmp>
 800492a:	2800      	cmp	r0, #0
 800492c:	f340 81e4 	ble.w	8004cf8 <_strtod_r+0xb48>
 8004930:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004934:	9a03      	ldr	r2, [sp, #12]
 8004936:	0d1b      	lsrs	r3, r3, #20
 8004938:	051b      	lsls	r3, r3, #20
 800493a:	2a00      	cmp	r2, #0
 800493c:	f000 808c 	beq.w	8004a58 <_strtod_r+0x8a8>
 8004940:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004944:	f300 8088 	bgt.w	8004a58 <_strtod_r+0x8a8>
 8004948:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 800494c:	f300 81d6 	bgt.w	8004cfc <_strtod_r+0xb4c>
 8004950:	9a02      	ldr	r2, [sp, #8]
 8004952:	2322      	movs	r3, #34	; 0x22
 8004954:	f04f 0a00 	mov.w	sl, #0
 8004958:	f04f 0b00 	mov.w	fp, #0
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	9b05      	ldr	r3, [sp, #20]
 8004960:	2b00      	cmp	r3, #0
 8004962:	f040 81dc 	bne.w	8004d1e <_strtod_r+0xb6e>
 8004966:	e1ee      	b.n	8004d46 <_strtod_r+0xb96>
 8004968:	2301      	movs	r3, #1
 800496a:	2700      	movs	r7, #0
 800496c:	9306      	str	r3, [sp, #24]
 800496e:	e784      	b.n	800487a <_strtod_r+0x6ca>
 8004970:	4629      	mov	r1, r5
 8004972:	461a      	mov	r2, r3
 8004974:	9802      	ldr	r0, [sp, #8]
 8004976:	f004 fb89 	bl	800908c <__pow5mult>
 800497a:	4605      	mov	r5, r0
 800497c:	2800      	cmp	r0, #0
 800497e:	f43f ae5e 	beq.w	800463e <_strtod_r+0x48e>
 8004982:	4601      	mov	r1, r0
 8004984:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004986:	9802      	ldr	r0, [sp, #8]
 8004988:	f004 faef 	bl	8008f6a <__multiply>
 800498c:	9007      	str	r0, [sp, #28]
 800498e:	2800      	cmp	r0, #0
 8004990:	f43f ae55 	beq.w	800463e <_strtod_r+0x48e>
 8004994:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004996:	9802      	ldr	r0, [sp, #8]
 8004998:	f004 fa01 	bl	8008d9e <_Bfree>
 800499c:	9b07      	ldr	r3, [sp, #28]
 800499e:	9318      	str	r3, [sp, #96]	; 0x60
 80049a0:	e781      	b.n	80048a6 <_strtod_r+0x6f6>
 80049a2:	464a      	mov	r2, r9
 80049a4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80049a6:	9802      	ldr	r0, [sp, #8]
 80049a8:	f004 fbbe 	bl	8009128 <__lshift>
 80049ac:	9018      	str	r0, [sp, #96]	; 0x60
 80049ae:	2800      	cmp	r0, #0
 80049b0:	f47f af7c 	bne.w	80048ac <_strtod_r+0x6fc>
 80049b4:	e643      	b.n	800463e <_strtod_r+0x48e>
 80049b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80049b8:	9904      	ldr	r1, [sp, #16]
 80049ba:	9802      	ldr	r0, [sp, #8]
 80049bc:	f004 fb66 	bl	800908c <__pow5mult>
 80049c0:	9004      	str	r0, [sp, #16]
 80049c2:	2800      	cmp	r0, #0
 80049c4:	f47f af76 	bne.w	80048b4 <_strtod_r+0x704>
 80049c8:	e639      	b.n	800463e <_strtod_r+0x48e>
 80049ca:	4632      	mov	r2, r6
 80049cc:	9904      	ldr	r1, [sp, #16]
 80049ce:	9802      	ldr	r0, [sp, #8]
 80049d0:	f004 fbaa 	bl	8009128 <__lshift>
 80049d4:	9004      	str	r0, [sp, #16]
 80049d6:	2800      	cmp	r0, #0
 80049d8:	f47f af6f 	bne.w	80048ba <_strtod_r+0x70a>
 80049dc:	e62f      	b.n	800463e <_strtod_r+0x48e>
 80049de:	4629      	mov	r1, r5
 80049e0:	4642      	mov	r2, r8
 80049e2:	9802      	ldr	r0, [sp, #8]
 80049e4:	f004 fba0 	bl	8009128 <__lshift>
 80049e8:	4605      	mov	r5, r0
 80049ea:	2800      	cmp	r0, #0
 80049ec:	f47f af69 	bne.w	80048c2 <_strtod_r+0x712>
 80049f0:	e625      	b.n	800463e <_strtod_r+0x48e>
 80049f2:	6923      	ldr	r3, [r4, #16]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	dc8f      	bgt.n	8004918 <_strtod_r+0x768>
 80049f8:	e17e      	b.n	8004cf8 <_strtod_r+0xb48>
 80049fa:	d161      	bne.n	8004ac0 <_strtod_r+0x910>
 80049fc:	9a07      	ldr	r2, [sp, #28]
 80049fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004a02:	b322      	cbz	r2, 8004a4e <_strtod_r+0x89e>
 8004a04:	4946      	ldr	r1, [pc, #280]	; (8004b20 <_strtod_r+0x970>)
 8004a06:	428b      	cmp	r3, r1
 8004a08:	465a      	mov	r2, fp
 8004a0a:	d12e      	bne.n	8004a6a <_strtod_r+0x8ba>
 8004a0c:	9b03      	ldr	r3, [sp, #12]
 8004a0e:	4651      	mov	r1, sl
 8004a10:	b163      	cbz	r3, 8004a2c <_strtod_r+0x87c>
 8004a12:	4b44      	ldr	r3, [pc, #272]	; (8004b24 <_strtod_r+0x974>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004a1a:	d807      	bhi.n	8004a2c <_strtod_r+0x87c>
 8004a1c:	0d1b      	lsrs	r3, r3, #20
 8004a1e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004a22:	f04f 30ff 	mov.w	r0, #4294967295
 8004a26:	fa00 f303 	lsl.w	r3, r0, r3
 8004a2a:	e001      	b.n	8004a30 <_strtod_r+0x880>
 8004a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a30:	428b      	cmp	r3, r1
 8004a32:	d11a      	bne.n	8004a6a <_strtod_r+0x8ba>
 8004a34:	493c      	ldr	r1, [pc, #240]	; (8004b28 <_strtod_r+0x978>)
 8004a36:	428a      	cmp	r2, r1
 8004a38:	d102      	bne.n	8004a40 <_strtod_r+0x890>
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	f43f adff 	beq.w	800463e <_strtod_r+0x48e>
 8004a40:	4b38      	ldr	r3, [pc, #224]	; (8004b24 <_strtod_r+0x974>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004a48:	f04f 0a00 	mov.w	sl, #0
 8004a4c:	e154      	b.n	8004cf8 <_strtod_r+0xb48>
 8004a4e:	b963      	cbnz	r3, 8004a6a <_strtod_r+0x8ba>
 8004a50:	f1ba 0f00 	cmp.w	sl, #0
 8004a54:	d109      	bne.n	8004a6a <_strtod_r+0x8ba>
 8004a56:	e76b      	b.n	8004930 <_strtod_r+0x780>
 8004a58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004a5c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004a60:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004a64:	f04f 3aff 	mov.w	sl, #4294967295
 8004a68:	e146      	b.n	8004cf8 <_strtod_r+0xb48>
 8004a6a:	b117      	cbz	r7, 8004a72 <_strtod_r+0x8c2>
 8004a6c:	ea17 0f0b 	tst.w	r7, fp
 8004a70:	e002      	b.n	8004a78 <_strtod_r+0x8c8>
 8004a72:	9b06      	ldr	r3, [sp, #24]
 8004a74:	ea13 0f0a 	tst.w	r3, sl
 8004a78:	f000 813e 	beq.w	8004cf8 <_strtod_r+0xb48>
 8004a7c:	9b07      	ldr	r3, [sp, #28]
 8004a7e:	9a03      	ldr	r2, [sp, #12]
 8004a80:	4650      	mov	r0, sl
 8004a82:	4659      	mov	r1, fp
 8004a84:	b153      	cbz	r3, 8004a9c <_strtod_r+0x8ec>
 8004a86:	f7ff fb74 	bl	8004172 <sulp>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004a92:	f7fb fc0b 	bl	80002ac <__adddf3>
 8004a96:	4682      	mov	sl, r0
 8004a98:	468b      	mov	fp, r1
 8004a9a:	e12d      	b.n	8004cf8 <_strtod_r+0xb48>
 8004a9c:	f7ff fb69 	bl	8004172 <sulp>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004aa8:	f7fb fbfe 	bl	80002a8 <__aeabi_dsub>
 8004aac:	2200      	movs	r2, #0
 8004aae:	2300      	movs	r3, #0
 8004ab0:	4682      	mov	sl, r0
 8004ab2:	468b      	mov	fp, r1
 8004ab4:	f7fc f814 	bl	8000ae0 <__aeabi_dcmpeq>
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	f47f af49 	bne.w	8004950 <_strtod_r+0x7a0>
 8004abe:	e11b      	b.n	8004cf8 <_strtod_r+0xb48>
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	f004 fcbf 	bl	8009446 <__ratio>
 8004ac8:	ec57 6b10 	vmov	r6, r7, d0
 8004acc:	2200      	movs	r2, #0
 8004ace:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ad2:	ee10 0a10 	vmov	r0, s0
 8004ad6:	4639      	mov	r1, r7
 8004ad8:	f7fc f816 	bl	8000b08 <__aeabi_dcmple>
 8004adc:	2800      	cmp	r0, #0
 8004ade:	d042      	beq.n	8004b66 <_strtod_r+0x9b6>
 8004ae0:	9b07      	ldr	r3, [sp, #28]
 8004ae2:	b123      	cbz	r3, 8004aee <_strtod_r+0x93e>
 8004ae4:	f04f 0800 	mov.w	r8, #0
 8004ae8:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8004b2c <_strtod_r+0x97c>
 8004aec:	e011      	b.n	8004b12 <_strtod_r+0x962>
 8004aee:	f1ba 0f00 	cmp.w	sl, #0
 8004af2:	d103      	bne.n	8004afc <_strtod_r+0x94c>
 8004af4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004af8:	b93b      	cbnz	r3, 8004b0a <_strtod_r+0x95a>
 8004afa:	e01b      	b.n	8004b34 <_strtod_r+0x984>
 8004afc:	f1ba 0f01 	cmp.w	sl, #1
 8004b00:	d103      	bne.n	8004b0a <_strtod_r+0x95a>
 8004b02:	f1bb 0f00 	cmp.w	fp, #0
 8004b06:	f43f af23 	beq.w	8004950 <_strtod_r+0x7a0>
 8004b0a:	f8df 9024 	ldr.w	r9, [pc, #36]	; 8004b30 <_strtod_r+0x980>
 8004b0e:	f04f 0800 	mov.w	r8, #0
 8004b12:	2600      	movs	r6, #0
 8004b14:	4f05      	ldr	r7, [pc, #20]	; (8004b2c <_strtod_r+0x97c>)
 8004b16:	e039      	b.n	8004b8c <_strtod_r+0x9dc>
 8004b18:	fffffc02 	.word	0xfffffc02
 8004b1c:	fffffbe2 	.word	0xfffffbe2
 8004b20:	000fffff 	.word	0x000fffff
 8004b24:	7ff00000 	.word	0x7ff00000
 8004b28:	7fefffff 	.word	0x7fefffff
 8004b2c:	3ff00000 	.word	0x3ff00000
 8004b30:	bff00000 	.word	0xbff00000
 8004b34:	2200      	movs	r2, #0
 8004b36:	4b98      	ldr	r3, [pc, #608]	; (8004d98 <_strtod_r+0xbe8>)
 8004b38:	4630      	mov	r0, r6
 8004b3a:	4639      	mov	r1, r7
 8004b3c:	f7fb ffda 	bl	8000af4 <__aeabi_dcmplt>
 8004b40:	b940      	cbnz	r0, 8004b54 <_strtod_r+0x9a4>
 8004b42:	4630      	mov	r0, r6
 8004b44:	4639      	mov	r1, r7
 8004b46:	2200      	movs	r2, #0
 8004b48:	4b94      	ldr	r3, [pc, #592]	; (8004d9c <_strtod_r+0xbec>)
 8004b4a:	f7fb fd61 	bl	8000610 <__aeabi_dmul>
 8004b4e:	4606      	mov	r6, r0
 8004b50:	460f      	mov	r7, r1
 8004b52:	e001      	b.n	8004b58 <_strtod_r+0x9a8>
 8004b54:	4f91      	ldr	r7, [pc, #580]	; (8004d9c <_strtod_r+0xbec>)
 8004b56:	2600      	movs	r6, #0
 8004b58:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8004b5c:	9614      	str	r6, [sp, #80]	; 0x50
 8004b5e:	9315      	str	r3, [sp, #84]	; 0x54
 8004b60:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8004b64:	e012      	b.n	8004b8c <_strtod_r+0x9dc>
 8004b66:	4b8d      	ldr	r3, [pc, #564]	; (8004d9c <_strtod_r+0xbec>)
 8004b68:	4630      	mov	r0, r6
 8004b6a:	4639      	mov	r1, r7
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f7fb fd4f 	bl	8000610 <__aeabi_dmul>
 8004b72:	9b07      	ldr	r3, [sp, #28]
 8004b74:	4606      	mov	r6, r0
 8004b76:	460f      	mov	r7, r1
 8004b78:	b923      	cbnz	r3, 8004b84 <_strtod_r+0x9d4>
 8004b7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004b7e:	900e      	str	r0, [sp, #56]	; 0x38
 8004b80:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b82:	e001      	b.n	8004b88 <_strtod_r+0x9d8>
 8004b84:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 8004b88:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8004b8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004b90:	0d1b      	lsrs	r3, r3, #20
 8004b92:	051b      	lsls	r3, r3, #20
 8004b94:	9306      	str	r3, [sp, #24]
 8004b96:	9a06      	ldr	r2, [sp, #24]
 8004b98:	4b81      	ldr	r3, [pc, #516]	; (8004da0 <_strtod_r+0xbf0>)
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d12b      	bne.n	8004bf6 <_strtod_r+0xa46>
 8004b9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004ba2:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004ba6:	ec4b ab10 	vmov	d0, sl, fp
 8004baa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004bae:	f004 fb87 	bl	80092c0 <__ulp>
 8004bb2:	4640      	mov	r0, r8
 8004bb4:	ec53 2b10 	vmov	r2, r3, d0
 8004bb8:	4649      	mov	r1, r9
 8004bba:	f7fb fd29 	bl	8000610 <__aeabi_dmul>
 8004bbe:	4652      	mov	r2, sl
 8004bc0:	465b      	mov	r3, fp
 8004bc2:	f7fb fb73 	bl	80002ac <__adddf3>
 8004bc6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004bca:	0d1b      	lsrs	r3, r3, #20
 8004bcc:	4a75      	ldr	r2, [pc, #468]	; (8004da4 <_strtod_r+0xbf4>)
 8004bce:	051b      	lsls	r3, r3, #20
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	4682      	mov	sl, r0
 8004bd4:	d90c      	bls.n	8004bf0 <_strtod_r+0xa40>
 8004bd6:	4b74      	ldr	r3, [pc, #464]	; (8004da8 <_strtod_r+0xbf8>)
 8004bd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d103      	bne.n	8004be6 <_strtod_r+0xa36>
 8004bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004be0:	3301      	adds	r3, #1
 8004be2:	f43f ad2c 	beq.w	800463e <_strtod_r+0x48e>
 8004be6:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 8004da8 <_strtod_r+0xbf8>
 8004bea:	f04f 3aff 	mov.w	sl, #4294967295
 8004bee:	e072      	b.n	8004cd6 <_strtod_r+0xb26>
 8004bf0:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 8004bf4:	e038      	b.n	8004c68 <_strtod_r+0xab8>
 8004bf6:	9b03      	ldr	r3, [sp, #12]
 8004bf8:	b333      	cbz	r3, 8004c48 <_strtod_r+0xa98>
 8004bfa:	9b06      	ldr	r3, [sp, #24]
 8004bfc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004c00:	d822      	bhi.n	8004c48 <_strtod_r+0xa98>
 8004c02:	a35d      	add	r3, pc, #372	; (adr r3, 8004d78 <_strtod_r+0xbc8>)
 8004c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c08:	4630      	mov	r0, r6
 8004c0a:	4639      	mov	r1, r7
 8004c0c:	f7fb ff7c 	bl	8000b08 <__aeabi_dcmple>
 8004c10:	b1a8      	cbz	r0, 8004c3e <_strtod_r+0xa8e>
 8004c12:	4639      	mov	r1, r7
 8004c14:	4630      	mov	r0, r6
 8004c16:	f7fb ffd3 	bl	8000bc0 <__aeabi_d2uiz>
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	bf08      	it	eq
 8004c1e:	2001      	moveq	r0, #1
 8004c20:	f7fb fc80 	bl	8000524 <__aeabi_ui2d>
 8004c24:	9b07      	ldr	r3, [sp, #28]
 8004c26:	4606      	mov	r6, r0
 8004c28:	460f      	mov	r7, r1
 8004c2a:	b923      	cbnz	r3, 8004c36 <_strtod_r+0xa86>
 8004c2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c30:	9010      	str	r0, [sp, #64]	; 0x40
 8004c32:	9311      	str	r3, [sp, #68]	; 0x44
 8004c34:	e001      	b.n	8004c3a <_strtod_r+0xa8a>
 8004c36:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8004c3a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8004c3e:	9a06      	ldr	r2, [sp, #24]
 8004c40:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
 8004c44:	ebc2 0903 	rsb	r9, r2, r3
 8004c48:	ed9d 0b08 	vldr	d0, [sp, #32]
 8004c4c:	f004 fb38 	bl	80092c0 <__ulp>
 8004c50:	4640      	mov	r0, r8
 8004c52:	ec53 2b10 	vmov	r2, r3, d0
 8004c56:	4649      	mov	r1, r9
 8004c58:	f7fb fcda 	bl	8000610 <__aeabi_dmul>
 8004c5c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c60:	f7fb fb24 	bl	80002ac <__adddf3>
 8004c64:	4682      	mov	sl, r0
 8004c66:	468b      	mov	fp, r1
 8004c68:	9b03      	ldr	r3, [sp, #12]
 8004c6a:	bba3      	cbnz	r3, 8004cd6 <_strtod_r+0xb26>
 8004c6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004c70:	0d1b      	lsrs	r3, r3, #20
 8004c72:	9a06      	ldr	r2, [sp, #24]
 8004c74:	051b      	lsls	r3, r3, #20
 8004c76:	429a      	cmp	r2, r3
 8004c78:	46d8      	mov	r8, fp
 8004c7a:	d12c      	bne.n	8004cd6 <_strtod_r+0xb26>
 8004c7c:	4639      	mov	r1, r7
 8004c7e:	4630      	mov	r0, r6
 8004c80:	f7fb ff76 	bl	8000b70 <__aeabi_d2iz>
 8004c84:	f7fb fc5e 	bl	8000544 <__aeabi_i2d>
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	4639      	mov	r1, r7
 8004c8e:	4630      	mov	r0, r6
 8004c90:	f7fb fb0a 	bl	80002a8 <__aeabi_dsub>
 8004c94:	9b07      	ldr	r3, [sp, #28]
 8004c96:	4606      	mov	r6, r0
 8004c98:	460f      	mov	r7, r1
 8004c9a:	b92b      	cbnz	r3, 8004ca8 <_strtod_r+0xaf8>
 8004c9c:	f1ba 0f00 	cmp.w	sl, #0
 8004ca0:	d102      	bne.n	8004ca8 <_strtod_r+0xaf8>
 8004ca2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004ca6:	b183      	cbz	r3, 8004cca <_strtod_r+0xb1a>
 8004ca8:	a335      	add	r3, pc, #212	; (adr r3, 8004d80 <_strtod_r+0xbd0>)
 8004caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cae:	4630      	mov	r0, r6
 8004cb0:	4639      	mov	r1, r7
 8004cb2:	f7fb ff1f 	bl	8000af4 <__aeabi_dcmplt>
 8004cb6:	2800      	cmp	r0, #0
 8004cb8:	d131      	bne.n	8004d1e <_strtod_r+0xb6e>
 8004cba:	a333      	add	r3, pc, #204	; (adr r3, 8004d88 <_strtod_r+0xbd8>)
 8004cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	4639      	mov	r1, r7
 8004cc4:	f7fb ff34 	bl	8000b30 <__aeabi_dcmpgt>
 8004cc8:	e004      	b.n	8004cd4 <_strtod_r+0xb24>
 8004cca:	a331      	add	r3, pc, #196	; (adr r3, 8004d90 <_strtod_r+0xbe0>)
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f7fb ff10 	bl	8000af4 <__aeabi_dcmplt>
 8004cd4:	bb18      	cbnz	r0, 8004d1e <_strtod_r+0xb6e>
 8004cd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004cd8:	9802      	ldr	r0, [sp, #8]
 8004cda:	f004 f860 	bl	8008d9e <_Bfree>
 8004cde:	9904      	ldr	r1, [sp, #16]
 8004ce0:	9802      	ldr	r0, [sp, #8]
 8004ce2:	f004 f85c 	bl	8008d9e <_Bfree>
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	9802      	ldr	r0, [sp, #8]
 8004cea:	f004 f858 	bl	8008d9e <_Bfree>
 8004cee:	4621      	mov	r1, r4
 8004cf0:	9802      	ldr	r0, [sp, #8]
 8004cf2:	f004 f854 	bl	8008d9e <_Bfree>
 8004cf6:	e56d      	b.n	80047d4 <_strtod_r+0x624>
 8004cf8:	9b03      	ldr	r3, [sp, #12]
 8004cfa:	b183      	cbz	r3, 8004d1e <_strtod_r+0xb6e>
 8004cfc:	4b2b      	ldr	r3, [pc, #172]	; (8004dac <_strtod_r+0xbfc>)
 8004cfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d00:	2300      	movs	r3, #0
 8004d02:	930a      	str	r3, [sp, #40]	; 0x28
 8004d04:	4650      	mov	r0, sl
 8004d06:	4659      	mov	r1, fp
 8004d08:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004d0c:	f7fb fc80 	bl	8000610 <__aeabi_dmul>
 8004d10:	4682      	mov	sl, r0
 8004d12:	468b      	mov	fp, r1
 8004d14:	b919      	cbnz	r1, 8004d1e <_strtod_r+0xb6e>
 8004d16:	b910      	cbnz	r0, 8004d1e <_strtod_r+0xb6e>
 8004d18:	9a02      	ldr	r2, [sp, #8]
 8004d1a:	2322      	movs	r3, #34	; 0x22
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004d20:	9802      	ldr	r0, [sp, #8]
 8004d22:	f004 f83c 	bl	8008d9e <_Bfree>
 8004d26:	9904      	ldr	r1, [sp, #16]
 8004d28:	9802      	ldr	r0, [sp, #8]
 8004d2a:	f004 f838 	bl	8008d9e <_Bfree>
 8004d2e:	4629      	mov	r1, r5
 8004d30:	9802      	ldr	r0, [sp, #8]
 8004d32:	f004 f834 	bl	8008d9e <_Bfree>
 8004d36:	9905      	ldr	r1, [sp, #20]
 8004d38:	9802      	ldr	r0, [sp, #8]
 8004d3a:	f004 f830 	bl	8008d9e <_Bfree>
 8004d3e:	4621      	mov	r1, r4
 8004d40:	9802      	ldr	r0, [sp, #8]
 8004d42:	f004 f82c 	bl	8008d9e <_Bfree>
 8004d46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004d48:	b113      	cbz	r3, 8004d50 <_strtod_r+0xba0>
 8004d4a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004d4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d52:	b11b      	cbz	r3, 8004d5c <_strtod_r+0xbac>
 8004d54:	4652      	mov	r2, sl
 8004d56:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004d5a:	e007      	b.n	8004d6c <_strtod_r+0xbbc>
 8004d5c:	4652      	mov	r2, sl
 8004d5e:	465b      	mov	r3, fp
 8004d60:	e004      	b.n	8004d6c <_strtod_r+0xbbc>
 8004d62:	2500      	movs	r5, #0
 8004d64:	462a      	mov	r2, r5
 8004d66:	2101      	movs	r1, #1
 8004d68:	f7ff bb41 	b.w	80043ee <_strtod_r+0x23e>
 8004d6c:	ec43 2b10 	vmov	d0, r2, r3
 8004d70:	b01d      	add	sp, #116	; 0x74
 8004d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d76:	bf00      	nop
 8004d78:	ffc00000 	.word	0xffc00000
 8004d7c:	41dfffff 	.word	0x41dfffff
 8004d80:	94a03595 	.word	0x94a03595
 8004d84:	3fdfffff 	.word	0x3fdfffff
 8004d88:	35afe535 	.word	0x35afe535
 8004d8c:	3fe00000 	.word	0x3fe00000
 8004d90:	94a03595 	.word	0x94a03595
 8004d94:	3fcfffff 	.word	0x3fcfffff
 8004d98:	3ff00000 	.word	0x3ff00000
 8004d9c:	3fe00000 	.word	0x3fe00000
 8004da0:	7fe00000 	.word	0x7fe00000
 8004da4:	7c9fffff 	.word	0x7c9fffff
 8004da8:	7fefffff 	.word	0x7fefffff
 8004dac:	39500000 	.word	0x39500000

08004db0 <strtod>:
 8004db0:	4b02      	ldr	r3, [pc, #8]	; (8004dbc <strtod+0xc>)
 8004db2:	460a      	mov	r2, r1
 8004db4:	4601      	mov	r1, r0
 8004db6:	6818      	ldr	r0, [r3, #0]
 8004db8:	f7ff b9fa 	b.w	80041b0 <_strtod_r>
 8004dbc:	20000508 	.word	0x20000508

08004dc0 <strtok>:
 8004dc0:	4b1d      	ldr	r3, [pc, #116]	; (8004e38 <strtok+0x78>)
 8004dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc6:	681d      	ldr	r5, [r3, #0]
 8004dc8:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 8004dcc:	4606      	mov	r6, r0
 8004dce:	460f      	mov	r7, r1
 8004dd0:	bb4c      	cbnz	r4, 8004e26 <strtok+0x66>
 8004dd2:	2050      	movs	r0, #80	; 0x50
 8004dd4:	f7fe fed2 	bl	8003b7c <malloc>
 8004dd8:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
 8004ddc:	6084      	str	r4, [r0, #8]
 8004dde:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8004de2:	6004      	str	r4, [r0, #0]
 8004de4:	6044      	str	r4, [r0, #4]
 8004de6:	611c      	str	r4, [r3, #16]
 8004de8:	60dc      	str	r4, [r3, #12]
 8004dea:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8004dee:	619c      	str	r4, [r3, #24]
 8004df0:	615c      	str	r4, [r3, #20]
 8004df2:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8004df6:	62dc      	str	r4, [r3, #44]	; 0x2c
 8004df8:	629c      	str	r4, [r3, #40]	; 0x28
 8004dfa:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8004dfe:	635c      	str	r4, [r3, #52]	; 0x34
 8004e00:	631c      	str	r4, [r3, #48]	; 0x30
 8004e02:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8004e06:	63dc      	str	r4, [r3, #60]	; 0x3c
 8004e08:	639c      	str	r4, [r3, #56]	; 0x38
 8004e0a:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8004e0e:	645c      	str	r4, [r3, #68]	; 0x44
 8004e10:	641c      	str	r4, [r3, #64]	; 0x40
 8004e12:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8004e16:	64dc      	str	r4, [r3, #76]	; 0x4c
 8004e18:	649c      	str	r4, [r3, #72]	; 0x48
 8004e1a:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8004e1e:	771c      	strb	r4, [r3, #28]
 8004e20:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8004e24:	625c      	str	r4, [r3, #36]	; 0x24
 8004e26:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
 8004e2a:	4639      	mov	r1, r7
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e34:	f000 b802 	b.w	8004e3c <__strtok_r>
 8004e38:	20000508 	.word	0x20000508

08004e3c <__strtok_r>:
 8004e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e3e:	b948      	cbnz	r0, 8004e54 <__strtok_r+0x18>
 8004e40:	6810      	ldr	r0, [r2, #0]
 8004e42:	b938      	cbnz	r0, 8004e54 <__strtok_r+0x18>
 8004e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e46:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004e4a:	b15e      	cbz	r6, 8004e64 <__strtok_r+0x28>
 8004e4c:	42b5      	cmp	r5, r6
 8004e4e:	d1fa      	bne.n	8004e46 <__strtok_r+0xa>
 8004e50:	b12b      	cbz	r3, 8004e5e <__strtok_r+0x22>
 8004e52:	4620      	mov	r0, r4
 8004e54:	4604      	mov	r4, r0
 8004e56:	460f      	mov	r7, r1
 8004e58:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004e5c:	e7f3      	b.n	8004e46 <__strtok_r+0xa>
 8004e5e:	6014      	str	r4, [r2, #0]
 8004e60:	7003      	strb	r3, [r0, #0]
 8004e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e64:	b94d      	cbnz	r5, 8004e7a <__strtok_r+0x3e>
 8004e66:	6015      	str	r5, [r2, #0]
 8004e68:	4628      	mov	r0, r5
 8004e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e6c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004e70:	42b5      	cmp	r5, r6
 8004e72:	d007      	beq.n	8004e84 <__strtok_r+0x48>
 8004e74:	2e00      	cmp	r6, #0
 8004e76:	d1f9      	bne.n	8004e6c <__strtok_r+0x30>
 8004e78:	461c      	mov	r4, r3
 8004e7a:	4623      	mov	r3, r4
 8004e7c:	460f      	mov	r7, r1
 8004e7e:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004e82:	e7f3      	b.n	8004e6c <__strtok_r+0x30>
 8004e84:	b115      	cbz	r5, 8004e8c <__strtok_r+0x50>
 8004e86:	2100      	movs	r1, #0
 8004e88:	7021      	strb	r1, [r4, #0]
 8004e8a:	e000      	b.n	8004e8e <__strtok_r+0x52>
 8004e8c:	462b      	mov	r3, r5
 8004e8e:	6013      	str	r3, [r2, #0]
 8004e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004e94 <_strtol_r>:
 8004e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e98:	4680      	mov	r8, r0
 8004e9a:	4840      	ldr	r0, [pc, #256]	; (8004f9c <_strtol_r+0x108>)
 8004e9c:	f8d0 9000 	ldr.w	r9, [r0]
 8004ea0:	460f      	mov	r7, r1
 8004ea2:	463d      	mov	r5, r7
 8004ea4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ea8:	eb09 0004 	add.w	r0, r9, r4
 8004eac:	7840      	ldrb	r0, [r0, #1]
 8004eae:	f000 0008 	and.w	r0, r0, #8
 8004eb2:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8004eb6:	b108      	cbz	r0, 8004ebc <_strtol_r+0x28>
 8004eb8:	462f      	mov	r7, r5
 8004eba:	e7f2      	b.n	8004ea2 <_strtol_r+0xe>
 8004ebc:	2c2d      	cmp	r4, #45	; 0x2d
 8004ebe:	d103      	bne.n	8004ec8 <_strtol_r+0x34>
 8004ec0:	1cbd      	adds	r5, r7, #2
 8004ec2:	787c      	ldrb	r4, [r7, #1]
 8004ec4:	2601      	movs	r6, #1
 8004ec6:	e003      	b.n	8004ed0 <_strtol_r+0x3c>
 8004ec8:	2c2b      	cmp	r4, #43	; 0x2b
 8004eca:	bf04      	itt	eq
 8004ecc:	787c      	ldrbeq	r4, [r7, #1]
 8004ece:	1cbd      	addeq	r5, r7, #2
 8004ed0:	b113      	cbz	r3, 8004ed8 <_strtol_r+0x44>
 8004ed2:	2b10      	cmp	r3, #16
 8004ed4:	d10a      	bne.n	8004eec <_strtol_r+0x58>
 8004ed6:	e05b      	b.n	8004f90 <_strtol_r+0xfc>
 8004ed8:	2c30      	cmp	r4, #48	; 0x30
 8004eda:	d157      	bne.n	8004f8c <_strtol_r+0xf8>
 8004edc:	7828      	ldrb	r0, [r5, #0]
 8004ede:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004ee2:	2858      	cmp	r0, #88	; 0x58
 8004ee4:	d14d      	bne.n	8004f82 <_strtol_r+0xee>
 8004ee6:	786c      	ldrb	r4, [r5, #1]
 8004ee8:	2310      	movs	r3, #16
 8004eea:	3502      	adds	r5, #2
 8004eec:	2e00      	cmp	r6, #0
 8004eee:	bf14      	ite	ne
 8004ef0:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8004ef4:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8004ef8:	2700      	movs	r7, #0
 8004efa:	fbbc faf3 	udiv	sl, ip, r3
 8004efe:	4638      	mov	r0, r7
 8004f00:	fb03 cc1a 	mls	ip, r3, sl, ip
 8004f04:	eb09 0e04 	add.w	lr, r9, r4
 8004f08:	f89e e001 	ldrb.w	lr, [lr, #1]
 8004f0c:	f01e 0f04 	tst.w	lr, #4
 8004f10:	d001      	beq.n	8004f16 <_strtol_r+0x82>
 8004f12:	3c30      	subs	r4, #48	; 0x30
 8004f14:	e00b      	b.n	8004f2e <_strtol_r+0x9a>
 8004f16:	f01e 0e03 	ands.w	lr, lr, #3
 8004f1a:	d01b      	beq.n	8004f54 <_strtol_r+0xc0>
 8004f1c:	f1be 0f01 	cmp.w	lr, #1
 8004f20:	bf0c      	ite	eq
 8004f22:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8004f26:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8004f2a:	ebce 0404 	rsb	r4, lr, r4
 8004f2e:	42a3      	cmp	r3, r4
 8004f30:	dd10      	ble.n	8004f54 <_strtol_r+0xc0>
 8004f32:	f1b7 3fff 	cmp.w	r7, #4294967295
 8004f36:	d00a      	beq.n	8004f4e <_strtol_r+0xba>
 8004f38:	4550      	cmp	r0, sl
 8004f3a:	d806      	bhi.n	8004f4a <_strtol_r+0xb6>
 8004f3c:	d101      	bne.n	8004f42 <_strtol_r+0xae>
 8004f3e:	4564      	cmp	r4, ip
 8004f40:	dc03      	bgt.n	8004f4a <_strtol_r+0xb6>
 8004f42:	fb03 4000 	mla	r0, r3, r0, r4
 8004f46:	2701      	movs	r7, #1
 8004f48:	e001      	b.n	8004f4e <_strtol_r+0xba>
 8004f4a:	f04f 37ff 	mov.w	r7, #4294967295
 8004f4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004f52:	e7d7      	b.n	8004f04 <_strtol_r+0x70>
 8004f54:	1c7b      	adds	r3, r7, #1
 8004f56:	d10c      	bne.n	8004f72 <_strtol_r+0xde>
 8004f58:	2e00      	cmp	r6, #0
 8004f5a:	f04f 0322 	mov.w	r3, #34	; 0x22
 8004f5e:	bf14      	ite	ne
 8004f60:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8004f64:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8004f68:	f8c8 3000 	str.w	r3, [r8]
 8004f6c:	b92a      	cbnz	r2, 8004f7a <_strtol_r+0xe6>
 8004f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f72:	b106      	cbz	r6, 8004f76 <_strtol_r+0xe2>
 8004f74:	4240      	negs	r0, r0
 8004f76:	b172      	cbz	r2, 8004f96 <_strtol_r+0x102>
 8004f78:	b107      	cbz	r7, 8004f7c <_strtol_r+0xe8>
 8004f7a:	1e69      	subs	r1, r5, #1
 8004f7c:	6011      	str	r1, [r2, #0]
 8004f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f82:	2430      	movs	r4, #48	; 0x30
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1b1      	bne.n	8004eec <_strtol_r+0x58>
 8004f88:	2308      	movs	r3, #8
 8004f8a:	e7af      	b.n	8004eec <_strtol_r+0x58>
 8004f8c:	230a      	movs	r3, #10
 8004f8e:	e7ad      	b.n	8004eec <_strtol_r+0x58>
 8004f90:	2c30      	cmp	r4, #48	; 0x30
 8004f92:	d0a3      	beq.n	8004edc <_strtol_r+0x48>
 8004f94:	e7aa      	b.n	8004eec <_strtol_r+0x58>
 8004f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f9a:	bf00      	nop
 8004f9c:	20000414 	.word	0x20000414

08004fa0 <strtol>:
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	460a      	mov	r2, r1
 8004fa4:	4601      	mov	r1, r0
 8004fa6:	4802      	ldr	r0, [pc, #8]	; (8004fb0 <strtol+0x10>)
 8004fa8:	6800      	ldr	r0, [r0, #0]
 8004faa:	f7ff bf73 	b.w	8004e94 <_strtol_r>
 8004fae:	bf00      	nop
 8004fb0:	20000508 	.word	0x20000508

08004fb4 <_strtoul_r>:
 8004fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fb8:	4680      	mov	r8, r0
 8004fba:	483c      	ldr	r0, [pc, #240]	; (80050ac <_strtoul_r+0xf8>)
 8004fbc:	f8d0 9000 	ldr.w	r9, [r0]
 8004fc0:	460e      	mov	r6, r1
 8004fc2:	4635      	mov	r5, r6
 8004fc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004fc8:	eb09 0004 	add.w	r0, r9, r4
 8004fcc:	7840      	ldrb	r0, [r0, #1]
 8004fce:	f000 0008 	and.w	r0, r0, #8
 8004fd2:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8004fd6:	b108      	cbz	r0, 8004fdc <_strtoul_r+0x28>
 8004fd8:	462e      	mov	r6, r5
 8004fda:	e7f2      	b.n	8004fc2 <_strtoul_r+0xe>
 8004fdc:	2c2d      	cmp	r4, #45	; 0x2d
 8004fde:	d103      	bne.n	8004fe8 <_strtoul_r+0x34>
 8004fe0:	1cb5      	adds	r5, r6, #2
 8004fe2:	7874      	ldrb	r4, [r6, #1]
 8004fe4:	2701      	movs	r7, #1
 8004fe6:	e003      	b.n	8004ff0 <_strtoul_r+0x3c>
 8004fe8:	2c2b      	cmp	r4, #43	; 0x2b
 8004fea:	bf04      	itt	eq
 8004fec:	7874      	ldrbeq	r4, [r6, #1]
 8004fee:	1cb5      	addeq	r5, r6, #2
 8004ff0:	b113      	cbz	r3, 8004ff8 <_strtoul_r+0x44>
 8004ff2:	2b10      	cmp	r3, #16
 8004ff4:	d10a      	bne.n	800500c <_strtoul_r+0x58>
 8004ff6:	e053      	b.n	80050a0 <_strtoul_r+0xec>
 8004ff8:	2c30      	cmp	r4, #48	; 0x30
 8004ffa:	d14f      	bne.n	800509c <_strtoul_r+0xe8>
 8004ffc:	7828      	ldrb	r0, [r5, #0]
 8004ffe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005002:	2858      	cmp	r0, #88	; 0x58
 8005004:	d145      	bne.n	8005092 <_strtoul_r+0xde>
 8005006:	786c      	ldrb	r4, [r5, #1]
 8005008:	2310      	movs	r3, #16
 800500a:	3502      	adds	r5, #2
 800500c:	f04f 3cff 	mov.w	ip, #4294967295
 8005010:	2600      	movs	r6, #0
 8005012:	fbbc fcf3 	udiv	ip, ip, r3
 8005016:	fb03 fa0c 	mul.w	sl, r3, ip
 800501a:	ea6f 0a0a 	mvn.w	sl, sl
 800501e:	4630      	mov	r0, r6
 8005020:	eb09 0e04 	add.w	lr, r9, r4
 8005024:	f89e e001 	ldrb.w	lr, [lr, #1]
 8005028:	f01e 0f04 	tst.w	lr, #4
 800502c:	d001      	beq.n	8005032 <_strtoul_r+0x7e>
 800502e:	3c30      	subs	r4, #48	; 0x30
 8005030:	e00b      	b.n	800504a <_strtoul_r+0x96>
 8005032:	f01e 0e03 	ands.w	lr, lr, #3
 8005036:	d01a      	beq.n	800506e <_strtoul_r+0xba>
 8005038:	f1be 0f01 	cmp.w	lr, #1
 800503c:	bf0c      	ite	eq
 800503e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8005042:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8005046:	ebce 0404 	rsb	r4, lr, r4
 800504a:	42a3      	cmp	r3, r4
 800504c:	dd0f      	ble.n	800506e <_strtoul_r+0xba>
 800504e:	2e00      	cmp	r6, #0
 8005050:	db08      	blt.n	8005064 <_strtoul_r+0xb0>
 8005052:	4560      	cmp	r0, ip
 8005054:	d806      	bhi.n	8005064 <_strtoul_r+0xb0>
 8005056:	d101      	bne.n	800505c <_strtoul_r+0xa8>
 8005058:	4554      	cmp	r4, sl
 800505a:	dc03      	bgt.n	8005064 <_strtoul_r+0xb0>
 800505c:	fb03 4000 	mla	r0, r3, r0, r4
 8005060:	2601      	movs	r6, #1
 8005062:	e001      	b.n	8005068 <_strtoul_r+0xb4>
 8005064:	f04f 36ff 	mov.w	r6, #4294967295
 8005068:	f815 4b01 	ldrb.w	r4, [r5], #1
 800506c:	e7d8      	b.n	8005020 <_strtoul_r+0x6c>
 800506e:	2e00      	cmp	r6, #0
 8005070:	da07      	bge.n	8005082 <_strtoul_r+0xce>
 8005072:	2322      	movs	r3, #34	; 0x22
 8005074:	f8c8 3000 	str.w	r3, [r8]
 8005078:	f04f 30ff 	mov.w	r0, #4294967295
 800507c:	b92a      	cbnz	r2, 800508a <_strtoul_r+0xd6>
 800507e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005082:	b107      	cbz	r7, 8005086 <_strtoul_r+0xd2>
 8005084:	4240      	negs	r0, r0
 8005086:	b172      	cbz	r2, 80050a6 <_strtoul_r+0xf2>
 8005088:	b106      	cbz	r6, 800508c <_strtoul_r+0xd8>
 800508a:	1e69      	subs	r1, r5, #1
 800508c:	6011      	str	r1, [r2, #0]
 800508e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005092:	2430      	movs	r4, #48	; 0x30
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1b9      	bne.n	800500c <_strtoul_r+0x58>
 8005098:	2308      	movs	r3, #8
 800509a:	e7b7      	b.n	800500c <_strtoul_r+0x58>
 800509c:	230a      	movs	r3, #10
 800509e:	e7b5      	b.n	800500c <_strtoul_r+0x58>
 80050a0:	2c30      	cmp	r4, #48	; 0x30
 80050a2:	d0ab      	beq.n	8004ffc <_strtoul_r+0x48>
 80050a4:	e7b2      	b.n	800500c <_strtoul_r+0x58>
 80050a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050aa:	bf00      	nop
 80050ac:	20000414 	.word	0x20000414

080050b0 <strtoul>:
 80050b0:	4613      	mov	r3, r2
 80050b2:	460a      	mov	r2, r1
 80050b4:	4601      	mov	r1, r0
 80050b6:	4802      	ldr	r0, [pc, #8]	; (80050c0 <strtoul+0x10>)
 80050b8:	6800      	ldr	r0, [r0, #0]
 80050ba:	f7ff bf7b 	b.w	8004fb4 <_strtoul_r>
 80050be:	bf00      	nop
 80050c0:	20000508 	.word	0x20000508
 80050c4:	00000000 	.word	0x00000000

080050c8 <_svfprintf_r>:
 80050c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050cc:	b0bd      	sub	sp, #244	; 0xf4
 80050ce:	468b      	mov	fp, r1
 80050d0:	9205      	str	r2, [sp, #20]
 80050d2:	461f      	mov	r7, r3
 80050d4:	4682      	mov	sl, r0
 80050d6:	f003 fd9b 	bl	8008c10 <_localeconv_r>
 80050da:	6803      	ldr	r3, [r0, #0]
 80050dc:	930d      	str	r3, [sp, #52]	; 0x34
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fb f880 	bl	80001e4 <strlen>
 80050e4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80050e8:	9008      	str	r0, [sp, #32]
 80050ea:	0619      	lsls	r1, r3, #24
 80050ec:	d515      	bpl.n	800511a <_svfprintf_r+0x52>
 80050ee:	f8db 3010 	ldr.w	r3, [fp, #16]
 80050f2:	b993      	cbnz	r3, 800511a <_svfprintf_r+0x52>
 80050f4:	2140      	movs	r1, #64	; 0x40
 80050f6:	4650      	mov	r0, sl
 80050f8:	f7fe fd48 	bl	8003b8c <_malloc_r>
 80050fc:	f8cb 0000 	str.w	r0, [fp]
 8005100:	f8cb 0010 	str.w	r0, [fp, #16]
 8005104:	b930      	cbnz	r0, 8005114 <_svfprintf_r+0x4c>
 8005106:	230c      	movs	r3, #12
 8005108:	f8ca 3000 	str.w	r3, [sl]
 800510c:	f04f 30ff 	mov.w	r0, #4294967295
 8005110:	f000 bf95 	b.w	800603e <_svfprintf_r+0xf76>
 8005114:	2340      	movs	r3, #64	; 0x40
 8005116:	f8cb 3014 	str.w	r3, [fp, #20]
 800511a:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8005380 <_svfprintf_r+0x2b8>
 800511e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005122:	2300      	movs	r3, #0
 8005124:	ac2c      	add	r4, sp, #176	; 0xb0
 8005126:	941f      	str	r4, [sp, #124]	; 0x7c
 8005128:	9321      	str	r3, [sp, #132]	; 0x84
 800512a:	9320      	str	r3, [sp, #128]	; 0x80
 800512c:	9304      	str	r3, [sp, #16]
 800512e:	9311      	str	r3, [sp, #68]	; 0x44
 8005130:	9310      	str	r3, [sp, #64]	; 0x40
 8005132:	930a      	str	r3, [sp, #40]	; 0x28
 8005134:	9d05      	ldr	r5, [sp, #20]
 8005136:	462b      	mov	r3, r5
 8005138:	f813 2b01 	ldrb.w	r2, [r3], #1
 800513c:	b11a      	cbz	r2, 8005146 <_svfprintf_r+0x7e>
 800513e:	2a25      	cmp	r2, #37	; 0x25
 8005140:	d001      	beq.n	8005146 <_svfprintf_r+0x7e>
 8005142:	461d      	mov	r5, r3
 8005144:	e7f7      	b.n	8005136 <_svfprintf_r+0x6e>
 8005146:	9b05      	ldr	r3, [sp, #20]
 8005148:	1aee      	subs	r6, r5, r3
 800514a:	d017      	beq.n	800517c <_svfprintf_r+0xb4>
 800514c:	e884 0048 	stmia.w	r4, {r3, r6}
 8005150:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005152:	4433      	add	r3, r6
 8005154:	9321      	str	r3, [sp, #132]	; 0x84
 8005156:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005158:	3301      	adds	r3, #1
 800515a:	2b07      	cmp	r3, #7
 800515c:	9320      	str	r3, [sp, #128]	; 0x80
 800515e:	dc01      	bgt.n	8005164 <_svfprintf_r+0x9c>
 8005160:	3408      	adds	r4, #8
 8005162:	e008      	b.n	8005176 <_svfprintf_r+0xae>
 8005164:	aa1f      	add	r2, sp, #124	; 0x7c
 8005166:	4659      	mov	r1, fp
 8005168:	4650      	mov	r0, sl
 800516a:	f004 fbd3 	bl	8009914 <__ssprint_r>
 800516e:	2800      	cmp	r0, #0
 8005170:	f040 862c 	bne.w	8005dcc <_svfprintf_r+0xd04>
 8005174:	ac2c      	add	r4, sp, #176	; 0xb0
 8005176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005178:	4433      	add	r3, r6
 800517a:	930a      	str	r3, [sp, #40]	; 0x28
 800517c:	782b      	ldrb	r3, [r5, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 861d 	beq.w	8005dbe <_svfprintf_r+0xcf6>
 8005184:	2200      	movs	r2, #0
 8005186:	1c6b      	adds	r3, r5, #1
 8005188:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800518c:	4611      	mov	r1, r2
 800518e:	f04f 39ff 	mov.w	r9, #4294967295
 8005192:	9209      	str	r2, [sp, #36]	; 0x24
 8005194:	4615      	mov	r5, r2
 8005196:	200a      	movs	r0, #10
 8005198:	1c5e      	adds	r6, r3, #1
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	9605      	str	r6, [sp, #20]
 800519e:	9302      	str	r3, [sp, #8]
 80051a0:	9b02      	ldr	r3, [sp, #8]
 80051a2:	3b20      	subs	r3, #32
 80051a4:	2b58      	cmp	r3, #88	; 0x58
 80051a6:	f200 8263 	bhi.w	8005670 <_svfprintf_r+0x5a8>
 80051aa:	e8df f013 	tbh	[pc, r3, lsl #1]
 80051ae:	005c      	.short	0x005c
 80051b0:	02610261 	.word	0x02610261
 80051b4:	0261006b 	.word	0x0261006b
 80051b8:	02610261 	.word	0x02610261
 80051bc:	02610261 	.word	0x02610261
 80051c0:	006e0261 	.word	0x006e0261
 80051c4:	02610059 	.word	0x02610059
 80051c8:	007c0079 	.word	0x007c0079
 80051cc:	00a30261 	.word	0x00a30261
 80051d0:	00a600a6 	.word	0x00a600a6
 80051d4:	00a600a6 	.word	0x00a600a6
 80051d8:	00a600a6 	.word	0x00a600a6
 80051dc:	00a600a6 	.word	0x00a600a6
 80051e0:	026100a6 	.word	0x026100a6
 80051e4:	02610261 	.word	0x02610261
 80051e8:	02610261 	.word	0x02610261
 80051ec:	02610261 	.word	0x02610261
 80051f0:	02610261 	.word	0x02610261
 80051f4:	00d60261 	.word	0x00d60261
 80051f8:	0261010b 	.word	0x0261010b
 80051fc:	0261010b 	.word	0x0261010b
 8005200:	02610261 	.word	0x02610261
 8005204:	00b90261 	.word	0x00b90261
 8005208:	02610261 	.word	0x02610261
 800520c:	02610152 	.word	0x02610152
 8005210:	02610261 	.word	0x02610261
 8005214:	02610261 	.word	0x02610261
 8005218:	02610199 	.word	0x02610199
 800521c:	00660261 	.word	0x00660261
 8005220:	02610261 	.word	0x02610261
 8005224:	02610261 	.word	0x02610261
 8005228:	02610261 	.word	0x02610261
 800522c:	02610261 	.word	0x02610261
 8005230:	02610261 	.word	0x02610261
 8005234:	006100cd 	.word	0x006100cd
 8005238:	010b010b 	.word	0x010b010b
 800523c:	00bc010b 	.word	0x00bc010b
 8005240:	02610061 	.word	0x02610061
 8005244:	00bf0261 	.word	0x00bf0261
 8005248:	01340261 	.word	0x01340261
 800524c:	016f0154 	.word	0x016f0154
 8005250:	026100ca 	.word	0x026100ca
 8005254:	02610180 	.word	0x02610180
 8005258:	0261019b 	.word	0x0261019b
 800525c:	01b30261 	.word	0x01b30261
 8005260:	2201      	movs	r2, #1
 8005262:	212b      	movs	r1, #43	; 0x2b
 8005264:	e002      	b.n	800526c <_svfprintf_r+0x1a4>
 8005266:	b909      	cbnz	r1, 800526c <_svfprintf_r+0x1a4>
 8005268:	2201      	movs	r2, #1
 800526a:	2120      	movs	r1, #32
 800526c:	9b05      	ldr	r3, [sp, #20]
 800526e:	e793      	b.n	8005198 <_svfprintf_r+0xd0>
 8005270:	2a00      	cmp	r2, #0
 8005272:	d077      	beq.n	8005364 <_svfprintf_r+0x29c>
 8005274:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005278:	e074      	b.n	8005364 <_svfprintf_r+0x29c>
 800527a:	b10a      	cbz	r2, 8005280 <_svfprintf_r+0x1b8>
 800527c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005280:	4b41      	ldr	r3, [pc, #260]	; (8005388 <_svfprintf_r+0x2c0>)
 8005282:	e14b      	b.n	800551c <_svfprintf_r+0x454>
 8005284:	f045 0501 	orr.w	r5, r5, #1
 8005288:	e7f0      	b.n	800526c <_svfprintf_r+0x1a4>
 800528a:	683e      	ldr	r6, [r7, #0]
 800528c:	9609      	str	r6, [sp, #36]	; 0x24
 800528e:	2e00      	cmp	r6, #0
 8005290:	f107 0304 	add.w	r3, r7, #4
 8005294:	db01      	blt.n	800529a <_svfprintf_r+0x1d2>
 8005296:	461f      	mov	r7, r3
 8005298:	e7e8      	b.n	800526c <_svfprintf_r+0x1a4>
 800529a:	4276      	negs	r6, r6
 800529c:	9609      	str	r6, [sp, #36]	; 0x24
 800529e:	461f      	mov	r7, r3
 80052a0:	f045 0504 	orr.w	r5, r5, #4
 80052a4:	e7e2      	b.n	800526c <_svfprintf_r+0x1a4>
 80052a6:	9e05      	ldr	r6, [sp, #20]
 80052a8:	9b05      	ldr	r3, [sp, #20]
 80052aa:	7836      	ldrb	r6, [r6, #0]
 80052ac:	9602      	str	r6, [sp, #8]
 80052ae:	2e2a      	cmp	r6, #42	; 0x2a
 80052b0:	f103 0301 	add.w	r3, r3, #1
 80052b4:	d002      	beq.n	80052bc <_svfprintf_r+0x1f4>
 80052b6:	f04f 0900 	mov.w	r9, #0
 80052ba:	e00a      	b.n	80052d2 <_svfprintf_r+0x20a>
 80052bc:	f8d7 9000 	ldr.w	r9, [r7]
 80052c0:	9305      	str	r3, [sp, #20]
 80052c2:	1d3e      	adds	r6, r7, #4
 80052c4:	f1b9 0f00 	cmp.w	r9, #0
 80052c8:	4637      	mov	r7, r6
 80052ca:	dacf      	bge.n	800526c <_svfprintf_r+0x1a4>
 80052cc:	f04f 39ff 	mov.w	r9, #4294967295
 80052d0:	e7cc      	b.n	800526c <_svfprintf_r+0x1a4>
 80052d2:	9305      	str	r3, [sp, #20]
 80052d4:	9b02      	ldr	r3, [sp, #8]
 80052d6:	3b30      	subs	r3, #48	; 0x30
 80052d8:	2b09      	cmp	r3, #9
 80052da:	d808      	bhi.n	80052ee <_svfprintf_r+0x226>
 80052dc:	fb00 3909 	mla	r9, r0, r9, r3
 80052e0:	9b05      	ldr	r3, [sp, #20]
 80052e2:	461e      	mov	r6, r3
 80052e4:	f816 3b01 	ldrb.w	r3, [r6], #1
 80052e8:	9302      	str	r3, [sp, #8]
 80052ea:	4633      	mov	r3, r6
 80052ec:	e7f1      	b.n	80052d2 <_svfprintf_r+0x20a>
 80052ee:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 80052f2:	e755      	b.n	80051a0 <_svfprintf_r+0xd8>
 80052f4:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80052f8:	e7b8      	b.n	800526c <_svfprintf_r+0x1a4>
 80052fa:	2300      	movs	r3, #0
 80052fc:	9309      	str	r3, [sp, #36]	; 0x24
 80052fe:	9b02      	ldr	r3, [sp, #8]
 8005300:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005302:	3b30      	subs	r3, #48	; 0x30
 8005304:	fb00 3306 	mla	r3, r0, r6, r3
 8005308:	9309      	str	r3, [sp, #36]	; 0x24
 800530a:	9b05      	ldr	r3, [sp, #20]
 800530c:	461e      	mov	r6, r3
 800530e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8005312:	9302      	str	r3, [sp, #8]
 8005314:	9b02      	ldr	r3, [sp, #8]
 8005316:	9605      	str	r6, [sp, #20]
 8005318:	3b30      	subs	r3, #48	; 0x30
 800531a:	2b09      	cmp	r3, #9
 800531c:	d9ef      	bls.n	80052fe <_svfprintf_r+0x236>
 800531e:	e73f      	b.n	80051a0 <_svfprintf_r+0xd8>
 8005320:	f045 0508 	orr.w	r5, r5, #8
 8005324:	e7a2      	b.n	800526c <_svfprintf_r+0x1a4>
 8005326:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800532a:	e79f      	b.n	800526c <_svfprintf_r+0x1a4>
 800532c:	9b05      	ldr	r3, [sp, #20]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b6c      	cmp	r3, #108	; 0x6c
 8005332:	d103      	bne.n	800533c <_svfprintf_r+0x274>
 8005334:	9b05      	ldr	r3, [sp, #20]
 8005336:	3301      	adds	r3, #1
 8005338:	9305      	str	r3, [sp, #20]
 800533a:	e002      	b.n	8005342 <_svfprintf_r+0x27a>
 800533c:	f045 0510 	orr.w	r5, r5, #16
 8005340:	e794      	b.n	800526c <_svfprintf_r+0x1a4>
 8005342:	f045 0520 	orr.w	r5, r5, #32
 8005346:	e791      	b.n	800526c <_svfprintf_r+0x1a4>
 8005348:	1d3b      	adds	r3, r7, #4
 800534a:	9303      	str	r3, [sp, #12]
 800534c:	2600      	movs	r6, #0
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8005354:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005358:	e199      	b.n	800568e <_svfprintf_r+0x5c6>
 800535a:	b10a      	cbz	r2, 8005360 <_svfprintf_r+0x298>
 800535c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005360:	f045 0510 	orr.w	r5, r5, #16
 8005364:	06aa      	lsls	r2, r5, #26
 8005366:	d511      	bpl.n	800538c <_svfprintf_r+0x2c4>
 8005368:	3707      	adds	r7, #7
 800536a:	f027 0707 	bic.w	r7, r7, #7
 800536e:	f107 0308 	add.w	r3, r7, #8
 8005372:	9303      	str	r3, [sp, #12]
 8005374:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005378:	e017      	b.n	80053aa <_svfprintf_r+0x2e2>
 800537a:	bf00      	nop
 800537c:	f3af 8000 	nop.w
	...
 8005388:	08009fd0 	.word	0x08009fd0
 800538c:	f015 0f10 	tst.w	r5, #16
 8005390:	f107 0304 	add.w	r3, r7, #4
 8005394:	d002      	beq.n	800539c <_svfprintf_r+0x2d4>
 8005396:	9303      	str	r3, [sp, #12]
 8005398:	683e      	ldr	r6, [r7, #0]
 800539a:	e005      	b.n	80053a8 <_svfprintf_r+0x2e0>
 800539c:	683e      	ldr	r6, [r7, #0]
 800539e:	9303      	str	r3, [sp, #12]
 80053a0:	f015 0f40 	tst.w	r5, #64	; 0x40
 80053a4:	bf18      	it	ne
 80053a6:	b236      	sxthne	r6, r6
 80053a8:	17f7      	asrs	r7, r6, #31
 80053aa:	2e00      	cmp	r6, #0
 80053ac:	f177 0300 	sbcs.w	r3, r7, #0
 80053b0:	f280 80de 	bge.w	8005570 <_svfprintf_r+0x4a8>
 80053b4:	4276      	negs	r6, r6
 80053b6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80053ba:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80053be:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80053c2:	e0d5      	b.n	8005570 <_svfprintf_r+0x4a8>
 80053c4:	b10a      	cbz	r2, 80053ca <_svfprintf_r+0x302>
 80053c6:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80053ca:	3707      	adds	r7, #7
 80053cc:	f027 0707 	bic.w	r7, r7, #7
 80053d0:	f107 0308 	add.w	r3, r7, #8
 80053d4:	9303      	str	r3, [sp, #12]
 80053d6:	ed97 7b00 	vldr	d7, [r7]
 80053da:	ed8d 7b06 	vstr	d7, [sp, #24]
 80053de:	9b06      	ldr	r3, [sp, #24]
 80053e0:	9312      	str	r3, [sp, #72]	; 0x48
 80053e2:	9b07      	ldr	r3, [sp, #28]
 80053e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80053ea:	f04f 32ff 	mov.w	r2, #4294967295
 80053ee:	4bab      	ldr	r3, [pc, #684]	; (800569c <_svfprintf_r+0x5d4>)
 80053f0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80053f4:	f7fb fba6 	bl	8000b44 <__aeabi_dcmpun>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	f040 84f1 	bne.w	8005de0 <_svfprintf_r+0xd18>
 80053fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005402:	4ba6      	ldr	r3, [pc, #664]	; (800569c <_svfprintf_r+0x5d4>)
 8005404:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005408:	f7fb fb7e 	bl	8000b08 <__aeabi_dcmple>
 800540c:	2800      	cmp	r0, #0
 800540e:	f040 84e7 	bne.w	8005de0 <_svfprintf_r+0xd18>
 8005412:	f000 bdfd 	b.w	8006010 <_svfprintf_r+0xf48>
 8005416:	b10a      	cbz	r2, 800541c <_svfprintf_r+0x354>
 8005418:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800541c:	f015 0f20 	tst.w	r5, #32
 8005420:	f107 0304 	add.w	r3, r7, #4
 8005424:	d007      	beq.n	8005436 <_svfprintf_r+0x36e>
 8005426:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	17ce      	asrs	r6, r1, #31
 800542c:	4608      	mov	r0, r1
 800542e:	4631      	mov	r1, r6
 8005430:	e9c2 0100 	strd	r0, r1, [r2]
 8005434:	e00b      	b.n	800544e <_svfprintf_r+0x386>
 8005436:	06e9      	lsls	r1, r5, #27
 8005438:	d406      	bmi.n	8005448 <_svfprintf_r+0x380>
 800543a:	066a      	lsls	r2, r5, #25
 800543c:	d504      	bpl.n	8005448 <_svfprintf_r+0x380>
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8005444:	8011      	strh	r1, [r2, #0]
 8005446:	e002      	b.n	800544e <_svfprintf_r+0x386>
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800544c:	6011      	str	r1, [r2, #0]
 800544e:	461f      	mov	r7, r3
 8005450:	e670      	b.n	8005134 <_svfprintf_r+0x6c>
 8005452:	f045 0510 	orr.w	r5, r5, #16
 8005456:	f015 0320 	ands.w	r3, r5, #32
 800545a:	d009      	beq.n	8005470 <_svfprintf_r+0x3a8>
 800545c:	3707      	adds	r7, #7
 800545e:	f027 0707 	bic.w	r7, r7, #7
 8005462:	f107 0308 	add.w	r3, r7, #8
 8005466:	e9d7 6700 	ldrd	r6, r7, [r7]
 800546a:	9303      	str	r3, [sp, #12]
 800546c:	2300      	movs	r3, #0
 800546e:	e07b      	b.n	8005568 <_svfprintf_r+0x4a0>
 8005470:	1d3a      	adds	r2, r7, #4
 8005472:	f015 0110 	ands.w	r1, r5, #16
 8005476:	9203      	str	r2, [sp, #12]
 8005478:	d105      	bne.n	8005486 <_svfprintf_r+0x3be>
 800547a:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800547e:	d002      	beq.n	8005486 <_svfprintf_r+0x3be>
 8005480:	883e      	ldrh	r6, [r7, #0]
 8005482:	2700      	movs	r7, #0
 8005484:	e7f2      	b.n	800546c <_svfprintf_r+0x3a4>
 8005486:	683e      	ldr	r6, [r7, #0]
 8005488:	2700      	movs	r7, #0
 800548a:	e06d      	b.n	8005568 <_svfprintf_r+0x4a0>
 800548c:	1d3b      	adds	r3, r7, #4
 800548e:	9303      	str	r3, [sp, #12]
 8005490:	2330      	movs	r3, #48	; 0x30
 8005492:	2278      	movs	r2, #120	; 0x78
 8005494:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8005498:	4b81      	ldr	r3, [pc, #516]	; (80056a0 <_svfprintf_r+0x5d8>)
 800549a:	683e      	ldr	r6, [r7, #0]
 800549c:	9311      	str	r3, [sp, #68]	; 0x44
 800549e:	2700      	movs	r7, #0
 80054a0:	f045 0502 	orr.w	r5, r5, #2
 80054a4:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 80054a8:	2302      	movs	r3, #2
 80054aa:	9202      	str	r2, [sp, #8]
 80054ac:	e05c      	b.n	8005568 <_svfprintf_r+0x4a0>
 80054ae:	2600      	movs	r6, #0
 80054b0:	1d3b      	adds	r3, r7, #4
 80054b2:	45b1      	cmp	r9, r6
 80054b4:	9303      	str	r3, [sp, #12]
 80054b6:	f8d7 8000 	ldr.w	r8, [r7]
 80054ba:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80054be:	db0a      	blt.n	80054d6 <_svfprintf_r+0x40e>
 80054c0:	464a      	mov	r2, r9
 80054c2:	4631      	mov	r1, r6
 80054c4:	4640      	mov	r0, r8
 80054c6:	f7fa fe9b 	bl	8000200 <memchr>
 80054ca:	2800      	cmp	r0, #0
 80054cc:	f000 80ea 	beq.w	80056a4 <_svfprintf_r+0x5dc>
 80054d0:	ebc8 0900 	rsb	r9, r8, r0
 80054d4:	e0e7      	b.n	80056a6 <_svfprintf_r+0x5de>
 80054d6:	4640      	mov	r0, r8
 80054d8:	f7fa fe84 	bl	80001e4 <strlen>
 80054dc:	4681      	mov	r9, r0
 80054de:	e0e2      	b.n	80056a6 <_svfprintf_r+0x5de>
 80054e0:	f045 0510 	orr.w	r5, r5, #16
 80054e4:	06ae      	lsls	r6, r5, #26
 80054e6:	d508      	bpl.n	80054fa <_svfprintf_r+0x432>
 80054e8:	3707      	adds	r7, #7
 80054ea:	f027 0707 	bic.w	r7, r7, #7
 80054ee:	f107 0308 	add.w	r3, r7, #8
 80054f2:	9303      	str	r3, [sp, #12]
 80054f4:	e9d7 6700 	ldrd	r6, r7, [r7]
 80054f8:	e00a      	b.n	8005510 <_svfprintf_r+0x448>
 80054fa:	1d3b      	adds	r3, r7, #4
 80054fc:	f015 0f10 	tst.w	r5, #16
 8005500:	9303      	str	r3, [sp, #12]
 8005502:	d103      	bne.n	800550c <_svfprintf_r+0x444>
 8005504:	0668      	lsls	r0, r5, #25
 8005506:	d501      	bpl.n	800550c <_svfprintf_r+0x444>
 8005508:	883e      	ldrh	r6, [r7, #0]
 800550a:	e000      	b.n	800550e <_svfprintf_r+0x446>
 800550c:	683e      	ldr	r6, [r7, #0]
 800550e:	2700      	movs	r7, #0
 8005510:	2301      	movs	r3, #1
 8005512:	e029      	b.n	8005568 <_svfprintf_r+0x4a0>
 8005514:	b10a      	cbz	r2, 800551a <_svfprintf_r+0x452>
 8005516:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800551a:	4b61      	ldr	r3, [pc, #388]	; (80056a0 <_svfprintf_r+0x5d8>)
 800551c:	9311      	str	r3, [sp, #68]	; 0x44
 800551e:	06a9      	lsls	r1, r5, #26
 8005520:	d508      	bpl.n	8005534 <_svfprintf_r+0x46c>
 8005522:	3707      	adds	r7, #7
 8005524:	f027 0707 	bic.w	r7, r7, #7
 8005528:	f107 0308 	add.w	r3, r7, #8
 800552c:	9303      	str	r3, [sp, #12]
 800552e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005532:	e00a      	b.n	800554a <_svfprintf_r+0x482>
 8005534:	1d3b      	adds	r3, r7, #4
 8005536:	f015 0f10 	tst.w	r5, #16
 800553a:	9303      	str	r3, [sp, #12]
 800553c:	d103      	bne.n	8005546 <_svfprintf_r+0x47e>
 800553e:	066a      	lsls	r2, r5, #25
 8005540:	d501      	bpl.n	8005546 <_svfprintf_r+0x47e>
 8005542:	883e      	ldrh	r6, [r7, #0]
 8005544:	e000      	b.n	8005548 <_svfprintf_r+0x480>
 8005546:	683e      	ldr	r6, [r7, #0]
 8005548:	2700      	movs	r7, #0
 800554a:	07eb      	lsls	r3, r5, #31
 800554c:	d50b      	bpl.n	8005566 <_svfprintf_r+0x49e>
 800554e:	ea56 0307 	orrs.w	r3, r6, r7
 8005552:	d008      	beq.n	8005566 <_svfprintf_r+0x49e>
 8005554:	2330      	movs	r3, #48	; 0x30
 8005556:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800555a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800555e:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8005562:	f045 0502 	orr.w	r5, r5, #2
 8005566:	2302      	movs	r3, #2
 8005568:	2200      	movs	r2, #0
 800556a:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800556e:	e000      	b.n	8005572 <_svfprintf_r+0x4aa>
 8005570:	2301      	movs	r3, #1
 8005572:	f1b9 0f00 	cmp.w	r9, #0
 8005576:	f2c0 855c 	blt.w	8006032 <_svfprintf_r+0xf6a>
 800557a:	ea56 0207 	orrs.w	r2, r6, r7
 800557e:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 8005582:	d103      	bne.n	800558c <_svfprintf_r+0x4c4>
 8005584:	f1b9 0f00 	cmp.w	r9, #0
 8005588:	d05f      	beq.n	800564a <_svfprintf_r+0x582>
 800558a:	e006      	b.n	800559a <_svfprintf_r+0x4d2>
 800558c:	460d      	mov	r5, r1
 800558e:	2b01      	cmp	r3, #1
 8005590:	d025      	beq.n	80055de <_svfprintf_r+0x516>
 8005592:	2b02      	cmp	r3, #2
 8005594:	d046      	beq.n	8005624 <_svfprintf_r+0x55c>
 8005596:	4629      	mov	r1, r5
 8005598:	e007      	b.n	80055aa <_svfprintf_r+0x4e2>
 800559a:	460d      	mov	r5, r1
 800559c:	2b01      	cmp	r3, #1
 800559e:	d022      	beq.n	80055e6 <_svfprintf_r+0x51e>
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d03d      	beq.n	8005620 <_svfprintf_r+0x558>
 80055a4:	4629      	mov	r1, r5
 80055a6:	2600      	movs	r6, #0
 80055a8:	2700      	movs	r7, #0
 80055aa:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80055ae:	08f2      	lsrs	r2, r6, #3
 80055b0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80055b4:	08f8      	lsrs	r0, r7, #3
 80055b6:	f006 0307 	and.w	r3, r6, #7
 80055ba:	4607      	mov	r7, r0
 80055bc:	4616      	mov	r6, r2
 80055be:	3330      	adds	r3, #48	; 0x30
 80055c0:	ea56 0207 	orrs.w	r2, r6, r7
 80055c4:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80055c8:	d1f1      	bne.n	80055ae <_svfprintf_r+0x4e6>
 80055ca:	07e8      	lsls	r0, r5, #31
 80055cc:	d548      	bpl.n	8005660 <_svfprintf_r+0x598>
 80055ce:	2b30      	cmp	r3, #48	; 0x30
 80055d0:	d046      	beq.n	8005660 <_svfprintf_r+0x598>
 80055d2:	2330      	movs	r3, #48	; 0x30
 80055d4:	f808 3c01 	strb.w	r3, [r8, #-1]
 80055d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80055dc:	e040      	b.n	8005660 <_svfprintf_r+0x598>
 80055de:	2f00      	cmp	r7, #0
 80055e0:	bf08      	it	eq
 80055e2:	2e0a      	cmpeq	r6, #10
 80055e4:	d205      	bcs.n	80055f2 <_svfprintf_r+0x52a>
 80055e6:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80055ea:	3630      	adds	r6, #48	; 0x30
 80055ec:	f808 6d41 	strb.w	r6, [r8, #-65]!
 80055f0:	e029      	b.n	8005646 <_svfprintf_r+0x57e>
 80055f2:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80055f6:	4630      	mov	r0, r6
 80055f8:	4639      	mov	r1, r7
 80055fa:	220a      	movs	r2, #10
 80055fc:	2300      	movs	r3, #0
 80055fe:	f7fb fb4f 	bl	8000ca0 <__aeabi_uldivmod>
 8005602:	3230      	adds	r2, #48	; 0x30
 8005604:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8005608:	2300      	movs	r3, #0
 800560a:	4630      	mov	r0, r6
 800560c:	4639      	mov	r1, r7
 800560e:	220a      	movs	r2, #10
 8005610:	f7fb fb46 	bl	8000ca0 <__aeabi_uldivmod>
 8005614:	4606      	mov	r6, r0
 8005616:	460f      	mov	r7, r1
 8005618:	ea56 0307 	orrs.w	r3, r6, r7
 800561c:	d1eb      	bne.n	80055f6 <_svfprintf_r+0x52e>
 800561e:	e012      	b.n	8005646 <_svfprintf_r+0x57e>
 8005620:	2600      	movs	r6, #0
 8005622:	2700      	movs	r7, #0
 8005624:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005628:	f006 030f 	and.w	r3, r6, #15
 800562c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800562e:	5cd3      	ldrb	r3, [r2, r3]
 8005630:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8005634:	0933      	lsrs	r3, r6, #4
 8005636:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800563a:	093a      	lsrs	r2, r7, #4
 800563c:	461e      	mov	r6, r3
 800563e:	4617      	mov	r7, r2
 8005640:	ea56 0307 	orrs.w	r3, r6, r7
 8005644:	d1f0      	bne.n	8005628 <_svfprintf_r+0x560>
 8005646:	4629      	mov	r1, r5
 8005648:	e00a      	b.n	8005660 <_svfprintf_r+0x598>
 800564a:	b93b      	cbnz	r3, 800565c <_svfprintf_r+0x594>
 800564c:	07ea      	lsls	r2, r5, #31
 800564e:	d505      	bpl.n	800565c <_svfprintf_r+0x594>
 8005650:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8005654:	2330      	movs	r3, #48	; 0x30
 8005656:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800565a:	e001      	b.n	8005660 <_svfprintf_r+0x598>
 800565c:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005660:	464e      	mov	r6, r9
 8005662:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8005666:	ebc8 0909 	rsb	r9, r8, r9
 800566a:	460d      	mov	r5, r1
 800566c:	2700      	movs	r7, #0
 800566e:	e01b      	b.n	80056a8 <_svfprintf_r+0x5e0>
 8005670:	b10a      	cbz	r2, 8005676 <_svfprintf_r+0x5ae>
 8005672:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005676:	9b02      	ldr	r3, [sp, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 83a0 	beq.w	8005dbe <_svfprintf_r+0xcf6>
 800567e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005682:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8005686:	2600      	movs	r6, #0
 8005688:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800568c:	9703      	str	r7, [sp, #12]
 800568e:	f04f 0901 	mov.w	r9, #1
 8005692:	4637      	mov	r7, r6
 8005694:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8005698:	e006      	b.n	80056a8 <_svfprintf_r+0x5e0>
 800569a:	bf00      	nop
 800569c:	7fefffff 	.word	0x7fefffff
 80056a0:	08009fe1 	.word	0x08009fe1
 80056a4:	4606      	mov	r6, r0
 80056a6:	4637      	mov	r7, r6
 80056a8:	454e      	cmp	r6, r9
 80056aa:	4633      	mov	r3, r6
 80056ac:	bfb8      	it	lt
 80056ae:	464b      	movlt	r3, r9
 80056b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80056b2:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80056b6:	b113      	cbz	r3, 80056be <_svfprintf_r+0x5f6>
 80056b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056ba:	3301      	adds	r3, #1
 80056bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80056be:	f015 0302 	ands.w	r3, r5, #2
 80056c2:	9314      	str	r3, [sp, #80]	; 0x50
 80056c4:	bf1e      	ittt	ne
 80056c6:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 80056c8:	3302      	addne	r3, #2
 80056ca:	930b      	strne	r3, [sp, #44]	; 0x2c
 80056cc:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80056d0:	9315      	str	r3, [sp, #84]	; 0x54
 80056d2:	d139      	bne.n	8005748 <_svfprintf_r+0x680>
 80056d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80056d8:	1a9b      	subs	r3, r3, r2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	930c      	str	r3, [sp, #48]	; 0x30
 80056de:	dd33      	ble.n	8005748 <_svfprintf_r+0x680>
 80056e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056e2:	2b10      	cmp	r3, #16
 80056e4:	4ba6      	ldr	r3, [pc, #664]	; (8005980 <_svfprintf_r+0x8b8>)
 80056e6:	6023      	str	r3, [r4, #0]
 80056e8:	dd18      	ble.n	800571c <_svfprintf_r+0x654>
 80056ea:	2310      	movs	r3, #16
 80056ec:	6063      	str	r3, [r4, #4]
 80056ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056f0:	3310      	adds	r3, #16
 80056f2:	9321      	str	r3, [sp, #132]	; 0x84
 80056f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80056f6:	3301      	adds	r3, #1
 80056f8:	2b07      	cmp	r3, #7
 80056fa:	9320      	str	r3, [sp, #128]	; 0x80
 80056fc:	dc01      	bgt.n	8005702 <_svfprintf_r+0x63a>
 80056fe:	3408      	adds	r4, #8
 8005700:	e008      	b.n	8005714 <_svfprintf_r+0x64c>
 8005702:	aa1f      	add	r2, sp, #124	; 0x7c
 8005704:	4659      	mov	r1, fp
 8005706:	4650      	mov	r0, sl
 8005708:	f004 f904 	bl	8009914 <__ssprint_r>
 800570c:	2800      	cmp	r0, #0
 800570e:	f040 835d 	bne.w	8005dcc <_svfprintf_r+0xd04>
 8005712:	ac2c      	add	r4, sp, #176	; 0xb0
 8005714:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005716:	3b10      	subs	r3, #16
 8005718:	930c      	str	r3, [sp, #48]	; 0x30
 800571a:	e7e1      	b.n	80056e0 <_svfprintf_r+0x618>
 800571c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800571e:	6063      	str	r3, [r4, #4]
 8005720:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005722:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005724:	4413      	add	r3, r2
 8005726:	9321      	str	r3, [sp, #132]	; 0x84
 8005728:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800572a:	3301      	adds	r3, #1
 800572c:	2b07      	cmp	r3, #7
 800572e:	9320      	str	r3, [sp, #128]	; 0x80
 8005730:	dc01      	bgt.n	8005736 <_svfprintf_r+0x66e>
 8005732:	3408      	adds	r4, #8
 8005734:	e008      	b.n	8005748 <_svfprintf_r+0x680>
 8005736:	aa1f      	add	r2, sp, #124	; 0x7c
 8005738:	4659      	mov	r1, fp
 800573a:	4650      	mov	r0, sl
 800573c:	f004 f8ea 	bl	8009914 <__ssprint_r>
 8005740:	2800      	cmp	r0, #0
 8005742:	f040 8343 	bne.w	8005dcc <_svfprintf_r+0xd04>
 8005746:	ac2c      	add	r4, sp, #176	; 0xb0
 8005748:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800574c:	b1bb      	cbz	r3, 800577e <_svfprintf_r+0x6b6>
 800574e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8005752:	6023      	str	r3, [r4, #0]
 8005754:	2301      	movs	r3, #1
 8005756:	6063      	str	r3, [r4, #4]
 8005758:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800575a:	3301      	adds	r3, #1
 800575c:	9321      	str	r3, [sp, #132]	; 0x84
 800575e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005760:	3301      	adds	r3, #1
 8005762:	2b07      	cmp	r3, #7
 8005764:	9320      	str	r3, [sp, #128]	; 0x80
 8005766:	dc01      	bgt.n	800576c <_svfprintf_r+0x6a4>
 8005768:	3408      	adds	r4, #8
 800576a:	e008      	b.n	800577e <_svfprintf_r+0x6b6>
 800576c:	aa1f      	add	r2, sp, #124	; 0x7c
 800576e:	4659      	mov	r1, fp
 8005770:	4650      	mov	r0, sl
 8005772:	f004 f8cf 	bl	8009914 <__ssprint_r>
 8005776:	2800      	cmp	r0, #0
 8005778:	f040 8328 	bne.w	8005dcc <_svfprintf_r+0xd04>
 800577c:	ac2c      	add	r4, sp, #176	; 0xb0
 800577e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005780:	b1b3      	cbz	r3, 80057b0 <_svfprintf_r+0x6e8>
 8005782:	ab18      	add	r3, sp, #96	; 0x60
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	2302      	movs	r3, #2
 8005788:	6063      	str	r3, [r4, #4]
 800578a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800578c:	3302      	adds	r3, #2
 800578e:	9321      	str	r3, [sp, #132]	; 0x84
 8005790:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005792:	3301      	adds	r3, #1
 8005794:	2b07      	cmp	r3, #7
 8005796:	9320      	str	r3, [sp, #128]	; 0x80
 8005798:	dc01      	bgt.n	800579e <_svfprintf_r+0x6d6>
 800579a:	3408      	adds	r4, #8
 800579c:	e008      	b.n	80057b0 <_svfprintf_r+0x6e8>
 800579e:	aa1f      	add	r2, sp, #124	; 0x7c
 80057a0:	4659      	mov	r1, fp
 80057a2:	4650      	mov	r0, sl
 80057a4:	f004 f8b6 	bl	8009914 <__ssprint_r>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	f040 830f 	bne.w	8005dcc <_svfprintf_r+0xd04>
 80057ae:	ac2c      	add	r4, sp, #176	; 0xb0
 80057b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80057b2:	2b80      	cmp	r3, #128	; 0x80
 80057b4:	d135      	bne.n	8005822 <_svfprintf_r+0x75a>
 80057b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057ba:	1a9b      	subs	r3, r3, r2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	dd30      	ble.n	8005822 <_svfprintf_r+0x75a>
 80057c0:	4a70      	ldr	r2, [pc, #448]	; (8005984 <_svfprintf_r+0x8bc>)
 80057c2:	6022      	str	r2, [r4, #0]
 80057c4:	2b10      	cmp	r3, #16
 80057c6:	dd18      	ble.n	80057fa <_svfprintf_r+0x732>
 80057c8:	2210      	movs	r2, #16
 80057ca:	6062      	str	r2, [r4, #4]
 80057cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80057ce:	3210      	adds	r2, #16
 80057d0:	9221      	str	r2, [sp, #132]	; 0x84
 80057d2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80057d4:	3201      	adds	r2, #1
 80057d6:	2a07      	cmp	r2, #7
 80057d8:	9220      	str	r2, [sp, #128]	; 0x80
 80057da:	dc01      	bgt.n	80057e0 <_svfprintf_r+0x718>
 80057dc:	3408      	adds	r4, #8
 80057de:	e00a      	b.n	80057f6 <_svfprintf_r+0x72e>
 80057e0:	aa1f      	add	r2, sp, #124	; 0x7c
 80057e2:	4659      	mov	r1, fp
 80057e4:	4650      	mov	r0, sl
 80057e6:	930c      	str	r3, [sp, #48]	; 0x30
 80057e8:	f004 f894 	bl	8009914 <__ssprint_r>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	f040 82ed 	bne.w	8005dcc <_svfprintf_r+0xd04>
 80057f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057f4:	ac2c      	add	r4, sp, #176	; 0xb0
 80057f6:	3b10      	subs	r3, #16
 80057f8:	e7e2      	b.n	80057c0 <_svfprintf_r+0x6f8>
 80057fa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80057fc:	6063      	str	r3, [r4, #4]
 80057fe:	4413      	add	r3, r2
 8005800:	9321      	str	r3, [sp, #132]	; 0x84
 8005802:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005804:	3301      	adds	r3, #1
 8005806:	2b07      	cmp	r3, #7
 8005808:	9320      	str	r3, [sp, #128]	; 0x80
 800580a:	dc01      	bgt.n	8005810 <_svfprintf_r+0x748>
 800580c:	3408      	adds	r4, #8
 800580e:	e008      	b.n	8005822 <_svfprintf_r+0x75a>
 8005810:	aa1f      	add	r2, sp, #124	; 0x7c
 8005812:	4659      	mov	r1, fp
 8005814:	4650      	mov	r0, sl
 8005816:	f004 f87d 	bl	8009914 <__ssprint_r>
 800581a:	2800      	cmp	r0, #0
 800581c:	f040 82d6 	bne.w	8005dcc <_svfprintf_r+0xd04>
 8005820:	ac2c      	add	r4, sp, #176	; 0xb0
 8005822:	ebc9 0606 	rsb	r6, r9, r6
 8005826:	2e00      	cmp	r6, #0
 8005828:	dd2e      	ble.n	8005888 <_svfprintf_r+0x7c0>
 800582a:	4b56      	ldr	r3, [pc, #344]	; (8005984 <_svfprintf_r+0x8bc>)
 800582c:	6023      	str	r3, [r4, #0]
 800582e:	2e10      	cmp	r6, #16
 8005830:	dd16      	ble.n	8005860 <_svfprintf_r+0x798>
 8005832:	2310      	movs	r3, #16
 8005834:	6063      	str	r3, [r4, #4]
 8005836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005838:	3310      	adds	r3, #16
 800583a:	9321      	str	r3, [sp, #132]	; 0x84
 800583c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800583e:	3301      	adds	r3, #1
 8005840:	2b07      	cmp	r3, #7
 8005842:	9320      	str	r3, [sp, #128]	; 0x80
 8005844:	dc01      	bgt.n	800584a <_svfprintf_r+0x782>
 8005846:	3408      	adds	r4, #8
 8005848:	e008      	b.n	800585c <_svfprintf_r+0x794>
 800584a:	aa1f      	add	r2, sp, #124	; 0x7c
 800584c:	4659      	mov	r1, fp
 800584e:	4650      	mov	r0, sl
 8005850:	f004 f860 	bl	8009914 <__ssprint_r>
 8005854:	2800      	cmp	r0, #0
 8005856:	f040 82b9 	bne.w	8005dcc <_svfprintf_r+0xd04>
 800585a:	ac2c      	add	r4, sp, #176	; 0xb0
 800585c:	3e10      	subs	r6, #16
 800585e:	e7e4      	b.n	800582a <_svfprintf_r+0x762>
 8005860:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005862:	9821      	ldr	r0, [sp, #132]	; 0x84
 8005864:	6066      	str	r6, [r4, #4]
 8005866:	3301      	adds	r3, #1
 8005868:	4406      	add	r6, r0
 800586a:	2b07      	cmp	r3, #7
 800586c:	9621      	str	r6, [sp, #132]	; 0x84
 800586e:	9320      	str	r3, [sp, #128]	; 0x80
 8005870:	dc01      	bgt.n	8005876 <_svfprintf_r+0x7ae>
 8005872:	3408      	adds	r4, #8
 8005874:	e008      	b.n	8005888 <_svfprintf_r+0x7c0>
 8005876:	aa1f      	add	r2, sp, #124	; 0x7c
 8005878:	4659      	mov	r1, fp
 800587a:	4650      	mov	r0, sl
 800587c:	f004 f84a 	bl	8009914 <__ssprint_r>
 8005880:	2800      	cmp	r0, #0
 8005882:	f040 82a3 	bne.w	8005dcc <_svfprintf_r+0xd04>
 8005886:	ac2c      	add	r4, sp, #176	; 0xb0
 8005888:	05eb      	lsls	r3, r5, #23
 800588a:	d414      	bmi.n	80058b6 <_svfprintf_r+0x7ee>
 800588c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800588e:	e884 0300 	stmia.w	r4, {r8, r9}
 8005892:	444b      	add	r3, r9
 8005894:	9321      	str	r3, [sp, #132]	; 0x84
 8005896:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005898:	3301      	adds	r3, #1
 800589a:	2b07      	cmp	r3, #7
 800589c:	9320      	str	r3, [sp, #128]	; 0x80
 800589e:	f340 8244 	ble.w	8005d2a <_svfprintf_r+0xc62>
 80058a2:	aa1f      	add	r2, sp, #124	; 0x7c
 80058a4:	4659      	mov	r1, fp
 80058a6:	4650      	mov	r0, sl
 80058a8:	f004 f834 	bl	8009914 <__ssprint_r>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	f040 828d 	bne.w	8005dcc <_svfprintf_r+0xd04>
 80058b2:	ac2c      	add	r4, sp, #176	; 0xb0
 80058b4:	e23a      	b.n	8005d2c <_svfprintf_r+0xc64>
 80058b6:	9b02      	ldr	r3, [sp, #8]
 80058b8:	2b65      	cmp	r3, #101	; 0x65
 80058ba:	f340 81ad 	ble.w	8005c18 <_svfprintf_r+0xb50>
 80058be:	2200      	movs	r2, #0
 80058c0:	2300      	movs	r3, #0
 80058c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058c6:	f7fb f90b 	bl	8000ae0 <__aeabi_dcmpeq>
 80058ca:	2800      	cmp	r0, #0
 80058cc:	d05e      	beq.n	800598c <_svfprintf_r+0x8c4>
 80058ce:	4b2e      	ldr	r3, [pc, #184]	; (8005988 <_svfprintf_r+0x8c0>)
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	2301      	movs	r3, #1
 80058d4:	6063      	str	r3, [r4, #4]
 80058d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058d8:	3301      	adds	r3, #1
 80058da:	9321      	str	r3, [sp, #132]	; 0x84
 80058dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80058de:	3301      	adds	r3, #1
 80058e0:	2b07      	cmp	r3, #7
 80058e2:	9320      	str	r3, [sp, #128]	; 0x80
 80058e4:	dc01      	bgt.n	80058ea <_svfprintf_r+0x822>
 80058e6:	3408      	adds	r4, #8
 80058e8:	e008      	b.n	80058fc <_svfprintf_r+0x834>
 80058ea:	aa1f      	add	r2, sp, #124	; 0x7c
 80058ec:	4659      	mov	r1, fp
 80058ee:	4650      	mov	r0, sl
 80058f0:	f004 f810 	bl	8009914 <__ssprint_r>
 80058f4:	2800      	cmp	r0, #0
 80058f6:	f040 8269 	bne.w	8005dcc <_svfprintf_r+0xd04>
 80058fa:	ac2c      	add	r4, sp, #176	; 0xb0
 80058fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80058fe:	9a04      	ldr	r2, [sp, #16]
 8005900:	4293      	cmp	r3, r2
 8005902:	db02      	blt.n	800590a <_svfprintf_r+0x842>
 8005904:	07ee      	lsls	r6, r5, #31
 8005906:	f140 8211 	bpl.w	8005d2c <_svfprintf_r+0xc64>
 800590a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	9b08      	ldr	r3, [sp, #32]
 8005910:	6063      	str	r3, [r4, #4]
 8005912:	9a08      	ldr	r2, [sp, #32]
 8005914:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005916:	4413      	add	r3, r2
 8005918:	9321      	str	r3, [sp, #132]	; 0x84
 800591a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800591c:	3301      	adds	r3, #1
 800591e:	2b07      	cmp	r3, #7
 8005920:	9320      	str	r3, [sp, #128]	; 0x80
 8005922:	dc01      	bgt.n	8005928 <_svfprintf_r+0x860>
 8005924:	3408      	adds	r4, #8
 8005926:	e008      	b.n	800593a <_svfprintf_r+0x872>
 8005928:	aa1f      	add	r2, sp, #124	; 0x7c
 800592a:	4659      	mov	r1, fp
 800592c:	4650      	mov	r0, sl
 800592e:	f003 fff1 	bl	8009914 <__ssprint_r>
 8005932:	2800      	cmp	r0, #0
 8005934:	f040 824a 	bne.w	8005dcc <_svfprintf_r+0xd04>
 8005938:	ac2c      	add	r4, sp, #176	; 0xb0
 800593a:	9b04      	ldr	r3, [sp, #16]
 800593c:	1e5e      	subs	r6, r3, #1
 800593e:	2e00      	cmp	r6, #0
 8005940:	f340 81f4 	ble.w	8005d2c <_svfprintf_r+0xc64>
 8005944:	4f0f      	ldr	r7, [pc, #60]	; (8005984 <_svfprintf_r+0x8bc>)
 8005946:	f04f 0810 	mov.w	r8, #16
 800594a:	2e10      	cmp	r6, #16
 800594c:	f340 8159 	ble.w	8005c02 <_svfprintf_r+0xb3a>
 8005950:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005952:	3310      	adds	r3, #16
 8005954:	9321      	str	r3, [sp, #132]	; 0x84
 8005956:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005958:	3301      	adds	r3, #1
 800595a:	2b07      	cmp	r3, #7
 800595c:	e884 0180 	stmia.w	r4, {r7, r8}
 8005960:	9320      	str	r3, [sp, #128]	; 0x80
 8005962:	dc01      	bgt.n	8005968 <_svfprintf_r+0x8a0>
 8005964:	3408      	adds	r4, #8
 8005966:	e008      	b.n	800597a <_svfprintf_r+0x8b2>
 8005968:	aa1f      	add	r2, sp, #124	; 0x7c
 800596a:	4659      	mov	r1, fp
 800596c:	4650      	mov	r0, sl
 800596e:	f003 ffd1 	bl	8009914 <__ssprint_r>
 8005972:	2800      	cmp	r0, #0
 8005974:	f040 822a 	bne.w	8005dcc <_svfprintf_r+0xd04>
 8005978:	ac2c      	add	r4, sp, #176	; 0xb0
 800597a:	3e10      	subs	r6, #16
 800597c:	e7e5      	b.n	800594a <_svfprintf_r+0x882>
 800597e:	bf00      	nop
 8005980:	08009ff4 	.word	0x08009ff4
 8005984:	08009fb0 	.word	0x08009fb0
 8005988:	08009ff2 	.word	0x08009ff2
 800598c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800598e:	2b00      	cmp	r3, #0
 8005990:	dc7c      	bgt.n	8005a8c <_svfprintf_r+0x9c4>
 8005992:	4b9f      	ldr	r3, [pc, #636]	; (8005c10 <_svfprintf_r+0xb48>)
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	2301      	movs	r3, #1
 8005998:	6063      	str	r3, [r4, #4]
 800599a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800599c:	3301      	adds	r3, #1
 800599e:	9321      	str	r3, [sp, #132]	; 0x84
 80059a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80059a2:	3301      	adds	r3, #1
 80059a4:	2b07      	cmp	r3, #7
 80059a6:	9320      	str	r3, [sp, #128]	; 0x80
 80059a8:	dc01      	bgt.n	80059ae <_svfprintf_r+0x8e6>
 80059aa:	3408      	adds	r4, #8
 80059ac:	e008      	b.n	80059c0 <_svfprintf_r+0x8f8>
 80059ae:	aa1f      	add	r2, sp, #124	; 0x7c
 80059b0:	4659      	mov	r1, fp
 80059b2:	4650      	mov	r0, sl
 80059b4:	f003 ffae 	bl	8009914 <__ssprint_r>
 80059b8:	2800      	cmp	r0, #0
 80059ba:	f040 8207 	bne.w	8005dcc <_svfprintf_r+0xd04>
 80059be:	ac2c      	add	r4, sp, #176	; 0xb0
 80059c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80059c2:	b923      	cbnz	r3, 80059ce <_svfprintf_r+0x906>
 80059c4:	9b04      	ldr	r3, [sp, #16]
 80059c6:	b913      	cbnz	r3, 80059ce <_svfprintf_r+0x906>
 80059c8:	07e8      	lsls	r0, r5, #31
 80059ca:	f140 81af 	bpl.w	8005d2c <_svfprintf_r+0xc64>
 80059ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	9b08      	ldr	r3, [sp, #32]
 80059d4:	6063      	str	r3, [r4, #4]
 80059d6:	9a08      	ldr	r2, [sp, #32]
 80059d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059da:	4413      	add	r3, r2
 80059dc:	9321      	str	r3, [sp, #132]	; 0x84
 80059de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80059e0:	3301      	adds	r3, #1
 80059e2:	2b07      	cmp	r3, #7
 80059e4:	9320      	str	r3, [sp, #128]	; 0x80
 80059e6:	dc02      	bgt.n	80059ee <_svfprintf_r+0x926>
 80059e8:	f104 0308 	add.w	r3, r4, #8
 80059ec:	e008      	b.n	8005a00 <_svfprintf_r+0x938>
 80059ee:	aa1f      	add	r2, sp, #124	; 0x7c
 80059f0:	4659      	mov	r1, fp
 80059f2:	4650      	mov	r0, sl
 80059f4:	f003 ff8e 	bl	8009914 <__ssprint_r>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	f040 81e7 	bne.w	8005dcc <_svfprintf_r+0xd04>
 80059fe:	ab2c      	add	r3, sp, #176	; 0xb0
 8005a00:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005a02:	4276      	negs	r6, r6
 8005a04:	2e00      	cmp	r6, #0
 8005a06:	dd30      	ble.n	8005a6a <_svfprintf_r+0x9a2>
 8005a08:	4f82      	ldr	r7, [pc, #520]	; (8005c14 <_svfprintf_r+0xb4c>)
 8005a0a:	2410      	movs	r4, #16
 8005a0c:	2e10      	cmp	r6, #16
 8005a0e:	dd16      	ble.n	8005a3e <_svfprintf_r+0x976>
 8005a10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a12:	601f      	str	r7, [r3, #0]
 8005a14:	3210      	adds	r2, #16
 8005a16:	9221      	str	r2, [sp, #132]	; 0x84
 8005a18:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a1a:	605c      	str	r4, [r3, #4]
 8005a1c:	3201      	adds	r2, #1
 8005a1e:	2a07      	cmp	r2, #7
 8005a20:	9220      	str	r2, [sp, #128]	; 0x80
 8005a22:	dc01      	bgt.n	8005a28 <_svfprintf_r+0x960>
 8005a24:	3308      	adds	r3, #8
 8005a26:	e008      	b.n	8005a3a <_svfprintf_r+0x972>
 8005a28:	aa1f      	add	r2, sp, #124	; 0x7c
 8005a2a:	4659      	mov	r1, fp
 8005a2c:	4650      	mov	r0, sl
 8005a2e:	f003 ff71 	bl	8009914 <__ssprint_r>
 8005a32:	2800      	cmp	r0, #0
 8005a34:	f040 81ca 	bne.w	8005dcc <_svfprintf_r+0xd04>
 8005a38:	ab2c      	add	r3, sp, #176	; 0xb0
 8005a3a:	3e10      	subs	r6, #16
 8005a3c:	e7e6      	b.n	8005a0c <_svfprintf_r+0x944>
 8005a3e:	4a75      	ldr	r2, [pc, #468]	; (8005c14 <_svfprintf_r+0xb4c>)
 8005a40:	e883 0044 	stmia.w	r3, {r2, r6}
 8005a44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a46:	4416      	add	r6, r2
 8005a48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a4a:	9621      	str	r6, [sp, #132]	; 0x84
 8005a4c:	3201      	adds	r2, #1
 8005a4e:	2a07      	cmp	r2, #7
 8005a50:	9220      	str	r2, [sp, #128]	; 0x80
 8005a52:	dc01      	bgt.n	8005a58 <_svfprintf_r+0x990>
 8005a54:	3308      	adds	r3, #8
 8005a56:	e008      	b.n	8005a6a <_svfprintf_r+0x9a2>
 8005a58:	aa1f      	add	r2, sp, #124	; 0x7c
 8005a5a:	4659      	mov	r1, fp
 8005a5c:	4650      	mov	r0, sl
 8005a5e:	f003 ff59 	bl	8009914 <__ssprint_r>
 8005a62:	2800      	cmp	r0, #0
 8005a64:	f040 81b2 	bne.w	8005dcc <_svfprintf_r+0xd04>
 8005a68:	ab2c      	add	r3, sp, #176	; 0xb0
 8005a6a:	9a04      	ldr	r2, [sp, #16]
 8005a6c:	605a      	str	r2, [r3, #4]
 8005a6e:	9904      	ldr	r1, [sp, #16]
 8005a70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a72:	f8c3 8000 	str.w	r8, [r3]
 8005a76:	440a      	add	r2, r1
 8005a78:	9221      	str	r2, [sp, #132]	; 0x84
 8005a7a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a7c:	3201      	adds	r2, #1
 8005a7e:	2a07      	cmp	r2, #7
 8005a80:	9220      	str	r2, [sp, #128]	; 0x80
 8005a82:	f73f af0e 	bgt.w	80058a2 <_svfprintf_r+0x7da>
 8005a86:	f103 0408 	add.w	r4, r3, #8
 8005a8a:	e14f      	b.n	8005d2c <_svfprintf_r+0xc64>
 8005a8c:	9b04      	ldr	r3, [sp, #16]
 8005a8e:	42bb      	cmp	r3, r7
 8005a90:	bfa8      	it	ge
 8005a92:	463b      	movge	r3, r7
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	461e      	mov	r6, r3
 8005a98:	dd15      	ble.n	8005ac6 <_svfprintf_r+0x9fe>
 8005a9a:	6063      	str	r3, [r4, #4]
 8005a9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a9e:	f8c4 8000 	str.w	r8, [r4]
 8005aa2:	4433      	add	r3, r6
 8005aa4:	9321      	str	r3, [sp, #132]	; 0x84
 8005aa6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	2b07      	cmp	r3, #7
 8005aac:	9320      	str	r3, [sp, #128]	; 0x80
 8005aae:	dc01      	bgt.n	8005ab4 <_svfprintf_r+0x9ec>
 8005ab0:	3408      	adds	r4, #8
 8005ab2:	e008      	b.n	8005ac6 <_svfprintf_r+0x9fe>
 8005ab4:	aa1f      	add	r2, sp, #124	; 0x7c
 8005ab6:	4659      	mov	r1, fp
 8005ab8:	4650      	mov	r0, sl
 8005aba:	f003 ff2b 	bl	8009914 <__ssprint_r>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	f040 8184 	bne.w	8005dcc <_svfprintf_r+0xd04>
 8005ac4:	ac2c      	add	r4, sp, #176	; 0xb0
 8005ac6:	2e00      	cmp	r6, #0
 8005ac8:	bfac      	ite	ge
 8005aca:	1bbe      	subge	r6, r7, r6
 8005acc:	463e      	movlt	r6, r7
 8005ace:	2e00      	cmp	r6, #0
 8005ad0:	dd30      	ble.n	8005b34 <_svfprintf_r+0xa6c>
 8005ad2:	f04f 0910 	mov.w	r9, #16
 8005ad6:	4b4f      	ldr	r3, [pc, #316]	; (8005c14 <_svfprintf_r+0xb4c>)
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	2e10      	cmp	r6, #16
 8005adc:	dd16      	ble.n	8005b0c <_svfprintf_r+0xa44>
 8005ade:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ae0:	f8c4 9004 	str.w	r9, [r4, #4]
 8005ae4:	3310      	adds	r3, #16
 8005ae6:	9321      	str	r3, [sp, #132]	; 0x84
 8005ae8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005aea:	3301      	adds	r3, #1
 8005aec:	2b07      	cmp	r3, #7
 8005aee:	9320      	str	r3, [sp, #128]	; 0x80
 8005af0:	dc01      	bgt.n	8005af6 <_svfprintf_r+0xa2e>
 8005af2:	3408      	adds	r4, #8
 8005af4:	e008      	b.n	8005b08 <_svfprintf_r+0xa40>
 8005af6:	aa1f      	add	r2, sp, #124	; 0x7c
 8005af8:	4659      	mov	r1, fp
 8005afa:	4650      	mov	r0, sl
 8005afc:	f003 ff0a 	bl	8009914 <__ssprint_r>
 8005b00:	2800      	cmp	r0, #0
 8005b02:	f040 8163 	bne.w	8005dcc <_svfprintf_r+0xd04>
 8005b06:	ac2c      	add	r4, sp, #176	; 0xb0
 8005b08:	3e10      	subs	r6, #16
 8005b0a:	e7e4      	b.n	8005ad6 <_svfprintf_r+0xa0e>
 8005b0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b0e:	6066      	str	r6, [r4, #4]
 8005b10:	441e      	add	r6, r3
 8005b12:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005b14:	9621      	str	r6, [sp, #132]	; 0x84
 8005b16:	3301      	adds	r3, #1
 8005b18:	2b07      	cmp	r3, #7
 8005b1a:	9320      	str	r3, [sp, #128]	; 0x80
 8005b1c:	dc01      	bgt.n	8005b22 <_svfprintf_r+0xa5a>
 8005b1e:	3408      	adds	r4, #8
 8005b20:	e008      	b.n	8005b34 <_svfprintf_r+0xa6c>
 8005b22:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b24:	4659      	mov	r1, fp
 8005b26:	4650      	mov	r0, sl
 8005b28:	f003 fef4 	bl	8009914 <__ssprint_r>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	f040 814d 	bne.w	8005dcc <_svfprintf_r+0xd04>
 8005b32:	ac2c      	add	r4, sp, #176	; 0xb0
 8005b34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b36:	9a04      	ldr	r2, [sp, #16]
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	4447      	add	r7, r8
 8005b3c:	db01      	blt.n	8005b42 <_svfprintf_r+0xa7a>
 8005b3e:	07e9      	lsls	r1, r5, #31
 8005b40:	d517      	bpl.n	8005b72 <_svfprintf_r+0xaaa>
 8005b42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b44:	6023      	str	r3, [r4, #0]
 8005b46:	9b08      	ldr	r3, [sp, #32]
 8005b48:	6063      	str	r3, [r4, #4]
 8005b4a:	9a08      	ldr	r2, [sp, #32]
 8005b4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b4e:	4413      	add	r3, r2
 8005b50:	9321      	str	r3, [sp, #132]	; 0x84
 8005b52:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005b54:	3301      	adds	r3, #1
 8005b56:	2b07      	cmp	r3, #7
 8005b58:	9320      	str	r3, [sp, #128]	; 0x80
 8005b5a:	dc01      	bgt.n	8005b60 <_svfprintf_r+0xa98>
 8005b5c:	3408      	adds	r4, #8
 8005b5e:	e008      	b.n	8005b72 <_svfprintf_r+0xaaa>
 8005b60:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b62:	4659      	mov	r1, fp
 8005b64:	4650      	mov	r0, sl
 8005b66:	f003 fed5 	bl	8009914 <__ssprint_r>
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	f040 812e 	bne.w	8005dcc <_svfprintf_r+0xd04>
 8005b70:	ac2c      	add	r4, sp, #176	; 0xb0
 8005b72:	9b04      	ldr	r3, [sp, #16]
 8005b74:	9a04      	ldr	r2, [sp, #16]
 8005b76:	eb08 0603 	add.w	r6, r8, r3
 8005b7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b7c:	1bf6      	subs	r6, r6, r7
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	429e      	cmp	r6, r3
 8005b82:	bfa8      	it	ge
 8005b84:	461e      	movge	r6, r3
 8005b86:	2e00      	cmp	r6, #0
 8005b88:	dd14      	ble.n	8005bb4 <_svfprintf_r+0xaec>
 8005b8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b8c:	6027      	str	r7, [r4, #0]
 8005b8e:	4433      	add	r3, r6
 8005b90:	9321      	str	r3, [sp, #132]	; 0x84
 8005b92:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005b94:	6066      	str	r6, [r4, #4]
 8005b96:	3301      	adds	r3, #1
 8005b98:	2b07      	cmp	r3, #7
 8005b9a:	9320      	str	r3, [sp, #128]	; 0x80
 8005b9c:	dc01      	bgt.n	8005ba2 <_svfprintf_r+0xada>
 8005b9e:	3408      	adds	r4, #8
 8005ba0:	e008      	b.n	8005bb4 <_svfprintf_r+0xaec>
 8005ba2:	aa1f      	add	r2, sp, #124	; 0x7c
 8005ba4:	4659      	mov	r1, fp
 8005ba6:	4650      	mov	r0, sl
 8005ba8:	f003 feb4 	bl	8009914 <__ssprint_r>
 8005bac:	2800      	cmp	r0, #0
 8005bae:	f040 810d 	bne.w	8005dcc <_svfprintf_r+0xd04>
 8005bb2:	ac2c      	add	r4, sp, #176	; 0xb0
 8005bb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005bb6:	9a04      	ldr	r2, [sp, #16]
 8005bb8:	2e00      	cmp	r6, #0
 8005bba:	eba2 0303 	sub.w	r3, r2, r3
 8005bbe:	bfac      	ite	ge
 8005bc0:	1b9e      	subge	r6, r3, r6
 8005bc2:	461e      	movlt	r6, r3
 8005bc4:	2e00      	cmp	r6, #0
 8005bc6:	f340 80b1 	ble.w	8005d2c <_svfprintf_r+0xc64>
 8005bca:	4f12      	ldr	r7, [pc, #72]	; (8005c14 <_svfprintf_r+0xb4c>)
 8005bcc:	f04f 0810 	mov.w	r8, #16
 8005bd0:	2e10      	cmp	r6, #16
 8005bd2:	dd16      	ble.n	8005c02 <_svfprintf_r+0xb3a>
 8005bd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bd6:	3310      	adds	r3, #16
 8005bd8:	9321      	str	r3, [sp, #132]	; 0x84
 8005bda:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005bdc:	3301      	adds	r3, #1
 8005bde:	2b07      	cmp	r3, #7
 8005be0:	e884 0180 	stmia.w	r4, {r7, r8}
 8005be4:	9320      	str	r3, [sp, #128]	; 0x80
 8005be6:	dc01      	bgt.n	8005bec <_svfprintf_r+0xb24>
 8005be8:	3408      	adds	r4, #8
 8005bea:	e008      	b.n	8005bfe <_svfprintf_r+0xb36>
 8005bec:	aa1f      	add	r2, sp, #124	; 0x7c
 8005bee:	4659      	mov	r1, fp
 8005bf0:	4650      	mov	r0, sl
 8005bf2:	f003 fe8f 	bl	8009914 <__ssprint_r>
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	f040 80e8 	bne.w	8005dcc <_svfprintf_r+0xd04>
 8005bfc:	ac2c      	add	r4, sp, #176	; 0xb0
 8005bfe:	3e10      	subs	r6, #16
 8005c00:	e7e6      	b.n	8005bd0 <_svfprintf_r+0xb08>
 8005c02:	4b04      	ldr	r3, [pc, #16]	; (8005c14 <_svfprintf_r+0xb4c>)
 8005c04:	e884 0048 	stmia.w	r4, {r3, r6}
 8005c08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c0a:	441e      	add	r6, r3
 8005c0c:	9621      	str	r6, [sp, #132]	; 0x84
 8005c0e:	e642      	b.n	8005896 <_svfprintf_r+0x7ce>
 8005c10:	08009ff2 	.word	0x08009ff2
 8005c14:	08009fb0 	.word	0x08009fb0
 8005c18:	9b04      	ldr	r3, [sp, #16]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	dc01      	bgt.n	8005c22 <_svfprintf_r+0xb5a>
 8005c1e:	07ea      	lsls	r2, r5, #31
 8005c20:	d573      	bpl.n	8005d0a <_svfprintf_r+0xc42>
 8005c22:	2301      	movs	r3, #1
 8005c24:	6063      	str	r3, [r4, #4]
 8005c26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c28:	f8c4 8000 	str.w	r8, [r4]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	9321      	str	r3, [sp, #132]	; 0x84
 8005c30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005c32:	3301      	adds	r3, #1
 8005c34:	2b07      	cmp	r3, #7
 8005c36:	9320      	str	r3, [sp, #128]	; 0x80
 8005c38:	dc01      	bgt.n	8005c3e <_svfprintf_r+0xb76>
 8005c3a:	3408      	adds	r4, #8
 8005c3c:	e008      	b.n	8005c50 <_svfprintf_r+0xb88>
 8005c3e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005c40:	4659      	mov	r1, fp
 8005c42:	4650      	mov	r0, sl
 8005c44:	f003 fe66 	bl	8009914 <__ssprint_r>
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	f040 80bf 	bne.w	8005dcc <_svfprintf_r+0xd04>
 8005c4e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005c50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c52:	6023      	str	r3, [r4, #0]
 8005c54:	9b08      	ldr	r3, [sp, #32]
 8005c56:	6063      	str	r3, [r4, #4]
 8005c58:	9a08      	ldr	r2, [sp, #32]
 8005c5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c5c:	4413      	add	r3, r2
 8005c5e:	9321      	str	r3, [sp, #132]	; 0x84
 8005c60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005c62:	3301      	adds	r3, #1
 8005c64:	2b07      	cmp	r3, #7
 8005c66:	9320      	str	r3, [sp, #128]	; 0x80
 8005c68:	dc01      	bgt.n	8005c6e <_svfprintf_r+0xba6>
 8005c6a:	3408      	adds	r4, #8
 8005c6c:	e008      	b.n	8005c80 <_svfprintf_r+0xbb8>
 8005c6e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005c70:	4659      	mov	r1, fp
 8005c72:	4650      	mov	r0, sl
 8005c74:	f003 fe4e 	bl	8009914 <__ssprint_r>
 8005c78:	2800      	cmp	r0, #0
 8005c7a:	f040 80a7 	bne.w	8005dcc <_svfprintf_r+0xd04>
 8005c7e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005c80:	2300      	movs	r3, #0
 8005c82:	2200      	movs	r2, #0
 8005c84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c88:	f7fa ff2a 	bl	8000ae0 <__aeabi_dcmpeq>
 8005c8c:	9b04      	ldr	r3, [sp, #16]
 8005c8e:	1e5e      	subs	r6, r3, #1
 8005c90:	b9b8      	cbnz	r0, 8005cc2 <_svfprintf_r+0xbfa>
 8005c92:	f108 0301 	add.w	r3, r8, #1
 8005c96:	e884 0048 	stmia.w	r4, {r3, r6}
 8005c9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c9c:	9a04      	ldr	r2, [sp, #16]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	4413      	add	r3, r2
 8005ca2:	9321      	str	r3, [sp, #132]	; 0x84
 8005ca4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	2b07      	cmp	r3, #7
 8005caa:	9320      	str	r3, [sp, #128]	; 0x80
 8005cac:	dd34      	ble.n	8005d18 <_svfprintf_r+0xc50>
 8005cae:	aa1f      	add	r2, sp, #124	; 0x7c
 8005cb0:	4659      	mov	r1, fp
 8005cb2:	4650      	mov	r0, sl
 8005cb4:	f003 fe2e 	bl	8009914 <__ssprint_r>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	f040 8087 	bne.w	8005dcc <_svfprintf_r+0xd04>
 8005cbe:	ac2c      	add	r4, sp, #176	; 0xb0
 8005cc0:	e02b      	b.n	8005d1a <_svfprintf_r+0xc52>
 8005cc2:	2e00      	cmp	r6, #0
 8005cc4:	dd29      	ble.n	8005d1a <_svfprintf_r+0xc52>
 8005cc6:	4fa7      	ldr	r7, [pc, #668]	; (8005f64 <_svfprintf_r+0xe9c>)
 8005cc8:	f04f 0810 	mov.w	r8, #16
 8005ccc:	2e10      	cmp	r6, #16
 8005cce:	dd15      	ble.n	8005cfc <_svfprintf_r+0xc34>
 8005cd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cd2:	3310      	adds	r3, #16
 8005cd4:	9321      	str	r3, [sp, #132]	; 0x84
 8005cd6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005cd8:	3301      	adds	r3, #1
 8005cda:	2b07      	cmp	r3, #7
 8005cdc:	e884 0180 	stmia.w	r4, {r7, r8}
 8005ce0:	9320      	str	r3, [sp, #128]	; 0x80
 8005ce2:	dc01      	bgt.n	8005ce8 <_svfprintf_r+0xc20>
 8005ce4:	3408      	adds	r4, #8
 8005ce6:	e007      	b.n	8005cf8 <_svfprintf_r+0xc30>
 8005ce8:	aa1f      	add	r2, sp, #124	; 0x7c
 8005cea:	4659      	mov	r1, fp
 8005cec:	4650      	mov	r0, sl
 8005cee:	f003 fe11 	bl	8009914 <__ssprint_r>
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	d16a      	bne.n	8005dcc <_svfprintf_r+0xd04>
 8005cf6:	ac2c      	add	r4, sp, #176	; 0xb0
 8005cf8:	3e10      	subs	r6, #16
 8005cfa:	e7e7      	b.n	8005ccc <_svfprintf_r+0xc04>
 8005cfc:	4b99      	ldr	r3, [pc, #612]	; (8005f64 <_svfprintf_r+0xe9c>)
 8005cfe:	e884 0048 	stmia.w	r4, {r3, r6}
 8005d02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d04:	441e      	add	r6, r3
 8005d06:	9621      	str	r6, [sp, #132]	; 0x84
 8005d08:	e7cc      	b.n	8005ca4 <_svfprintf_r+0xbdc>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	6063      	str	r3, [r4, #4]
 8005d0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d10:	f8c4 8000 	str.w	r8, [r4]
 8005d14:	3301      	adds	r3, #1
 8005d16:	e7c4      	b.n	8005ca2 <_svfprintf_r+0xbda>
 8005d18:	3408      	adds	r4, #8
 8005d1a:	ab1b      	add	r3, sp, #108	; 0x6c
 8005d1c:	6023      	str	r3, [r4, #0]
 8005d1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d20:	6063      	str	r3, [r4, #4]
 8005d22:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d26:	4413      	add	r3, r2
 8005d28:	e5b4      	b.n	8005894 <_svfprintf_r+0x7cc>
 8005d2a:	3408      	adds	r4, #8
 8005d2c:	076b      	lsls	r3, r5, #29
 8005d2e:	d40b      	bmi.n	8005d48 <_svfprintf_r+0xc80>
 8005d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d36:	428a      	cmp	r2, r1
 8005d38:	bfac      	ite	ge
 8005d3a:	189b      	addge	r3, r3, r2
 8005d3c:	185b      	addlt	r3, r3, r1
 8005d3e:	930a      	str	r3, [sp, #40]	; 0x28
 8005d40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d035      	beq.n	8005db2 <_svfprintf_r+0xcea>
 8005d46:	e02e      	b.n	8005da6 <_svfprintf_r+0xcde>
 8005d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d4c:	1a9d      	subs	r5, r3, r2
 8005d4e:	2d00      	cmp	r5, #0
 8005d50:	ddee      	ble.n	8005d30 <_svfprintf_r+0xc68>
 8005d52:	2610      	movs	r6, #16
 8005d54:	4b84      	ldr	r3, [pc, #528]	; (8005f68 <_svfprintf_r+0xea0>)
 8005d56:	6023      	str	r3, [r4, #0]
 8005d58:	2d10      	cmp	r5, #16
 8005d5a:	dd13      	ble.n	8005d84 <_svfprintf_r+0xcbc>
 8005d5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d5e:	6066      	str	r6, [r4, #4]
 8005d60:	3310      	adds	r3, #16
 8005d62:	9321      	str	r3, [sp, #132]	; 0x84
 8005d64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005d66:	3301      	adds	r3, #1
 8005d68:	2b07      	cmp	r3, #7
 8005d6a:	9320      	str	r3, [sp, #128]	; 0x80
 8005d6c:	dc01      	bgt.n	8005d72 <_svfprintf_r+0xcaa>
 8005d6e:	3408      	adds	r4, #8
 8005d70:	e006      	b.n	8005d80 <_svfprintf_r+0xcb8>
 8005d72:	aa1f      	add	r2, sp, #124	; 0x7c
 8005d74:	4659      	mov	r1, fp
 8005d76:	4650      	mov	r0, sl
 8005d78:	f003 fdcc 	bl	8009914 <__ssprint_r>
 8005d7c:	bb30      	cbnz	r0, 8005dcc <_svfprintf_r+0xd04>
 8005d7e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005d80:	3d10      	subs	r5, #16
 8005d82:	e7e7      	b.n	8005d54 <_svfprintf_r+0xc8c>
 8005d84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d86:	6065      	str	r5, [r4, #4]
 8005d88:	441d      	add	r5, r3
 8005d8a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005d8c:	9521      	str	r5, [sp, #132]	; 0x84
 8005d8e:	3301      	adds	r3, #1
 8005d90:	2b07      	cmp	r3, #7
 8005d92:	9320      	str	r3, [sp, #128]	; 0x80
 8005d94:	ddcc      	ble.n	8005d30 <_svfprintf_r+0xc68>
 8005d96:	aa1f      	add	r2, sp, #124	; 0x7c
 8005d98:	4659      	mov	r1, fp
 8005d9a:	4650      	mov	r0, sl
 8005d9c:	f003 fdba 	bl	8009914 <__ssprint_r>
 8005da0:	2800      	cmp	r0, #0
 8005da2:	d0c5      	beq.n	8005d30 <_svfprintf_r+0xc68>
 8005da4:	e012      	b.n	8005dcc <_svfprintf_r+0xd04>
 8005da6:	aa1f      	add	r2, sp, #124	; 0x7c
 8005da8:	4659      	mov	r1, fp
 8005daa:	4650      	mov	r0, sl
 8005dac:	f003 fdb2 	bl	8009914 <__ssprint_r>
 8005db0:	b960      	cbnz	r0, 8005dcc <_svfprintf_r+0xd04>
 8005db2:	2300      	movs	r3, #0
 8005db4:	9320      	str	r3, [sp, #128]	; 0x80
 8005db6:	9f03      	ldr	r7, [sp, #12]
 8005db8:	ac2c      	add	r4, sp, #176	; 0xb0
 8005dba:	f7ff b9bb 	b.w	8005134 <_svfprintf_r+0x6c>
 8005dbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dc0:	b123      	cbz	r3, 8005dcc <_svfprintf_r+0xd04>
 8005dc2:	aa1f      	add	r2, sp, #124	; 0x7c
 8005dc4:	4659      	mov	r1, fp
 8005dc6:	4650      	mov	r0, sl
 8005dc8:	f003 fda4 	bl	8009914 <__ssprint_r>
 8005dcc:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8005dd0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dd6:	bf18      	it	ne
 8005dd8:	f04f 33ff 	movne.w	r3, #4294967295
 8005ddc:	4618      	mov	r0, r3
 8005dde:	e12e      	b.n	800603e <_svfprintf_r+0xf76>
 8005de0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005de4:	4610      	mov	r0, r2
 8005de6:	4619      	mov	r1, r3
 8005de8:	f7fa feac 	bl	8000b44 <__aeabi_dcmpun>
 8005dec:	b160      	cbz	r0, 8005e08 <_svfprintf_r+0xd40>
 8005dee:	4b5f      	ldr	r3, [pc, #380]	; (8005f6c <_svfprintf_r+0xea4>)
 8005df0:	4a5f      	ldr	r2, [pc, #380]	; (8005f70 <_svfprintf_r+0xea8>)
 8005df2:	9902      	ldr	r1, [sp, #8]
 8005df4:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8005df8:	2947      	cmp	r1, #71	; 0x47
 8005dfa:	bfcc      	ite	gt
 8005dfc:	4690      	movgt	r8, r2
 8005dfe:	4698      	movle	r8, r3
 8005e00:	f04f 0903 	mov.w	r9, #3
 8005e04:	2600      	movs	r6, #0
 8005e06:	e44e      	b.n	80056a6 <_svfprintf_r+0x5de>
 8005e08:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005e0c:	d00a      	beq.n	8005e24 <_svfprintf_r+0xd5c>
 8005e0e:	9b02      	ldr	r3, [sp, #8]
 8005e10:	f023 0320 	bic.w	r3, r3, #32
 8005e14:	2b47      	cmp	r3, #71	; 0x47
 8005e16:	d107      	bne.n	8005e28 <_svfprintf_r+0xd60>
 8005e18:	f1b9 0f00 	cmp.w	r9, #0
 8005e1c:	bf08      	it	eq
 8005e1e:	f04f 0901 	moveq.w	r9, #1
 8005e22:	e001      	b.n	8005e28 <_svfprintf_r+0xd60>
 8005e24:	f04f 0906 	mov.w	r9, #6
 8005e28:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8005e2c:	930c      	str	r3, [sp, #48]	; 0x30
 8005e2e:	9b07      	ldr	r3, [sp, #28]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	da07      	bge.n	8005e44 <_svfprintf_r+0xd7c>
 8005e34:	9b06      	ldr	r3, [sp, #24]
 8005e36:	930e      	str	r3, [sp, #56]	; 0x38
 8005e38:	9b07      	ldr	r3, [sp, #28]
 8005e3a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005e3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e40:	232d      	movs	r3, #45	; 0x2d
 8005e42:	e004      	b.n	8005e4e <_svfprintf_r+0xd86>
 8005e44:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005e48:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e50:	9b02      	ldr	r3, [sp, #8]
 8005e52:	f023 0720 	bic.w	r7, r3, #32
 8005e56:	2f46      	cmp	r7, #70	; 0x46
 8005e58:	d004      	beq.n	8005e64 <_svfprintf_r+0xd9c>
 8005e5a:	2f45      	cmp	r7, #69	; 0x45
 8005e5c:	d105      	bne.n	8005e6a <_svfprintf_r+0xda2>
 8005e5e:	f109 0601 	add.w	r6, r9, #1
 8005e62:	e003      	b.n	8005e6c <_svfprintf_r+0xda4>
 8005e64:	464e      	mov	r6, r9
 8005e66:	2103      	movs	r1, #3
 8005e68:	e001      	b.n	8005e6e <_svfprintf_r+0xda6>
 8005e6a:	464e      	mov	r6, r9
 8005e6c:	2102      	movs	r1, #2
 8005e6e:	ab1d      	add	r3, sp, #116	; 0x74
 8005e70:	9301      	str	r3, [sp, #4]
 8005e72:	ab1a      	add	r3, sp, #104	; 0x68
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	4632      	mov	r2, r6
 8005e78:	ab19      	add	r3, sp, #100	; 0x64
 8005e7a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8005e7e:	4650      	mov	r0, sl
 8005e80:	f001 fa16 	bl	80072b0 <_dtoa_r>
 8005e84:	2f47      	cmp	r7, #71	; 0x47
 8005e86:	4680      	mov	r8, r0
 8005e88:	d102      	bne.n	8005e90 <_svfprintf_r+0xdc8>
 8005e8a:	07eb      	lsls	r3, r5, #31
 8005e8c:	f140 80cd 	bpl.w	800602a <_svfprintf_r+0xf62>
 8005e90:	eb08 0306 	add.w	r3, r8, r6
 8005e94:	2f46      	cmp	r7, #70	; 0x46
 8005e96:	9304      	str	r3, [sp, #16]
 8005e98:	d111      	bne.n	8005ebe <_svfprintf_r+0xdf6>
 8005e9a:	f898 3000 	ldrb.w	r3, [r8]
 8005e9e:	2b30      	cmp	r3, #48	; 0x30
 8005ea0:	d109      	bne.n	8005eb6 <_svfprintf_r+0xdee>
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005eaa:	f7fa fe19 	bl	8000ae0 <__aeabi_dcmpeq>
 8005eae:	b910      	cbnz	r0, 8005eb6 <_svfprintf_r+0xdee>
 8005eb0:	f1c6 0601 	rsb	r6, r6, #1
 8005eb4:	9619      	str	r6, [sp, #100]	; 0x64
 8005eb6:	9a04      	ldr	r2, [sp, #16]
 8005eb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005eba:	441a      	add	r2, r3
 8005ebc:	9204      	str	r2, [sp, #16]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005ec6:	f7fa fe0b 	bl	8000ae0 <__aeabi_dcmpeq>
 8005eca:	b908      	cbnz	r0, 8005ed0 <_svfprintf_r+0xe08>
 8005ecc:	2230      	movs	r2, #48	; 0x30
 8005ece:	e002      	b.n	8005ed6 <_svfprintf_r+0xe0e>
 8005ed0:	9b04      	ldr	r3, [sp, #16]
 8005ed2:	931d      	str	r3, [sp, #116]	; 0x74
 8005ed4:	e007      	b.n	8005ee6 <_svfprintf_r+0xe1e>
 8005ed6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005ed8:	9904      	ldr	r1, [sp, #16]
 8005eda:	4299      	cmp	r1, r3
 8005edc:	d903      	bls.n	8005ee6 <_svfprintf_r+0xe1e>
 8005ede:	1c59      	adds	r1, r3, #1
 8005ee0:	911d      	str	r1, [sp, #116]	; 0x74
 8005ee2:	701a      	strb	r2, [r3, #0]
 8005ee4:	e7f7      	b.n	8005ed6 <_svfprintf_r+0xe0e>
 8005ee6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005ee8:	2f47      	cmp	r7, #71	; 0x47
 8005eea:	ebc8 0303 	rsb	r3, r8, r3
 8005eee:	9304      	str	r3, [sp, #16]
 8005ef0:	d108      	bne.n	8005f04 <_svfprintf_r+0xe3c>
 8005ef2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005ef4:	1cdf      	adds	r7, r3, #3
 8005ef6:	db01      	blt.n	8005efc <_svfprintf_r+0xe34>
 8005ef8:	4599      	cmp	r9, r3
 8005efa:	da68      	bge.n	8005fce <_svfprintf_r+0xf06>
 8005efc:	9b02      	ldr	r3, [sp, #8]
 8005efe:	3b02      	subs	r3, #2
 8005f00:	9302      	str	r3, [sp, #8]
 8005f02:	e002      	b.n	8005f0a <_svfprintf_r+0xe42>
 8005f04:	9b02      	ldr	r3, [sp, #8]
 8005f06:	2b65      	cmp	r3, #101	; 0x65
 8005f08:	dc4a      	bgt.n	8005fa0 <_svfprintf_r+0xed8>
 8005f0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f0c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8005f10:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 8005f14:	3b01      	subs	r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	9319      	str	r3, [sp, #100]	; 0x64
 8005f1a:	bfba      	itte	lt
 8005f1c:	425b      	neglt	r3, r3
 8005f1e:	222d      	movlt	r2, #45	; 0x2d
 8005f20:	222b      	movge	r2, #43	; 0x2b
 8005f22:	2b09      	cmp	r3, #9
 8005f24:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8005f28:	dd24      	ble.n	8005f74 <_svfprintf_r+0xeac>
 8005f2a:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8005f2e:	200a      	movs	r0, #10
 8005f30:	fb93 f1f0 	sdiv	r1, r3, r0
 8005f34:	fb00 3311 	mls	r3, r0, r1, r3
 8005f38:	3330      	adds	r3, #48	; 0x30
 8005f3a:	2909      	cmp	r1, #9
 8005f3c:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8005f40:	460b      	mov	r3, r1
 8005f42:	dcf5      	bgt.n	8005f30 <_svfprintf_r+0xe68>
 8005f44:	3330      	adds	r3, #48	; 0x30
 8005f46:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005f4a:	1e51      	subs	r1, r2, #1
 8005f4c:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8005f50:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8005f54:	4281      	cmp	r1, r0
 8005f56:	461a      	mov	r2, r3
 8005f58:	d213      	bcs.n	8005f82 <_svfprintf_r+0xeba>
 8005f5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f5e:	f803 2b01 	strb.w	r2, [r3], #1
 8005f62:	e7f7      	b.n	8005f54 <_svfprintf_r+0xe8c>
 8005f64:	08009fb0 	.word	0x08009fb0
 8005f68:	08009ff4 	.word	0x08009ff4
 8005f6c:	08009fc8 	.word	0x08009fc8
 8005f70:	08009fcc 	.word	0x08009fcc
 8005f74:	2230      	movs	r2, #48	; 0x30
 8005f76:	4413      	add	r3, r2
 8005f78:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8005f7c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8005f80:	aa1c      	add	r2, sp, #112	; 0x70
 8005f82:	ab1b      	add	r3, sp, #108	; 0x6c
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	9a04      	ldr	r2, [sp, #16]
 8005f88:	9310      	str	r3, [sp, #64]	; 0x40
 8005f8a:	2a01      	cmp	r2, #1
 8005f8c:	eb03 0902 	add.w	r9, r3, r2
 8005f90:	dc02      	bgt.n	8005f98 <_svfprintf_r+0xed0>
 8005f92:	f015 0701 	ands.w	r7, r5, #1
 8005f96:	d032      	beq.n	8005ffe <_svfprintf_r+0xf36>
 8005f98:	9b08      	ldr	r3, [sp, #32]
 8005f9a:	2700      	movs	r7, #0
 8005f9c:	4499      	add	r9, r3
 8005f9e:	e02e      	b.n	8005ffe <_svfprintf_r+0xf36>
 8005fa0:	9b02      	ldr	r3, [sp, #8]
 8005fa2:	2b66      	cmp	r3, #102	; 0x66
 8005fa4:	d113      	bne.n	8005fce <_svfprintf_r+0xf06>
 8005fa6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	dd07      	ble.n	8005fbc <_svfprintf_r+0xef4>
 8005fac:	f1b9 0f00 	cmp.w	r9, #0
 8005fb0:	d101      	bne.n	8005fb6 <_svfprintf_r+0xeee>
 8005fb2:	07ee      	lsls	r6, r5, #31
 8005fb4:	d521      	bpl.n	8005ffa <_svfprintf_r+0xf32>
 8005fb6:	9a08      	ldr	r2, [sp, #32]
 8005fb8:	4413      	add	r3, r2
 8005fba:	e006      	b.n	8005fca <_svfprintf_r+0xf02>
 8005fbc:	f1b9 0f00 	cmp.w	r9, #0
 8005fc0:	d101      	bne.n	8005fc6 <_svfprintf_r+0xefe>
 8005fc2:	07ed      	lsls	r5, r5, #31
 8005fc4:	d514      	bpl.n	8005ff0 <_svfprintf_r+0xf28>
 8005fc6:	9b08      	ldr	r3, [sp, #32]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	444b      	add	r3, r9
 8005fcc:	e015      	b.n	8005ffa <_svfprintf_r+0xf32>
 8005fce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005fd0:	9a04      	ldr	r2, [sp, #16]
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	db03      	blt.n	8005fde <_svfprintf_r+0xf16>
 8005fd6:	07e8      	lsls	r0, r5, #31
 8005fd8:	d50d      	bpl.n	8005ff6 <_svfprintf_r+0xf2e>
 8005fda:	9a08      	ldr	r2, [sp, #32]
 8005fdc:	e006      	b.n	8005fec <_svfprintf_r+0xf24>
 8005fde:	9a04      	ldr	r2, [sp, #16]
 8005fe0:	9908      	ldr	r1, [sp, #32]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	440a      	add	r2, r1
 8005fe6:	dc05      	bgt.n	8005ff4 <_svfprintf_r+0xf2c>
 8005fe8:	f1c3 0301 	rsb	r3, r3, #1
 8005fec:	4413      	add	r3, r2
 8005fee:	e002      	b.n	8005ff6 <_svfprintf_r+0xf2e>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e002      	b.n	8005ffa <_svfprintf_r+0xf32>
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	2267      	movs	r2, #103	; 0x67
 8005ff8:	9202      	str	r2, [sp, #8]
 8005ffa:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8005ffc:	4699      	mov	r9, r3
 8005ffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006000:	b113      	cbz	r3, 8006008 <_svfprintf_r+0xf40>
 8006002:	232d      	movs	r3, #45	; 0x2d
 8006004:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8006008:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800600a:	2600      	movs	r6, #0
 800600c:	f7ff bb4c 	b.w	80056a8 <_svfprintf_r+0x5e0>
 8006010:	2200      	movs	r2, #0
 8006012:	2300      	movs	r3, #0
 8006014:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006018:	f7fa fd6c 	bl	8000af4 <__aeabi_dcmplt>
 800601c:	b110      	cbz	r0, 8006024 <_svfprintf_r+0xf5c>
 800601e:	232d      	movs	r3, #45	; 0x2d
 8006020:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8006024:	4b07      	ldr	r3, [pc, #28]	; (8006044 <_svfprintf_r+0xf7c>)
 8006026:	4a08      	ldr	r2, [pc, #32]	; (8006048 <_svfprintf_r+0xf80>)
 8006028:	e6e3      	b.n	8005df2 <_svfprintf_r+0xd2a>
 800602a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800602c:	1a1b      	subs	r3, r3, r0
 800602e:	9304      	str	r3, [sp, #16]
 8006030:	e75f      	b.n	8005ef2 <_svfprintf_r+0xe2a>
 8006032:	ea56 0207 	orrs.w	r2, r6, r7
 8006036:	f47f aaaa 	bne.w	800558e <_svfprintf_r+0x4c6>
 800603a:	f7ff baaf 	b.w	800559c <_svfprintf_r+0x4d4>
 800603e:	b03d      	add	sp, #244	; 0xf4
 8006040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006044:	08009fc0 	.word	0x08009fc0
 8006048:	08009fc4 	.word	0x08009fc4
 800604c:	00000000 	.word	0x00000000

08006050 <_vfprintf_r>:
 8006050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006054:	b0bd      	sub	sp, #244	; 0xf4
 8006056:	468b      	mov	fp, r1
 8006058:	9205      	str	r2, [sp, #20]
 800605a:	461c      	mov	r4, r3
 800605c:	461f      	mov	r7, r3
 800605e:	4682      	mov	sl, r0
 8006060:	f002 fdd6 	bl	8008c10 <_localeconv_r>
 8006064:	6803      	ldr	r3, [r0, #0]
 8006066:	930d      	str	r3, [sp, #52]	; 0x34
 8006068:	4618      	mov	r0, r3
 800606a:	f7fa f8bb 	bl	80001e4 <strlen>
 800606e:	9008      	str	r0, [sp, #32]
 8006070:	f1ba 0f00 	cmp.w	sl, #0
 8006074:	d005      	beq.n	8006082 <_vfprintf_r+0x32>
 8006076:	f8da 3018 	ldr.w	r3, [sl, #24]
 800607a:	b913      	cbnz	r3, 8006082 <_vfprintf_r+0x32>
 800607c:	4650      	mov	r0, sl
 800607e:	f001 ffb1 	bl	8007fe4 <__sinit>
 8006082:	4b9d      	ldr	r3, [pc, #628]	; (80062f8 <_vfprintf_r+0x2a8>)
 8006084:	459b      	cmp	fp, r3
 8006086:	d102      	bne.n	800608e <_vfprintf_r+0x3e>
 8006088:	f8da b004 	ldr.w	fp, [sl, #4]
 800608c:	e00a      	b.n	80060a4 <_vfprintf_r+0x54>
 800608e:	4b9b      	ldr	r3, [pc, #620]	; (80062fc <_vfprintf_r+0x2ac>)
 8006090:	459b      	cmp	fp, r3
 8006092:	d102      	bne.n	800609a <_vfprintf_r+0x4a>
 8006094:	f8da b008 	ldr.w	fp, [sl, #8]
 8006098:	e004      	b.n	80060a4 <_vfprintf_r+0x54>
 800609a:	4b99      	ldr	r3, [pc, #612]	; (8006300 <_vfprintf_r+0x2b0>)
 800609c:	459b      	cmp	fp, r3
 800609e:	bf08      	it	eq
 80060a0:	f8da b00c 	ldreq.w	fp, [sl, #12]
 80060a4:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 80060a8:	0498      	lsls	r0, r3, #18
 80060aa:	d409      	bmi.n	80060c0 <_vfprintf_r+0x70>
 80060ac:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 80060b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80060b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060b8:	f8ab 300c 	strh.w	r3, [fp, #12]
 80060bc:	f8cb 2064 	str.w	r2, [fp, #100]	; 0x64
 80060c0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80060c4:	0719      	lsls	r1, r3, #28
 80060c6:	d509      	bpl.n	80060dc <_vfprintf_r+0x8c>
 80060c8:	f8db 3010 	ldr.w	r3, [fp, #16]
 80060cc:	b133      	cbz	r3, 80060dc <_vfprintf_r+0x8c>
 80060ce:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80060d2:	f003 031a 	and.w	r3, r3, #26
 80060d6:	2b0a      	cmp	r3, #10
 80060d8:	d116      	bne.n	8006108 <_vfprintf_r+0xb8>
 80060da:	e009      	b.n	80060f0 <_vfprintf_r+0xa0>
 80060dc:	4659      	mov	r1, fp
 80060de:	4650      	mov	r0, sl
 80060e0:	f000 ffe6 	bl	80070b0 <__swsetup_r>
 80060e4:	2800      	cmp	r0, #0
 80060e6:	d0f2      	beq.n	80060ce <_vfprintf_r+0x7e>
 80060e8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ec:	f000 bfa3 	b.w	8007036 <_vfprintf_r+0xfe6>
 80060f0:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	db07      	blt.n	8006108 <_vfprintf_r+0xb8>
 80060f8:	4623      	mov	r3, r4
 80060fa:	9a05      	ldr	r2, [sp, #20]
 80060fc:	4659      	mov	r1, fp
 80060fe:	4650      	mov	r0, sl
 8006100:	f000 ffa0 	bl	8007044 <__sbprintf>
 8006104:	f000 bf97 	b.w	8007036 <_vfprintf_r+0xfe6>
 8006108:	ed9f 7b79 	vldr	d7, [pc, #484]	; 80062f0 <_vfprintf_r+0x2a0>
 800610c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006110:	2300      	movs	r3, #0
 8006112:	ac2c      	add	r4, sp, #176	; 0xb0
 8006114:	941f      	str	r4, [sp, #124]	; 0x7c
 8006116:	9321      	str	r3, [sp, #132]	; 0x84
 8006118:	9320      	str	r3, [sp, #128]	; 0x80
 800611a:	9304      	str	r3, [sp, #16]
 800611c:	9311      	str	r3, [sp, #68]	; 0x44
 800611e:	9310      	str	r3, [sp, #64]	; 0x40
 8006120:	930a      	str	r3, [sp, #40]	; 0x28
 8006122:	9d05      	ldr	r5, [sp, #20]
 8006124:	462b      	mov	r3, r5
 8006126:	f813 2b01 	ldrb.w	r2, [r3], #1
 800612a:	b11a      	cbz	r2, 8006134 <_vfprintf_r+0xe4>
 800612c:	2a25      	cmp	r2, #37	; 0x25
 800612e:	d001      	beq.n	8006134 <_vfprintf_r+0xe4>
 8006130:	461d      	mov	r5, r3
 8006132:	e7f7      	b.n	8006124 <_vfprintf_r+0xd4>
 8006134:	9b05      	ldr	r3, [sp, #20]
 8006136:	1aee      	subs	r6, r5, r3
 8006138:	d017      	beq.n	800616a <_vfprintf_r+0x11a>
 800613a:	e884 0048 	stmia.w	r4, {r3, r6}
 800613e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006140:	4433      	add	r3, r6
 8006142:	9321      	str	r3, [sp, #132]	; 0x84
 8006144:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006146:	3301      	adds	r3, #1
 8006148:	2b07      	cmp	r3, #7
 800614a:	9320      	str	r3, [sp, #128]	; 0x80
 800614c:	dc01      	bgt.n	8006152 <_vfprintf_r+0x102>
 800614e:	3408      	adds	r4, #8
 8006150:	e008      	b.n	8006164 <_vfprintf_r+0x114>
 8006152:	aa1f      	add	r2, sp, #124	; 0x7c
 8006154:	4659      	mov	r1, fp
 8006156:	4650      	mov	r0, sl
 8006158:	f003 fc5b 	bl	8009a12 <__sprint_r>
 800615c:	2800      	cmp	r0, #0
 800615e:	f040 8633 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 8006162:	ac2c      	add	r4, sp, #176	; 0xb0
 8006164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006166:	4433      	add	r3, r6
 8006168:	930a      	str	r3, [sp, #40]	; 0x28
 800616a:	782b      	ldrb	r3, [r5, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 8624 	beq.w	8006dba <_vfprintf_r+0xd6a>
 8006172:	2200      	movs	r2, #0
 8006174:	1c6b      	adds	r3, r5, #1
 8006176:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800617a:	4611      	mov	r1, r2
 800617c:	f04f 39ff 	mov.w	r9, #4294967295
 8006180:	9209      	str	r2, [sp, #36]	; 0x24
 8006182:	4615      	mov	r5, r2
 8006184:	200a      	movs	r0, #10
 8006186:	1c5e      	adds	r6, r3, #1
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	9605      	str	r6, [sp, #20]
 800618c:	9302      	str	r3, [sp, #8]
 800618e:	9b02      	ldr	r3, [sp, #8]
 8006190:	3b20      	subs	r3, #32
 8006192:	2b58      	cmp	r3, #88	; 0x58
 8006194:	f200 826a 	bhi.w	800666c <_vfprintf_r+0x61c>
 8006198:	e8df f013 	tbh	[pc, r3, lsl #1]
 800619c:	0268005c 	.word	0x0268005c
 80061a0:	006c0268 	.word	0x006c0268
 80061a4:	02680268 	.word	0x02680268
 80061a8:	02680268 	.word	0x02680268
 80061ac:	02680268 	.word	0x02680268
 80061b0:	0059006f 	.word	0x0059006f
 80061b4:	007a0268 	.word	0x007a0268
 80061b8:	0268007d 	.word	0x0268007d
 80061bc:	00b600a4 	.word	0x00b600a4
 80061c0:	00b600b6 	.word	0x00b600b6
 80061c4:	00b600b6 	.word	0x00b600b6
 80061c8:	00b600b6 	.word	0x00b600b6
 80061cc:	00b600b6 	.word	0x00b600b6
 80061d0:	02680268 	.word	0x02680268
 80061d4:	02680268 	.word	0x02680268
 80061d8:	02680268 	.word	0x02680268
 80061dc:	02680268 	.word	0x02680268
 80061e0:	02680268 	.word	0x02680268
 80061e4:	011200e6 	.word	0x011200e6
 80061e8:	01120268 	.word	0x01120268
 80061ec:	02680268 	.word	0x02680268
 80061f0:	02680268 	.word	0x02680268
 80061f4:	026800c9 	.word	0x026800c9
 80061f8:	01590268 	.word	0x01590268
 80061fc:	02680268 	.word	0x02680268
 8006200:	02680268 	.word	0x02680268
 8006204:	01a00268 	.word	0x01a00268
 8006208:	02680268 	.word	0x02680268
 800620c:	02680067 	.word	0x02680067
 8006210:	02680268 	.word	0x02680268
 8006214:	02680268 	.word	0x02680268
 8006218:	02680268 	.word	0x02680268
 800621c:	02680268 	.word	0x02680268
 8006220:	00dd0268 	.word	0x00dd0268
 8006224:	01120061 	.word	0x01120061
 8006228:	01120112 	.word	0x01120112
 800622c:	006100cc 	.word	0x006100cc
 8006230:	02680268 	.word	0x02680268
 8006234:	026800cf 	.word	0x026800cf
 8006238:	015b013b 	.word	0x015b013b
 800623c:	00da0176 	.word	0x00da0176
 8006240:	01870268 	.word	0x01870268
 8006244:	01a20268 	.word	0x01a20268
 8006248:	02680268 	.word	0x02680268
 800624c:	01ba      	.short	0x01ba
 800624e:	2201      	movs	r2, #1
 8006250:	212b      	movs	r1, #43	; 0x2b
 8006252:	e002      	b.n	800625a <_vfprintf_r+0x20a>
 8006254:	b909      	cbnz	r1, 800625a <_vfprintf_r+0x20a>
 8006256:	2201      	movs	r2, #1
 8006258:	2120      	movs	r1, #32
 800625a:	9b05      	ldr	r3, [sp, #20]
 800625c:	e793      	b.n	8006186 <_vfprintf_r+0x136>
 800625e:	2a00      	cmp	r2, #0
 8006260:	f000 8087 	beq.w	8006372 <_vfprintf_r+0x322>
 8006264:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8006268:	e083      	b.n	8006372 <_vfprintf_r+0x322>
 800626a:	b10a      	cbz	r2, 8006270 <_vfprintf_r+0x220>
 800626c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8006270:	4b24      	ldr	r3, [pc, #144]	; (8006304 <_vfprintf_r+0x2b4>)
 8006272:	e151      	b.n	8006518 <_vfprintf_r+0x4c8>
 8006274:	f045 0501 	orr.w	r5, r5, #1
 8006278:	e7ef      	b.n	800625a <_vfprintf_r+0x20a>
 800627a:	683e      	ldr	r6, [r7, #0]
 800627c:	9609      	str	r6, [sp, #36]	; 0x24
 800627e:	2e00      	cmp	r6, #0
 8006280:	f107 0304 	add.w	r3, r7, #4
 8006284:	db01      	blt.n	800628a <_vfprintf_r+0x23a>
 8006286:	461f      	mov	r7, r3
 8006288:	e7e7      	b.n	800625a <_vfprintf_r+0x20a>
 800628a:	4276      	negs	r6, r6
 800628c:	9609      	str	r6, [sp, #36]	; 0x24
 800628e:	461f      	mov	r7, r3
 8006290:	f045 0504 	orr.w	r5, r5, #4
 8006294:	e7e1      	b.n	800625a <_vfprintf_r+0x20a>
 8006296:	9e05      	ldr	r6, [sp, #20]
 8006298:	9b05      	ldr	r3, [sp, #20]
 800629a:	7836      	ldrb	r6, [r6, #0]
 800629c:	9602      	str	r6, [sp, #8]
 800629e:	2e2a      	cmp	r6, #42	; 0x2a
 80062a0:	f103 0301 	add.w	r3, r3, #1
 80062a4:	d002      	beq.n	80062ac <_vfprintf_r+0x25c>
 80062a6:	f04f 0900 	mov.w	r9, #0
 80062aa:	e00a      	b.n	80062c2 <_vfprintf_r+0x272>
 80062ac:	f8d7 9000 	ldr.w	r9, [r7]
 80062b0:	9305      	str	r3, [sp, #20]
 80062b2:	1d3e      	adds	r6, r7, #4
 80062b4:	f1b9 0f00 	cmp.w	r9, #0
 80062b8:	4637      	mov	r7, r6
 80062ba:	dace      	bge.n	800625a <_vfprintf_r+0x20a>
 80062bc:	f04f 39ff 	mov.w	r9, #4294967295
 80062c0:	e7cb      	b.n	800625a <_vfprintf_r+0x20a>
 80062c2:	9305      	str	r3, [sp, #20]
 80062c4:	9b02      	ldr	r3, [sp, #8]
 80062c6:	3b30      	subs	r3, #48	; 0x30
 80062c8:	2b09      	cmp	r3, #9
 80062ca:	d808      	bhi.n	80062de <_vfprintf_r+0x28e>
 80062cc:	fb00 3909 	mla	r9, r0, r9, r3
 80062d0:	9b05      	ldr	r3, [sp, #20]
 80062d2:	461e      	mov	r6, r3
 80062d4:	f816 3b01 	ldrb.w	r3, [r6], #1
 80062d8:	9302      	str	r3, [sp, #8]
 80062da:	4633      	mov	r3, r6
 80062dc:	e7f1      	b.n	80062c2 <_vfprintf_r+0x272>
 80062de:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 80062e2:	e754      	b.n	800618e <_vfprintf_r+0x13e>
 80062e4:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80062e8:	e7b7      	b.n	800625a <_vfprintf_r+0x20a>
 80062ea:	bf00      	nop
 80062ec:	f3af 8000 	nop.w
	...
 80062f8:	0800a134 	.word	0x0800a134
 80062fc:	0800a154 	.word	0x0800a154
 8006300:	0800a174 	.word	0x0800a174
 8006304:	08009fd0 	.word	0x08009fd0
 8006308:	2300      	movs	r3, #0
 800630a:	9309      	str	r3, [sp, #36]	; 0x24
 800630c:	9b02      	ldr	r3, [sp, #8]
 800630e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006310:	3b30      	subs	r3, #48	; 0x30
 8006312:	fb00 3306 	mla	r3, r0, r6, r3
 8006316:	9309      	str	r3, [sp, #36]	; 0x24
 8006318:	9b05      	ldr	r3, [sp, #20]
 800631a:	461e      	mov	r6, r3
 800631c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8006320:	9302      	str	r3, [sp, #8]
 8006322:	9b02      	ldr	r3, [sp, #8]
 8006324:	9605      	str	r6, [sp, #20]
 8006326:	3b30      	subs	r3, #48	; 0x30
 8006328:	2b09      	cmp	r3, #9
 800632a:	d9ef      	bls.n	800630c <_vfprintf_r+0x2bc>
 800632c:	e72f      	b.n	800618e <_vfprintf_r+0x13e>
 800632e:	f045 0508 	orr.w	r5, r5, #8
 8006332:	e792      	b.n	800625a <_vfprintf_r+0x20a>
 8006334:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8006338:	e78f      	b.n	800625a <_vfprintf_r+0x20a>
 800633a:	9b05      	ldr	r3, [sp, #20]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	2b6c      	cmp	r3, #108	; 0x6c
 8006340:	d103      	bne.n	800634a <_vfprintf_r+0x2fa>
 8006342:	9b05      	ldr	r3, [sp, #20]
 8006344:	3301      	adds	r3, #1
 8006346:	9305      	str	r3, [sp, #20]
 8006348:	e002      	b.n	8006350 <_vfprintf_r+0x300>
 800634a:	f045 0510 	orr.w	r5, r5, #16
 800634e:	e784      	b.n	800625a <_vfprintf_r+0x20a>
 8006350:	f045 0520 	orr.w	r5, r5, #32
 8006354:	e781      	b.n	800625a <_vfprintf_r+0x20a>
 8006356:	1d3b      	adds	r3, r7, #4
 8006358:	9303      	str	r3, [sp, #12]
 800635a:	2600      	movs	r6, #0
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8006362:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8006366:	e190      	b.n	800668a <_vfprintf_r+0x63a>
 8006368:	b10a      	cbz	r2, 800636e <_vfprintf_r+0x31e>
 800636a:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800636e:	f045 0510 	orr.w	r5, r5, #16
 8006372:	06aa      	lsls	r2, r5, #26
 8006374:	d508      	bpl.n	8006388 <_vfprintf_r+0x338>
 8006376:	3707      	adds	r7, #7
 8006378:	f027 0707 	bic.w	r7, r7, #7
 800637c:	f107 0308 	add.w	r3, r7, #8
 8006380:	9303      	str	r3, [sp, #12]
 8006382:	e9d7 6700 	ldrd	r6, r7, [r7]
 8006386:	e00e      	b.n	80063a6 <_vfprintf_r+0x356>
 8006388:	f015 0f10 	tst.w	r5, #16
 800638c:	f107 0304 	add.w	r3, r7, #4
 8006390:	d002      	beq.n	8006398 <_vfprintf_r+0x348>
 8006392:	9303      	str	r3, [sp, #12]
 8006394:	683e      	ldr	r6, [r7, #0]
 8006396:	e005      	b.n	80063a4 <_vfprintf_r+0x354>
 8006398:	683e      	ldr	r6, [r7, #0]
 800639a:	9303      	str	r3, [sp, #12]
 800639c:	f015 0f40 	tst.w	r5, #64	; 0x40
 80063a0:	bf18      	it	ne
 80063a2:	b236      	sxthne	r6, r6
 80063a4:	17f7      	asrs	r7, r6, #31
 80063a6:	2e00      	cmp	r6, #0
 80063a8:	f177 0300 	sbcs.w	r3, r7, #0
 80063ac:	f280 80de 	bge.w	800656c <_vfprintf_r+0x51c>
 80063b0:	4276      	negs	r6, r6
 80063b2:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80063b6:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80063ba:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80063be:	e0d5      	b.n	800656c <_vfprintf_r+0x51c>
 80063c0:	b10a      	cbz	r2, 80063c6 <_vfprintf_r+0x376>
 80063c2:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80063c6:	3707      	adds	r7, #7
 80063c8:	f027 0707 	bic.w	r7, r7, #7
 80063cc:	f107 0308 	add.w	r3, r7, #8
 80063d0:	9303      	str	r3, [sp, #12]
 80063d2:	ed97 7b00 	vldr	d7, [r7]
 80063d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80063da:	9b06      	ldr	r3, [sp, #24]
 80063dc:	9312      	str	r3, [sp, #72]	; 0x48
 80063de:	9b07      	ldr	r3, [sp, #28]
 80063e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80063e6:	f04f 32ff 	mov.w	r2, #4294967295
 80063ea:	4bab      	ldr	r3, [pc, #684]	; (8006698 <_vfprintf_r+0x648>)
 80063ec:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80063f0:	f7fa fba8 	bl	8000b44 <__aeabi_dcmpun>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	f040 84ee 	bne.w	8006dd6 <_vfprintf_r+0xd86>
 80063fa:	f04f 32ff 	mov.w	r2, #4294967295
 80063fe:	4ba6      	ldr	r3, [pc, #664]	; (8006698 <_vfprintf_r+0x648>)
 8006400:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8006404:	f7fa fb80 	bl	8000b08 <__aeabi_dcmple>
 8006408:	2800      	cmp	r0, #0
 800640a:	f040 84e4 	bne.w	8006dd6 <_vfprintf_r+0xd86>
 800640e:	f000 bdfb 	b.w	8007008 <_vfprintf_r+0xfb8>
 8006412:	b10a      	cbz	r2, 8006418 <_vfprintf_r+0x3c8>
 8006414:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8006418:	f015 0f20 	tst.w	r5, #32
 800641c:	f107 0304 	add.w	r3, r7, #4
 8006420:	d007      	beq.n	8006432 <_vfprintf_r+0x3e2>
 8006422:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	17ce      	asrs	r6, r1, #31
 8006428:	4608      	mov	r0, r1
 800642a:	4631      	mov	r1, r6
 800642c:	e9c2 0100 	strd	r0, r1, [r2]
 8006430:	e00b      	b.n	800644a <_vfprintf_r+0x3fa>
 8006432:	06e9      	lsls	r1, r5, #27
 8006434:	d406      	bmi.n	8006444 <_vfprintf_r+0x3f4>
 8006436:	066a      	lsls	r2, r5, #25
 8006438:	d504      	bpl.n	8006444 <_vfprintf_r+0x3f4>
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8006440:	8011      	strh	r1, [r2, #0]
 8006442:	e002      	b.n	800644a <_vfprintf_r+0x3fa>
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006448:	6011      	str	r1, [r2, #0]
 800644a:	461f      	mov	r7, r3
 800644c:	e669      	b.n	8006122 <_vfprintf_r+0xd2>
 800644e:	f045 0510 	orr.w	r5, r5, #16
 8006452:	f015 0320 	ands.w	r3, r5, #32
 8006456:	d009      	beq.n	800646c <_vfprintf_r+0x41c>
 8006458:	3707      	adds	r7, #7
 800645a:	f027 0707 	bic.w	r7, r7, #7
 800645e:	f107 0308 	add.w	r3, r7, #8
 8006462:	e9d7 6700 	ldrd	r6, r7, [r7]
 8006466:	9303      	str	r3, [sp, #12]
 8006468:	2300      	movs	r3, #0
 800646a:	e07b      	b.n	8006564 <_vfprintf_r+0x514>
 800646c:	1d3a      	adds	r2, r7, #4
 800646e:	f015 0110 	ands.w	r1, r5, #16
 8006472:	9203      	str	r2, [sp, #12]
 8006474:	d105      	bne.n	8006482 <_vfprintf_r+0x432>
 8006476:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800647a:	d002      	beq.n	8006482 <_vfprintf_r+0x432>
 800647c:	883e      	ldrh	r6, [r7, #0]
 800647e:	2700      	movs	r7, #0
 8006480:	e7f2      	b.n	8006468 <_vfprintf_r+0x418>
 8006482:	683e      	ldr	r6, [r7, #0]
 8006484:	2700      	movs	r7, #0
 8006486:	e06d      	b.n	8006564 <_vfprintf_r+0x514>
 8006488:	1d3b      	adds	r3, r7, #4
 800648a:	9303      	str	r3, [sp, #12]
 800648c:	2330      	movs	r3, #48	; 0x30
 800648e:	2278      	movs	r2, #120	; 0x78
 8006490:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8006494:	4b81      	ldr	r3, [pc, #516]	; (800669c <_vfprintf_r+0x64c>)
 8006496:	683e      	ldr	r6, [r7, #0]
 8006498:	9311      	str	r3, [sp, #68]	; 0x44
 800649a:	2700      	movs	r7, #0
 800649c:	f045 0502 	orr.w	r5, r5, #2
 80064a0:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 80064a4:	2302      	movs	r3, #2
 80064a6:	9202      	str	r2, [sp, #8]
 80064a8:	e05c      	b.n	8006564 <_vfprintf_r+0x514>
 80064aa:	2600      	movs	r6, #0
 80064ac:	1d3b      	adds	r3, r7, #4
 80064ae:	45b1      	cmp	r9, r6
 80064b0:	9303      	str	r3, [sp, #12]
 80064b2:	f8d7 8000 	ldr.w	r8, [r7]
 80064b6:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80064ba:	db0a      	blt.n	80064d2 <_vfprintf_r+0x482>
 80064bc:	464a      	mov	r2, r9
 80064be:	4631      	mov	r1, r6
 80064c0:	4640      	mov	r0, r8
 80064c2:	f7f9 fe9d 	bl	8000200 <memchr>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	f000 80ea 	beq.w	80066a0 <_vfprintf_r+0x650>
 80064cc:	ebc8 0900 	rsb	r9, r8, r0
 80064d0:	e0e7      	b.n	80066a2 <_vfprintf_r+0x652>
 80064d2:	4640      	mov	r0, r8
 80064d4:	f7f9 fe86 	bl	80001e4 <strlen>
 80064d8:	4681      	mov	r9, r0
 80064da:	e0e2      	b.n	80066a2 <_vfprintf_r+0x652>
 80064dc:	f045 0510 	orr.w	r5, r5, #16
 80064e0:	06ae      	lsls	r6, r5, #26
 80064e2:	d508      	bpl.n	80064f6 <_vfprintf_r+0x4a6>
 80064e4:	3707      	adds	r7, #7
 80064e6:	f027 0707 	bic.w	r7, r7, #7
 80064ea:	f107 0308 	add.w	r3, r7, #8
 80064ee:	9303      	str	r3, [sp, #12]
 80064f0:	e9d7 6700 	ldrd	r6, r7, [r7]
 80064f4:	e00a      	b.n	800650c <_vfprintf_r+0x4bc>
 80064f6:	1d3b      	adds	r3, r7, #4
 80064f8:	f015 0f10 	tst.w	r5, #16
 80064fc:	9303      	str	r3, [sp, #12]
 80064fe:	d103      	bne.n	8006508 <_vfprintf_r+0x4b8>
 8006500:	0668      	lsls	r0, r5, #25
 8006502:	d501      	bpl.n	8006508 <_vfprintf_r+0x4b8>
 8006504:	883e      	ldrh	r6, [r7, #0]
 8006506:	e000      	b.n	800650a <_vfprintf_r+0x4ba>
 8006508:	683e      	ldr	r6, [r7, #0]
 800650a:	2700      	movs	r7, #0
 800650c:	2301      	movs	r3, #1
 800650e:	e029      	b.n	8006564 <_vfprintf_r+0x514>
 8006510:	b10a      	cbz	r2, 8006516 <_vfprintf_r+0x4c6>
 8006512:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8006516:	4b61      	ldr	r3, [pc, #388]	; (800669c <_vfprintf_r+0x64c>)
 8006518:	9311      	str	r3, [sp, #68]	; 0x44
 800651a:	06a9      	lsls	r1, r5, #26
 800651c:	d508      	bpl.n	8006530 <_vfprintf_r+0x4e0>
 800651e:	3707      	adds	r7, #7
 8006520:	f027 0707 	bic.w	r7, r7, #7
 8006524:	f107 0308 	add.w	r3, r7, #8
 8006528:	9303      	str	r3, [sp, #12]
 800652a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800652e:	e00a      	b.n	8006546 <_vfprintf_r+0x4f6>
 8006530:	1d3b      	adds	r3, r7, #4
 8006532:	f015 0f10 	tst.w	r5, #16
 8006536:	9303      	str	r3, [sp, #12]
 8006538:	d103      	bne.n	8006542 <_vfprintf_r+0x4f2>
 800653a:	066a      	lsls	r2, r5, #25
 800653c:	d501      	bpl.n	8006542 <_vfprintf_r+0x4f2>
 800653e:	883e      	ldrh	r6, [r7, #0]
 8006540:	e000      	b.n	8006544 <_vfprintf_r+0x4f4>
 8006542:	683e      	ldr	r6, [r7, #0]
 8006544:	2700      	movs	r7, #0
 8006546:	07eb      	lsls	r3, r5, #31
 8006548:	d50b      	bpl.n	8006562 <_vfprintf_r+0x512>
 800654a:	ea56 0307 	orrs.w	r3, r6, r7
 800654e:	d008      	beq.n	8006562 <_vfprintf_r+0x512>
 8006550:	2330      	movs	r3, #48	; 0x30
 8006552:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8006556:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800655a:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 800655e:	f045 0502 	orr.w	r5, r5, #2
 8006562:	2302      	movs	r3, #2
 8006564:	2200      	movs	r2, #0
 8006566:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800656a:	e000      	b.n	800656e <_vfprintf_r+0x51e>
 800656c:	2301      	movs	r3, #1
 800656e:	f1b9 0f00 	cmp.w	r9, #0
 8006572:	f2c0 855a 	blt.w	800702a <_vfprintf_r+0xfda>
 8006576:	ea56 0207 	orrs.w	r2, r6, r7
 800657a:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 800657e:	d103      	bne.n	8006588 <_vfprintf_r+0x538>
 8006580:	f1b9 0f00 	cmp.w	r9, #0
 8006584:	d05f      	beq.n	8006646 <_vfprintf_r+0x5f6>
 8006586:	e006      	b.n	8006596 <_vfprintf_r+0x546>
 8006588:	460d      	mov	r5, r1
 800658a:	2b01      	cmp	r3, #1
 800658c:	d025      	beq.n	80065da <_vfprintf_r+0x58a>
 800658e:	2b02      	cmp	r3, #2
 8006590:	d046      	beq.n	8006620 <_vfprintf_r+0x5d0>
 8006592:	4629      	mov	r1, r5
 8006594:	e007      	b.n	80065a6 <_vfprintf_r+0x556>
 8006596:	460d      	mov	r5, r1
 8006598:	2b01      	cmp	r3, #1
 800659a:	d022      	beq.n	80065e2 <_vfprintf_r+0x592>
 800659c:	2b02      	cmp	r3, #2
 800659e:	d03d      	beq.n	800661c <_vfprintf_r+0x5cc>
 80065a0:	4629      	mov	r1, r5
 80065a2:	2600      	movs	r6, #0
 80065a4:	2700      	movs	r7, #0
 80065a6:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80065aa:	08f2      	lsrs	r2, r6, #3
 80065ac:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80065b0:	08f8      	lsrs	r0, r7, #3
 80065b2:	f006 0307 	and.w	r3, r6, #7
 80065b6:	4607      	mov	r7, r0
 80065b8:	4616      	mov	r6, r2
 80065ba:	3330      	adds	r3, #48	; 0x30
 80065bc:	ea56 0207 	orrs.w	r2, r6, r7
 80065c0:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80065c4:	d1f1      	bne.n	80065aa <_vfprintf_r+0x55a>
 80065c6:	07e8      	lsls	r0, r5, #31
 80065c8:	d548      	bpl.n	800665c <_vfprintf_r+0x60c>
 80065ca:	2b30      	cmp	r3, #48	; 0x30
 80065cc:	d046      	beq.n	800665c <_vfprintf_r+0x60c>
 80065ce:	2330      	movs	r3, #48	; 0x30
 80065d0:	f808 3c01 	strb.w	r3, [r8, #-1]
 80065d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80065d8:	e040      	b.n	800665c <_vfprintf_r+0x60c>
 80065da:	2f00      	cmp	r7, #0
 80065dc:	bf08      	it	eq
 80065de:	2e0a      	cmpeq	r6, #10
 80065e0:	d205      	bcs.n	80065ee <_vfprintf_r+0x59e>
 80065e2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80065e6:	3630      	adds	r6, #48	; 0x30
 80065e8:	f808 6d41 	strb.w	r6, [r8, #-65]!
 80065ec:	e029      	b.n	8006642 <_vfprintf_r+0x5f2>
 80065ee:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80065f2:	4630      	mov	r0, r6
 80065f4:	4639      	mov	r1, r7
 80065f6:	220a      	movs	r2, #10
 80065f8:	2300      	movs	r3, #0
 80065fa:	f7fa fb51 	bl	8000ca0 <__aeabi_uldivmod>
 80065fe:	3230      	adds	r2, #48	; 0x30
 8006600:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8006604:	2300      	movs	r3, #0
 8006606:	4630      	mov	r0, r6
 8006608:	4639      	mov	r1, r7
 800660a:	220a      	movs	r2, #10
 800660c:	f7fa fb48 	bl	8000ca0 <__aeabi_uldivmod>
 8006610:	4606      	mov	r6, r0
 8006612:	460f      	mov	r7, r1
 8006614:	ea56 0307 	orrs.w	r3, r6, r7
 8006618:	d1eb      	bne.n	80065f2 <_vfprintf_r+0x5a2>
 800661a:	e012      	b.n	8006642 <_vfprintf_r+0x5f2>
 800661c:	2600      	movs	r6, #0
 800661e:	2700      	movs	r7, #0
 8006620:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8006624:	f006 030f 	and.w	r3, r6, #15
 8006628:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800662a:	5cd3      	ldrb	r3, [r2, r3]
 800662c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8006630:	0933      	lsrs	r3, r6, #4
 8006632:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8006636:	093a      	lsrs	r2, r7, #4
 8006638:	461e      	mov	r6, r3
 800663a:	4617      	mov	r7, r2
 800663c:	ea56 0307 	orrs.w	r3, r6, r7
 8006640:	d1f0      	bne.n	8006624 <_vfprintf_r+0x5d4>
 8006642:	4629      	mov	r1, r5
 8006644:	e00a      	b.n	800665c <_vfprintf_r+0x60c>
 8006646:	b93b      	cbnz	r3, 8006658 <_vfprintf_r+0x608>
 8006648:	07ea      	lsls	r2, r5, #31
 800664a:	d505      	bpl.n	8006658 <_vfprintf_r+0x608>
 800664c:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8006650:	2330      	movs	r3, #48	; 0x30
 8006652:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8006656:	e001      	b.n	800665c <_vfprintf_r+0x60c>
 8006658:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800665c:	464e      	mov	r6, r9
 800665e:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8006662:	ebc8 0909 	rsb	r9, r8, r9
 8006666:	460d      	mov	r5, r1
 8006668:	2700      	movs	r7, #0
 800666a:	e01b      	b.n	80066a4 <_vfprintf_r+0x654>
 800666c:	b10a      	cbz	r2, 8006672 <_vfprintf_r+0x622>
 800666e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8006672:	9b02      	ldr	r3, [sp, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 83a0 	beq.w	8006dba <_vfprintf_r+0xd6a>
 800667a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800667e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8006682:	2600      	movs	r6, #0
 8006684:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8006688:	9703      	str	r7, [sp, #12]
 800668a:	f04f 0901 	mov.w	r9, #1
 800668e:	4637      	mov	r7, r6
 8006690:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8006694:	e006      	b.n	80066a4 <_vfprintf_r+0x654>
 8006696:	bf00      	nop
 8006698:	7fefffff 	.word	0x7fefffff
 800669c:	08009fe1 	.word	0x08009fe1
 80066a0:	4606      	mov	r6, r0
 80066a2:	4637      	mov	r7, r6
 80066a4:	454e      	cmp	r6, r9
 80066a6:	4633      	mov	r3, r6
 80066a8:	bfb8      	it	lt
 80066aa:	464b      	movlt	r3, r9
 80066ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80066ae:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80066b2:	b113      	cbz	r3, 80066ba <_vfprintf_r+0x66a>
 80066b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066b6:	3301      	adds	r3, #1
 80066b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80066ba:	f015 0302 	ands.w	r3, r5, #2
 80066be:	9314      	str	r3, [sp, #80]	; 0x50
 80066c0:	bf1e      	ittt	ne
 80066c2:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 80066c4:	3302      	addne	r3, #2
 80066c6:	930b      	strne	r3, [sp, #44]	; 0x2c
 80066c8:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80066cc:	9315      	str	r3, [sp, #84]	; 0x54
 80066ce:	d139      	bne.n	8006744 <_vfprintf_r+0x6f4>
 80066d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066d4:	1a9b      	subs	r3, r3, r2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	930c      	str	r3, [sp, #48]	; 0x30
 80066da:	dd33      	ble.n	8006744 <_vfprintf_r+0x6f4>
 80066dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066de:	2b10      	cmp	r3, #16
 80066e0:	4ba6      	ldr	r3, [pc, #664]	; (800697c <_vfprintf_r+0x92c>)
 80066e2:	6023      	str	r3, [r4, #0]
 80066e4:	dd18      	ble.n	8006718 <_vfprintf_r+0x6c8>
 80066e6:	2310      	movs	r3, #16
 80066e8:	6063      	str	r3, [r4, #4]
 80066ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066ec:	3310      	adds	r3, #16
 80066ee:	9321      	str	r3, [sp, #132]	; 0x84
 80066f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80066f2:	3301      	adds	r3, #1
 80066f4:	2b07      	cmp	r3, #7
 80066f6:	9320      	str	r3, [sp, #128]	; 0x80
 80066f8:	dc01      	bgt.n	80066fe <_vfprintf_r+0x6ae>
 80066fa:	3408      	adds	r4, #8
 80066fc:	e008      	b.n	8006710 <_vfprintf_r+0x6c0>
 80066fe:	aa1f      	add	r2, sp, #124	; 0x7c
 8006700:	4659      	mov	r1, fp
 8006702:	4650      	mov	r0, sl
 8006704:	f003 f985 	bl	8009a12 <__sprint_r>
 8006708:	2800      	cmp	r0, #0
 800670a:	f040 835d 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 800670e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006712:	3b10      	subs	r3, #16
 8006714:	930c      	str	r3, [sp, #48]	; 0x30
 8006716:	e7e1      	b.n	80066dc <_vfprintf_r+0x68c>
 8006718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800671a:	6063      	str	r3, [r4, #4]
 800671c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800671e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006720:	4413      	add	r3, r2
 8006722:	9321      	str	r3, [sp, #132]	; 0x84
 8006724:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006726:	3301      	adds	r3, #1
 8006728:	2b07      	cmp	r3, #7
 800672a:	9320      	str	r3, [sp, #128]	; 0x80
 800672c:	dc01      	bgt.n	8006732 <_vfprintf_r+0x6e2>
 800672e:	3408      	adds	r4, #8
 8006730:	e008      	b.n	8006744 <_vfprintf_r+0x6f4>
 8006732:	aa1f      	add	r2, sp, #124	; 0x7c
 8006734:	4659      	mov	r1, fp
 8006736:	4650      	mov	r0, sl
 8006738:	f003 f96b 	bl	8009a12 <__sprint_r>
 800673c:	2800      	cmp	r0, #0
 800673e:	f040 8343 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 8006742:	ac2c      	add	r4, sp, #176	; 0xb0
 8006744:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8006748:	b1bb      	cbz	r3, 800677a <_vfprintf_r+0x72a>
 800674a:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 800674e:	6023      	str	r3, [r4, #0]
 8006750:	2301      	movs	r3, #1
 8006752:	6063      	str	r3, [r4, #4]
 8006754:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006756:	3301      	adds	r3, #1
 8006758:	9321      	str	r3, [sp, #132]	; 0x84
 800675a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800675c:	3301      	adds	r3, #1
 800675e:	2b07      	cmp	r3, #7
 8006760:	9320      	str	r3, [sp, #128]	; 0x80
 8006762:	dc01      	bgt.n	8006768 <_vfprintf_r+0x718>
 8006764:	3408      	adds	r4, #8
 8006766:	e008      	b.n	800677a <_vfprintf_r+0x72a>
 8006768:	aa1f      	add	r2, sp, #124	; 0x7c
 800676a:	4659      	mov	r1, fp
 800676c:	4650      	mov	r0, sl
 800676e:	f003 f950 	bl	8009a12 <__sprint_r>
 8006772:	2800      	cmp	r0, #0
 8006774:	f040 8328 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 8006778:	ac2c      	add	r4, sp, #176	; 0xb0
 800677a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800677c:	b1b3      	cbz	r3, 80067ac <_vfprintf_r+0x75c>
 800677e:	ab18      	add	r3, sp, #96	; 0x60
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	2302      	movs	r3, #2
 8006784:	6063      	str	r3, [r4, #4]
 8006786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006788:	3302      	adds	r3, #2
 800678a:	9321      	str	r3, [sp, #132]	; 0x84
 800678c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800678e:	3301      	adds	r3, #1
 8006790:	2b07      	cmp	r3, #7
 8006792:	9320      	str	r3, [sp, #128]	; 0x80
 8006794:	dc01      	bgt.n	800679a <_vfprintf_r+0x74a>
 8006796:	3408      	adds	r4, #8
 8006798:	e008      	b.n	80067ac <_vfprintf_r+0x75c>
 800679a:	aa1f      	add	r2, sp, #124	; 0x7c
 800679c:	4659      	mov	r1, fp
 800679e:	4650      	mov	r0, sl
 80067a0:	f003 f937 	bl	8009a12 <__sprint_r>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	f040 830f 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 80067aa:	ac2c      	add	r4, sp, #176	; 0xb0
 80067ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067ae:	2b80      	cmp	r3, #128	; 0x80
 80067b0:	d135      	bne.n	800681e <_vfprintf_r+0x7ce>
 80067b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067b6:	1a9b      	subs	r3, r3, r2
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	dd30      	ble.n	800681e <_vfprintf_r+0x7ce>
 80067bc:	4a70      	ldr	r2, [pc, #448]	; (8006980 <_vfprintf_r+0x930>)
 80067be:	6022      	str	r2, [r4, #0]
 80067c0:	2b10      	cmp	r3, #16
 80067c2:	dd18      	ble.n	80067f6 <_vfprintf_r+0x7a6>
 80067c4:	2210      	movs	r2, #16
 80067c6:	6062      	str	r2, [r4, #4]
 80067c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80067ca:	3210      	adds	r2, #16
 80067cc:	9221      	str	r2, [sp, #132]	; 0x84
 80067ce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80067d0:	3201      	adds	r2, #1
 80067d2:	2a07      	cmp	r2, #7
 80067d4:	9220      	str	r2, [sp, #128]	; 0x80
 80067d6:	dc01      	bgt.n	80067dc <_vfprintf_r+0x78c>
 80067d8:	3408      	adds	r4, #8
 80067da:	e00a      	b.n	80067f2 <_vfprintf_r+0x7a2>
 80067dc:	aa1f      	add	r2, sp, #124	; 0x7c
 80067de:	4659      	mov	r1, fp
 80067e0:	4650      	mov	r0, sl
 80067e2:	930c      	str	r3, [sp, #48]	; 0x30
 80067e4:	f003 f915 	bl	8009a12 <__sprint_r>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	f040 82ed 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 80067ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067f0:	ac2c      	add	r4, sp, #176	; 0xb0
 80067f2:	3b10      	subs	r3, #16
 80067f4:	e7e2      	b.n	80067bc <_vfprintf_r+0x76c>
 80067f6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80067f8:	6063      	str	r3, [r4, #4]
 80067fa:	4413      	add	r3, r2
 80067fc:	9321      	str	r3, [sp, #132]	; 0x84
 80067fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006800:	3301      	adds	r3, #1
 8006802:	2b07      	cmp	r3, #7
 8006804:	9320      	str	r3, [sp, #128]	; 0x80
 8006806:	dc01      	bgt.n	800680c <_vfprintf_r+0x7bc>
 8006808:	3408      	adds	r4, #8
 800680a:	e008      	b.n	800681e <_vfprintf_r+0x7ce>
 800680c:	aa1f      	add	r2, sp, #124	; 0x7c
 800680e:	4659      	mov	r1, fp
 8006810:	4650      	mov	r0, sl
 8006812:	f003 f8fe 	bl	8009a12 <__sprint_r>
 8006816:	2800      	cmp	r0, #0
 8006818:	f040 82d6 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 800681c:	ac2c      	add	r4, sp, #176	; 0xb0
 800681e:	ebc9 0606 	rsb	r6, r9, r6
 8006822:	2e00      	cmp	r6, #0
 8006824:	dd2e      	ble.n	8006884 <_vfprintf_r+0x834>
 8006826:	4b56      	ldr	r3, [pc, #344]	; (8006980 <_vfprintf_r+0x930>)
 8006828:	6023      	str	r3, [r4, #0]
 800682a:	2e10      	cmp	r6, #16
 800682c:	dd16      	ble.n	800685c <_vfprintf_r+0x80c>
 800682e:	2310      	movs	r3, #16
 8006830:	6063      	str	r3, [r4, #4]
 8006832:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006834:	3310      	adds	r3, #16
 8006836:	9321      	str	r3, [sp, #132]	; 0x84
 8006838:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800683a:	3301      	adds	r3, #1
 800683c:	2b07      	cmp	r3, #7
 800683e:	9320      	str	r3, [sp, #128]	; 0x80
 8006840:	dc01      	bgt.n	8006846 <_vfprintf_r+0x7f6>
 8006842:	3408      	adds	r4, #8
 8006844:	e008      	b.n	8006858 <_vfprintf_r+0x808>
 8006846:	aa1f      	add	r2, sp, #124	; 0x7c
 8006848:	4659      	mov	r1, fp
 800684a:	4650      	mov	r0, sl
 800684c:	f003 f8e1 	bl	8009a12 <__sprint_r>
 8006850:	2800      	cmp	r0, #0
 8006852:	f040 82b9 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 8006856:	ac2c      	add	r4, sp, #176	; 0xb0
 8006858:	3e10      	subs	r6, #16
 800685a:	e7e4      	b.n	8006826 <_vfprintf_r+0x7d6>
 800685c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800685e:	9821      	ldr	r0, [sp, #132]	; 0x84
 8006860:	6066      	str	r6, [r4, #4]
 8006862:	3301      	adds	r3, #1
 8006864:	4406      	add	r6, r0
 8006866:	2b07      	cmp	r3, #7
 8006868:	9621      	str	r6, [sp, #132]	; 0x84
 800686a:	9320      	str	r3, [sp, #128]	; 0x80
 800686c:	dc01      	bgt.n	8006872 <_vfprintf_r+0x822>
 800686e:	3408      	adds	r4, #8
 8006870:	e008      	b.n	8006884 <_vfprintf_r+0x834>
 8006872:	aa1f      	add	r2, sp, #124	; 0x7c
 8006874:	4659      	mov	r1, fp
 8006876:	4650      	mov	r0, sl
 8006878:	f003 f8cb 	bl	8009a12 <__sprint_r>
 800687c:	2800      	cmp	r0, #0
 800687e:	f040 82a3 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 8006882:	ac2c      	add	r4, sp, #176	; 0xb0
 8006884:	05eb      	lsls	r3, r5, #23
 8006886:	d414      	bmi.n	80068b2 <_vfprintf_r+0x862>
 8006888:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800688a:	e884 0300 	stmia.w	r4, {r8, r9}
 800688e:	444b      	add	r3, r9
 8006890:	9321      	str	r3, [sp, #132]	; 0x84
 8006892:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006894:	3301      	adds	r3, #1
 8006896:	2b07      	cmp	r3, #7
 8006898:	9320      	str	r3, [sp, #128]	; 0x80
 800689a:	f340 8244 	ble.w	8006d26 <_vfprintf_r+0xcd6>
 800689e:	aa1f      	add	r2, sp, #124	; 0x7c
 80068a0:	4659      	mov	r1, fp
 80068a2:	4650      	mov	r0, sl
 80068a4:	f003 f8b5 	bl	8009a12 <__sprint_r>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	f040 828d 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 80068ae:	ac2c      	add	r4, sp, #176	; 0xb0
 80068b0:	e23a      	b.n	8006d28 <_vfprintf_r+0xcd8>
 80068b2:	9b02      	ldr	r3, [sp, #8]
 80068b4:	2b65      	cmp	r3, #101	; 0x65
 80068b6:	f340 81ad 	ble.w	8006c14 <_vfprintf_r+0xbc4>
 80068ba:	2200      	movs	r2, #0
 80068bc:	2300      	movs	r3, #0
 80068be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068c2:	f7fa f90d 	bl	8000ae0 <__aeabi_dcmpeq>
 80068c6:	2800      	cmp	r0, #0
 80068c8:	d05e      	beq.n	8006988 <_vfprintf_r+0x938>
 80068ca:	4b2e      	ldr	r3, [pc, #184]	; (8006984 <_vfprintf_r+0x934>)
 80068cc:	6023      	str	r3, [r4, #0]
 80068ce:	2301      	movs	r3, #1
 80068d0:	6063      	str	r3, [r4, #4]
 80068d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068d4:	3301      	adds	r3, #1
 80068d6:	9321      	str	r3, [sp, #132]	; 0x84
 80068d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80068da:	3301      	adds	r3, #1
 80068dc:	2b07      	cmp	r3, #7
 80068de:	9320      	str	r3, [sp, #128]	; 0x80
 80068e0:	dc01      	bgt.n	80068e6 <_vfprintf_r+0x896>
 80068e2:	3408      	adds	r4, #8
 80068e4:	e008      	b.n	80068f8 <_vfprintf_r+0x8a8>
 80068e6:	aa1f      	add	r2, sp, #124	; 0x7c
 80068e8:	4659      	mov	r1, fp
 80068ea:	4650      	mov	r0, sl
 80068ec:	f003 f891 	bl	8009a12 <__sprint_r>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	f040 8269 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 80068f6:	ac2c      	add	r4, sp, #176	; 0xb0
 80068f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068fa:	9a04      	ldr	r2, [sp, #16]
 80068fc:	4293      	cmp	r3, r2
 80068fe:	db02      	blt.n	8006906 <_vfprintf_r+0x8b6>
 8006900:	07ef      	lsls	r7, r5, #31
 8006902:	f140 8211 	bpl.w	8006d28 <_vfprintf_r+0xcd8>
 8006906:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	9b08      	ldr	r3, [sp, #32]
 800690c:	6063      	str	r3, [r4, #4]
 800690e:	9a08      	ldr	r2, [sp, #32]
 8006910:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006912:	4413      	add	r3, r2
 8006914:	9321      	str	r3, [sp, #132]	; 0x84
 8006916:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006918:	3301      	adds	r3, #1
 800691a:	2b07      	cmp	r3, #7
 800691c:	9320      	str	r3, [sp, #128]	; 0x80
 800691e:	dc01      	bgt.n	8006924 <_vfprintf_r+0x8d4>
 8006920:	3408      	adds	r4, #8
 8006922:	e008      	b.n	8006936 <_vfprintf_r+0x8e6>
 8006924:	aa1f      	add	r2, sp, #124	; 0x7c
 8006926:	4659      	mov	r1, fp
 8006928:	4650      	mov	r0, sl
 800692a:	f003 f872 	bl	8009a12 <__sprint_r>
 800692e:	2800      	cmp	r0, #0
 8006930:	f040 824a 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 8006934:	ac2c      	add	r4, sp, #176	; 0xb0
 8006936:	9b04      	ldr	r3, [sp, #16]
 8006938:	1e5e      	subs	r6, r3, #1
 800693a:	2e00      	cmp	r6, #0
 800693c:	f340 81f4 	ble.w	8006d28 <_vfprintf_r+0xcd8>
 8006940:	4f0f      	ldr	r7, [pc, #60]	; (8006980 <_vfprintf_r+0x930>)
 8006942:	f04f 0810 	mov.w	r8, #16
 8006946:	2e10      	cmp	r6, #16
 8006948:	f340 8159 	ble.w	8006bfe <_vfprintf_r+0xbae>
 800694c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800694e:	3310      	adds	r3, #16
 8006950:	9321      	str	r3, [sp, #132]	; 0x84
 8006952:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006954:	3301      	adds	r3, #1
 8006956:	2b07      	cmp	r3, #7
 8006958:	e884 0180 	stmia.w	r4, {r7, r8}
 800695c:	9320      	str	r3, [sp, #128]	; 0x80
 800695e:	dc01      	bgt.n	8006964 <_vfprintf_r+0x914>
 8006960:	3408      	adds	r4, #8
 8006962:	e008      	b.n	8006976 <_vfprintf_r+0x926>
 8006964:	aa1f      	add	r2, sp, #124	; 0x7c
 8006966:	4659      	mov	r1, fp
 8006968:	4650      	mov	r0, sl
 800696a:	f003 f852 	bl	8009a12 <__sprint_r>
 800696e:	2800      	cmp	r0, #0
 8006970:	f040 822a 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 8006974:	ac2c      	add	r4, sp, #176	; 0xb0
 8006976:	3e10      	subs	r6, #16
 8006978:	e7e5      	b.n	8006946 <_vfprintf_r+0x8f6>
 800697a:	bf00      	nop
 800697c:	0800a004 	.word	0x0800a004
 8006980:	0800a014 	.word	0x0800a014
 8006984:	08009ff2 	.word	0x08009ff2
 8006988:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800698a:	2b00      	cmp	r3, #0
 800698c:	dc7c      	bgt.n	8006a88 <_vfprintf_r+0xa38>
 800698e:	4b9f      	ldr	r3, [pc, #636]	; (8006c0c <_vfprintf_r+0xbbc>)
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	2301      	movs	r3, #1
 8006994:	6063      	str	r3, [r4, #4]
 8006996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006998:	3301      	adds	r3, #1
 800699a:	9321      	str	r3, [sp, #132]	; 0x84
 800699c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800699e:	3301      	adds	r3, #1
 80069a0:	2b07      	cmp	r3, #7
 80069a2:	9320      	str	r3, [sp, #128]	; 0x80
 80069a4:	dc01      	bgt.n	80069aa <_vfprintf_r+0x95a>
 80069a6:	3408      	adds	r4, #8
 80069a8:	e008      	b.n	80069bc <_vfprintf_r+0x96c>
 80069aa:	aa1f      	add	r2, sp, #124	; 0x7c
 80069ac:	4659      	mov	r1, fp
 80069ae:	4650      	mov	r0, sl
 80069b0:	f003 f82f 	bl	8009a12 <__sprint_r>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	f040 8207 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 80069ba:	ac2c      	add	r4, sp, #176	; 0xb0
 80069bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80069be:	b923      	cbnz	r3, 80069ca <_vfprintf_r+0x97a>
 80069c0:	9b04      	ldr	r3, [sp, #16]
 80069c2:	b913      	cbnz	r3, 80069ca <_vfprintf_r+0x97a>
 80069c4:	07ee      	lsls	r6, r5, #31
 80069c6:	f140 81af 	bpl.w	8006d28 <_vfprintf_r+0xcd8>
 80069ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	9b08      	ldr	r3, [sp, #32]
 80069d0:	6063      	str	r3, [r4, #4]
 80069d2:	9a08      	ldr	r2, [sp, #32]
 80069d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069d6:	4413      	add	r3, r2
 80069d8:	9321      	str	r3, [sp, #132]	; 0x84
 80069da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80069dc:	3301      	adds	r3, #1
 80069de:	2b07      	cmp	r3, #7
 80069e0:	9320      	str	r3, [sp, #128]	; 0x80
 80069e2:	dc02      	bgt.n	80069ea <_vfprintf_r+0x99a>
 80069e4:	f104 0308 	add.w	r3, r4, #8
 80069e8:	e008      	b.n	80069fc <_vfprintf_r+0x9ac>
 80069ea:	aa1f      	add	r2, sp, #124	; 0x7c
 80069ec:	4659      	mov	r1, fp
 80069ee:	4650      	mov	r0, sl
 80069f0:	f003 f80f 	bl	8009a12 <__sprint_r>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	f040 81e7 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 80069fa:	ab2c      	add	r3, sp, #176	; 0xb0
 80069fc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80069fe:	4276      	negs	r6, r6
 8006a00:	2e00      	cmp	r6, #0
 8006a02:	dd30      	ble.n	8006a66 <_vfprintf_r+0xa16>
 8006a04:	4f82      	ldr	r7, [pc, #520]	; (8006c10 <_vfprintf_r+0xbc0>)
 8006a06:	2410      	movs	r4, #16
 8006a08:	2e10      	cmp	r6, #16
 8006a0a:	dd16      	ble.n	8006a3a <_vfprintf_r+0x9ea>
 8006a0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a0e:	601f      	str	r7, [r3, #0]
 8006a10:	3210      	adds	r2, #16
 8006a12:	9221      	str	r2, [sp, #132]	; 0x84
 8006a14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006a16:	605c      	str	r4, [r3, #4]
 8006a18:	3201      	adds	r2, #1
 8006a1a:	2a07      	cmp	r2, #7
 8006a1c:	9220      	str	r2, [sp, #128]	; 0x80
 8006a1e:	dc01      	bgt.n	8006a24 <_vfprintf_r+0x9d4>
 8006a20:	3308      	adds	r3, #8
 8006a22:	e008      	b.n	8006a36 <_vfprintf_r+0x9e6>
 8006a24:	aa1f      	add	r2, sp, #124	; 0x7c
 8006a26:	4659      	mov	r1, fp
 8006a28:	4650      	mov	r0, sl
 8006a2a:	f002 fff2 	bl	8009a12 <__sprint_r>
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	f040 81ca 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 8006a34:	ab2c      	add	r3, sp, #176	; 0xb0
 8006a36:	3e10      	subs	r6, #16
 8006a38:	e7e6      	b.n	8006a08 <_vfprintf_r+0x9b8>
 8006a3a:	4a75      	ldr	r2, [pc, #468]	; (8006c10 <_vfprintf_r+0xbc0>)
 8006a3c:	e883 0044 	stmia.w	r3, {r2, r6}
 8006a40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a42:	4416      	add	r6, r2
 8006a44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006a46:	9621      	str	r6, [sp, #132]	; 0x84
 8006a48:	3201      	adds	r2, #1
 8006a4a:	2a07      	cmp	r2, #7
 8006a4c:	9220      	str	r2, [sp, #128]	; 0x80
 8006a4e:	dc01      	bgt.n	8006a54 <_vfprintf_r+0xa04>
 8006a50:	3308      	adds	r3, #8
 8006a52:	e008      	b.n	8006a66 <_vfprintf_r+0xa16>
 8006a54:	aa1f      	add	r2, sp, #124	; 0x7c
 8006a56:	4659      	mov	r1, fp
 8006a58:	4650      	mov	r0, sl
 8006a5a:	f002 ffda 	bl	8009a12 <__sprint_r>
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	f040 81b2 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 8006a64:	ab2c      	add	r3, sp, #176	; 0xb0
 8006a66:	9a04      	ldr	r2, [sp, #16]
 8006a68:	605a      	str	r2, [r3, #4]
 8006a6a:	9904      	ldr	r1, [sp, #16]
 8006a6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a6e:	f8c3 8000 	str.w	r8, [r3]
 8006a72:	440a      	add	r2, r1
 8006a74:	9221      	str	r2, [sp, #132]	; 0x84
 8006a76:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006a78:	3201      	adds	r2, #1
 8006a7a:	2a07      	cmp	r2, #7
 8006a7c:	9220      	str	r2, [sp, #128]	; 0x80
 8006a7e:	f73f af0e 	bgt.w	800689e <_vfprintf_r+0x84e>
 8006a82:	f103 0408 	add.w	r4, r3, #8
 8006a86:	e14f      	b.n	8006d28 <_vfprintf_r+0xcd8>
 8006a88:	9b04      	ldr	r3, [sp, #16]
 8006a8a:	42bb      	cmp	r3, r7
 8006a8c:	bfa8      	it	ge
 8006a8e:	463b      	movge	r3, r7
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	461e      	mov	r6, r3
 8006a94:	dd15      	ble.n	8006ac2 <_vfprintf_r+0xa72>
 8006a96:	6063      	str	r3, [r4, #4]
 8006a98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a9a:	f8c4 8000 	str.w	r8, [r4]
 8006a9e:	4433      	add	r3, r6
 8006aa0:	9321      	str	r3, [sp, #132]	; 0x84
 8006aa2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	2b07      	cmp	r3, #7
 8006aa8:	9320      	str	r3, [sp, #128]	; 0x80
 8006aaa:	dc01      	bgt.n	8006ab0 <_vfprintf_r+0xa60>
 8006aac:	3408      	adds	r4, #8
 8006aae:	e008      	b.n	8006ac2 <_vfprintf_r+0xa72>
 8006ab0:	aa1f      	add	r2, sp, #124	; 0x7c
 8006ab2:	4659      	mov	r1, fp
 8006ab4:	4650      	mov	r0, sl
 8006ab6:	f002 ffac 	bl	8009a12 <__sprint_r>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	f040 8184 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 8006ac0:	ac2c      	add	r4, sp, #176	; 0xb0
 8006ac2:	2e00      	cmp	r6, #0
 8006ac4:	bfac      	ite	ge
 8006ac6:	1bbe      	subge	r6, r7, r6
 8006ac8:	463e      	movlt	r6, r7
 8006aca:	2e00      	cmp	r6, #0
 8006acc:	dd30      	ble.n	8006b30 <_vfprintf_r+0xae0>
 8006ace:	f04f 0910 	mov.w	r9, #16
 8006ad2:	4b4f      	ldr	r3, [pc, #316]	; (8006c10 <_vfprintf_r+0xbc0>)
 8006ad4:	6023      	str	r3, [r4, #0]
 8006ad6:	2e10      	cmp	r6, #16
 8006ad8:	dd16      	ble.n	8006b08 <_vfprintf_r+0xab8>
 8006ada:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006adc:	f8c4 9004 	str.w	r9, [r4, #4]
 8006ae0:	3310      	adds	r3, #16
 8006ae2:	9321      	str	r3, [sp, #132]	; 0x84
 8006ae4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	2b07      	cmp	r3, #7
 8006aea:	9320      	str	r3, [sp, #128]	; 0x80
 8006aec:	dc01      	bgt.n	8006af2 <_vfprintf_r+0xaa2>
 8006aee:	3408      	adds	r4, #8
 8006af0:	e008      	b.n	8006b04 <_vfprintf_r+0xab4>
 8006af2:	aa1f      	add	r2, sp, #124	; 0x7c
 8006af4:	4659      	mov	r1, fp
 8006af6:	4650      	mov	r0, sl
 8006af8:	f002 ff8b 	bl	8009a12 <__sprint_r>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	f040 8163 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 8006b02:	ac2c      	add	r4, sp, #176	; 0xb0
 8006b04:	3e10      	subs	r6, #16
 8006b06:	e7e4      	b.n	8006ad2 <_vfprintf_r+0xa82>
 8006b08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b0a:	6066      	str	r6, [r4, #4]
 8006b0c:	441e      	add	r6, r3
 8006b0e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006b10:	9621      	str	r6, [sp, #132]	; 0x84
 8006b12:	3301      	adds	r3, #1
 8006b14:	2b07      	cmp	r3, #7
 8006b16:	9320      	str	r3, [sp, #128]	; 0x80
 8006b18:	dc01      	bgt.n	8006b1e <_vfprintf_r+0xace>
 8006b1a:	3408      	adds	r4, #8
 8006b1c:	e008      	b.n	8006b30 <_vfprintf_r+0xae0>
 8006b1e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006b20:	4659      	mov	r1, fp
 8006b22:	4650      	mov	r0, sl
 8006b24:	f002 ff75 	bl	8009a12 <__sprint_r>
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	f040 814d 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 8006b2e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006b30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b32:	9a04      	ldr	r2, [sp, #16]
 8006b34:	4293      	cmp	r3, r2
 8006b36:	4447      	add	r7, r8
 8006b38:	db01      	blt.n	8006b3e <_vfprintf_r+0xaee>
 8006b3a:	07e8      	lsls	r0, r5, #31
 8006b3c:	d517      	bpl.n	8006b6e <_vfprintf_r+0xb1e>
 8006b3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b40:	6023      	str	r3, [r4, #0]
 8006b42:	9b08      	ldr	r3, [sp, #32]
 8006b44:	6063      	str	r3, [r4, #4]
 8006b46:	9a08      	ldr	r2, [sp, #32]
 8006b48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b4a:	4413      	add	r3, r2
 8006b4c:	9321      	str	r3, [sp, #132]	; 0x84
 8006b4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006b50:	3301      	adds	r3, #1
 8006b52:	2b07      	cmp	r3, #7
 8006b54:	9320      	str	r3, [sp, #128]	; 0x80
 8006b56:	dc01      	bgt.n	8006b5c <_vfprintf_r+0xb0c>
 8006b58:	3408      	adds	r4, #8
 8006b5a:	e008      	b.n	8006b6e <_vfprintf_r+0xb1e>
 8006b5c:	aa1f      	add	r2, sp, #124	; 0x7c
 8006b5e:	4659      	mov	r1, fp
 8006b60:	4650      	mov	r0, sl
 8006b62:	f002 ff56 	bl	8009a12 <__sprint_r>
 8006b66:	2800      	cmp	r0, #0
 8006b68:	f040 812e 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 8006b6c:	ac2c      	add	r4, sp, #176	; 0xb0
 8006b6e:	9b04      	ldr	r3, [sp, #16]
 8006b70:	9a04      	ldr	r2, [sp, #16]
 8006b72:	eb08 0603 	add.w	r6, r8, r3
 8006b76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b78:	1bf6      	subs	r6, r6, r7
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	429e      	cmp	r6, r3
 8006b7e:	bfa8      	it	ge
 8006b80:	461e      	movge	r6, r3
 8006b82:	2e00      	cmp	r6, #0
 8006b84:	dd14      	ble.n	8006bb0 <_vfprintf_r+0xb60>
 8006b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b88:	6027      	str	r7, [r4, #0]
 8006b8a:	4433      	add	r3, r6
 8006b8c:	9321      	str	r3, [sp, #132]	; 0x84
 8006b8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006b90:	6066      	str	r6, [r4, #4]
 8006b92:	3301      	adds	r3, #1
 8006b94:	2b07      	cmp	r3, #7
 8006b96:	9320      	str	r3, [sp, #128]	; 0x80
 8006b98:	dc01      	bgt.n	8006b9e <_vfprintf_r+0xb4e>
 8006b9a:	3408      	adds	r4, #8
 8006b9c:	e008      	b.n	8006bb0 <_vfprintf_r+0xb60>
 8006b9e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006ba0:	4659      	mov	r1, fp
 8006ba2:	4650      	mov	r0, sl
 8006ba4:	f002 ff35 	bl	8009a12 <__sprint_r>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	f040 810d 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 8006bae:	ac2c      	add	r4, sp, #176	; 0xb0
 8006bb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006bb2:	9a04      	ldr	r2, [sp, #16]
 8006bb4:	2e00      	cmp	r6, #0
 8006bb6:	eba2 0303 	sub.w	r3, r2, r3
 8006bba:	bfac      	ite	ge
 8006bbc:	1b9e      	subge	r6, r3, r6
 8006bbe:	461e      	movlt	r6, r3
 8006bc0:	2e00      	cmp	r6, #0
 8006bc2:	f340 80b1 	ble.w	8006d28 <_vfprintf_r+0xcd8>
 8006bc6:	4f12      	ldr	r7, [pc, #72]	; (8006c10 <_vfprintf_r+0xbc0>)
 8006bc8:	f04f 0810 	mov.w	r8, #16
 8006bcc:	2e10      	cmp	r6, #16
 8006bce:	dd16      	ble.n	8006bfe <_vfprintf_r+0xbae>
 8006bd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bd2:	3310      	adds	r3, #16
 8006bd4:	9321      	str	r3, [sp, #132]	; 0x84
 8006bd6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006bd8:	3301      	adds	r3, #1
 8006bda:	2b07      	cmp	r3, #7
 8006bdc:	e884 0180 	stmia.w	r4, {r7, r8}
 8006be0:	9320      	str	r3, [sp, #128]	; 0x80
 8006be2:	dc01      	bgt.n	8006be8 <_vfprintf_r+0xb98>
 8006be4:	3408      	adds	r4, #8
 8006be6:	e008      	b.n	8006bfa <_vfprintf_r+0xbaa>
 8006be8:	aa1f      	add	r2, sp, #124	; 0x7c
 8006bea:	4659      	mov	r1, fp
 8006bec:	4650      	mov	r0, sl
 8006bee:	f002 ff10 	bl	8009a12 <__sprint_r>
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	f040 80e8 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 8006bf8:	ac2c      	add	r4, sp, #176	; 0xb0
 8006bfa:	3e10      	subs	r6, #16
 8006bfc:	e7e6      	b.n	8006bcc <_vfprintf_r+0xb7c>
 8006bfe:	4b04      	ldr	r3, [pc, #16]	; (8006c10 <_vfprintf_r+0xbc0>)
 8006c00:	e884 0048 	stmia.w	r4, {r3, r6}
 8006c04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c06:	441e      	add	r6, r3
 8006c08:	9621      	str	r6, [sp, #132]	; 0x84
 8006c0a:	e642      	b.n	8006892 <_vfprintf_r+0x842>
 8006c0c:	08009ff2 	.word	0x08009ff2
 8006c10:	0800a014 	.word	0x0800a014
 8006c14:	9b04      	ldr	r3, [sp, #16]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	dc01      	bgt.n	8006c1e <_vfprintf_r+0xbce>
 8006c1a:	07e9      	lsls	r1, r5, #31
 8006c1c:	d573      	bpl.n	8006d06 <_vfprintf_r+0xcb6>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	6063      	str	r3, [r4, #4]
 8006c22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c24:	f8c4 8000 	str.w	r8, [r4]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	9321      	str	r3, [sp, #132]	; 0x84
 8006c2c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006c2e:	3301      	adds	r3, #1
 8006c30:	2b07      	cmp	r3, #7
 8006c32:	9320      	str	r3, [sp, #128]	; 0x80
 8006c34:	dc01      	bgt.n	8006c3a <_vfprintf_r+0xbea>
 8006c36:	3408      	adds	r4, #8
 8006c38:	e008      	b.n	8006c4c <_vfprintf_r+0xbfc>
 8006c3a:	aa1f      	add	r2, sp, #124	; 0x7c
 8006c3c:	4659      	mov	r1, fp
 8006c3e:	4650      	mov	r0, sl
 8006c40:	f002 fee7 	bl	8009a12 <__sprint_r>
 8006c44:	2800      	cmp	r0, #0
 8006c46:	f040 80bf 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 8006c4a:	ac2c      	add	r4, sp, #176	; 0xb0
 8006c4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c4e:	6023      	str	r3, [r4, #0]
 8006c50:	9b08      	ldr	r3, [sp, #32]
 8006c52:	6063      	str	r3, [r4, #4]
 8006c54:	9a08      	ldr	r2, [sp, #32]
 8006c56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c58:	4413      	add	r3, r2
 8006c5a:	9321      	str	r3, [sp, #132]	; 0x84
 8006c5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006c5e:	3301      	adds	r3, #1
 8006c60:	2b07      	cmp	r3, #7
 8006c62:	9320      	str	r3, [sp, #128]	; 0x80
 8006c64:	dc01      	bgt.n	8006c6a <_vfprintf_r+0xc1a>
 8006c66:	3408      	adds	r4, #8
 8006c68:	e008      	b.n	8006c7c <_vfprintf_r+0xc2c>
 8006c6a:	aa1f      	add	r2, sp, #124	; 0x7c
 8006c6c:	4659      	mov	r1, fp
 8006c6e:	4650      	mov	r0, sl
 8006c70:	f002 fecf 	bl	8009a12 <__sprint_r>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	f040 80a7 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 8006c7a:	ac2c      	add	r4, sp, #176	; 0xb0
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	2200      	movs	r2, #0
 8006c80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c84:	f7f9 ff2c 	bl	8000ae0 <__aeabi_dcmpeq>
 8006c88:	9b04      	ldr	r3, [sp, #16]
 8006c8a:	1e5e      	subs	r6, r3, #1
 8006c8c:	b9b8      	cbnz	r0, 8006cbe <_vfprintf_r+0xc6e>
 8006c8e:	f108 0301 	add.w	r3, r8, #1
 8006c92:	e884 0048 	stmia.w	r4, {r3, r6}
 8006c96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c98:	9a04      	ldr	r2, [sp, #16]
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	4413      	add	r3, r2
 8006c9e:	9321      	str	r3, [sp, #132]	; 0x84
 8006ca0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	2b07      	cmp	r3, #7
 8006ca6:	9320      	str	r3, [sp, #128]	; 0x80
 8006ca8:	dd34      	ble.n	8006d14 <_vfprintf_r+0xcc4>
 8006caa:	aa1f      	add	r2, sp, #124	; 0x7c
 8006cac:	4659      	mov	r1, fp
 8006cae:	4650      	mov	r0, sl
 8006cb0:	f002 feaf 	bl	8009a12 <__sprint_r>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	f040 8087 	bne.w	8006dc8 <_vfprintf_r+0xd78>
 8006cba:	ac2c      	add	r4, sp, #176	; 0xb0
 8006cbc:	e02b      	b.n	8006d16 <_vfprintf_r+0xcc6>
 8006cbe:	2e00      	cmp	r6, #0
 8006cc0:	dd29      	ble.n	8006d16 <_vfprintf_r+0xcc6>
 8006cc2:	4fa6      	ldr	r7, [pc, #664]	; (8006f5c <_vfprintf_r+0xf0c>)
 8006cc4:	f04f 0810 	mov.w	r8, #16
 8006cc8:	2e10      	cmp	r6, #16
 8006cca:	dd15      	ble.n	8006cf8 <_vfprintf_r+0xca8>
 8006ccc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cce:	3310      	adds	r3, #16
 8006cd0:	9321      	str	r3, [sp, #132]	; 0x84
 8006cd2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	2b07      	cmp	r3, #7
 8006cd8:	e884 0180 	stmia.w	r4, {r7, r8}
 8006cdc:	9320      	str	r3, [sp, #128]	; 0x80
 8006cde:	dc01      	bgt.n	8006ce4 <_vfprintf_r+0xc94>
 8006ce0:	3408      	adds	r4, #8
 8006ce2:	e007      	b.n	8006cf4 <_vfprintf_r+0xca4>
 8006ce4:	aa1f      	add	r2, sp, #124	; 0x7c
 8006ce6:	4659      	mov	r1, fp
 8006ce8:	4650      	mov	r0, sl
 8006cea:	f002 fe92 	bl	8009a12 <__sprint_r>
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	d16a      	bne.n	8006dc8 <_vfprintf_r+0xd78>
 8006cf2:	ac2c      	add	r4, sp, #176	; 0xb0
 8006cf4:	3e10      	subs	r6, #16
 8006cf6:	e7e7      	b.n	8006cc8 <_vfprintf_r+0xc78>
 8006cf8:	4b98      	ldr	r3, [pc, #608]	; (8006f5c <_vfprintf_r+0xf0c>)
 8006cfa:	e884 0048 	stmia.w	r4, {r3, r6}
 8006cfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d00:	441e      	add	r6, r3
 8006d02:	9621      	str	r6, [sp, #132]	; 0x84
 8006d04:	e7cc      	b.n	8006ca0 <_vfprintf_r+0xc50>
 8006d06:	2301      	movs	r3, #1
 8006d08:	6063      	str	r3, [r4, #4]
 8006d0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d0c:	f8c4 8000 	str.w	r8, [r4]
 8006d10:	3301      	adds	r3, #1
 8006d12:	e7c4      	b.n	8006c9e <_vfprintf_r+0xc4e>
 8006d14:	3408      	adds	r4, #8
 8006d16:	ab1b      	add	r3, sp, #108	; 0x6c
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d1c:	6063      	str	r3, [r4, #4]
 8006d1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d22:	4413      	add	r3, r2
 8006d24:	e5b4      	b.n	8006890 <_vfprintf_r+0x840>
 8006d26:	3408      	adds	r4, #8
 8006d28:	076a      	lsls	r2, r5, #29
 8006d2a:	d40b      	bmi.n	8006d44 <_vfprintf_r+0xcf4>
 8006d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d32:	428a      	cmp	r2, r1
 8006d34:	bfac      	ite	ge
 8006d36:	189b      	addge	r3, r3, r2
 8006d38:	185b      	addlt	r3, r3, r1
 8006d3a:	930a      	str	r3, [sp, #40]	; 0x28
 8006d3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d035      	beq.n	8006dae <_vfprintf_r+0xd5e>
 8006d42:	e02e      	b.n	8006da2 <_vfprintf_r+0xd52>
 8006d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d48:	1a9d      	subs	r5, r3, r2
 8006d4a:	2d00      	cmp	r5, #0
 8006d4c:	ddee      	ble.n	8006d2c <_vfprintf_r+0xcdc>
 8006d4e:	2610      	movs	r6, #16
 8006d50:	4b83      	ldr	r3, [pc, #524]	; (8006f60 <_vfprintf_r+0xf10>)
 8006d52:	6023      	str	r3, [r4, #0]
 8006d54:	2d10      	cmp	r5, #16
 8006d56:	dd13      	ble.n	8006d80 <_vfprintf_r+0xd30>
 8006d58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d5a:	6066      	str	r6, [r4, #4]
 8006d5c:	3310      	adds	r3, #16
 8006d5e:	9321      	str	r3, [sp, #132]	; 0x84
 8006d60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006d62:	3301      	adds	r3, #1
 8006d64:	2b07      	cmp	r3, #7
 8006d66:	9320      	str	r3, [sp, #128]	; 0x80
 8006d68:	dc01      	bgt.n	8006d6e <_vfprintf_r+0xd1e>
 8006d6a:	3408      	adds	r4, #8
 8006d6c:	e006      	b.n	8006d7c <_vfprintf_r+0xd2c>
 8006d6e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006d70:	4659      	mov	r1, fp
 8006d72:	4650      	mov	r0, sl
 8006d74:	f002 fe4d 	bl	8009a12 <__sprint_r>
 8006d78:	bb30      	cbnz	r0, 8006dc8 <_vfprintf_r+0xd78>
 8006d7a:	ac2c      	add	r4, sp, #176	; 0xb0
 8006d7c:	3d10      	subs	r5, #16
 8006d7e:	e7e7      	b.n	8006d50 <_vfprintf_r+0xd00>
 8006d80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d82:	6065      	str	r5, [r4, #4]
 8006d84:	441d      	add	r5, r3
 8006d86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006d88:	9521      	str	r5, [sp, #132]	; 0x84
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	2b07      	cmp	r3, #7
 8006d8e:	9320      	str	r3, [sp, #128]	; 0x80
 8006d90:	ddcc      	ble.n	8006d2c <_vfprintf_r+0xcdc>
 8006d92:	aa1f      	add	r2, sp, #124	; 0x7c
 8006d94:	4659      	mov	r1, fp
 8006d96:	4650      	mov	r0, sl
 8006d98:	f002 fe3b 	bl	8009a12 <__sprint_r>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	d0c5      	beq.n	8006d2c <_vfprintf_r+0xcdc>
 8006da0:	e012      	b.n	8006dc8 <_vfprintf_r+0xd78>
 8006da2:	aa1f      	add	r2, sp, #124	; 0x7c
 8006da4:	4659      	mov	r1, fp
 8006da6:	4650      	mov	r0, sl
 8006da8:	f002 fe33 	bl	8009a12 <__sprint_r>
 8006dac:	b960      	cbnz	r0, 8006dc8 <_vfprintf_r+0xd78>
 8006dae:	2300      	movs	r3, #0
 8006db0:	9320      	str	r3, [sp, #128]	; 0x80
 8006db2:	9f03      	ldr	r7, [sp, #12]
 8006db4:	ac2c      	add	r4, sp, #176	; 0xb0
 8006db6:	f7ff b9b4 	b.w	8006122 <_vfprintf_r+0xd2>
 8006dba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006dbc:	b123      	cbz	r3, 8006dc8 <_vfprintf_r+0xd78>
 8006dbe:	aa1f      	add	r2, sp, #124	; 0x7c
 8006dc0:	4659      	mov	r1, fp
 8006dc2:	4650      	mov	r0, sl
 8006dc4:	f002 fe25 	bl	8009a12 <__sprint_r>
 8006dc8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8006dcc:	065b      	lsls	r3, r3, #25
 8006dce:	f53f a98b 	bmi.w	80060e8 <_vfprintf_r+0x98>
 8006dd2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006dd4:	e12f      	b.n	8007036 <_vfprintf_r+0xfe6>
 8006dd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006dda:	4610      	mov	r0, r2
 8006ddc:	4619      	mov	r1, r3
 8006dde:	f7f9 feb1 	bl	8000b44 <__aeabi_dcmpun>
 8006de2:	b160      	cbz	r0, 8006dfe <_vfprintf_r+0xdae>
 8006de4:	4b5f      	ldr	r3, [pc, #380]	; (8006f64 <_vfprintf_r+0xf14>)
 8006de6:	4a60      	ldr	r2, [pc, #384]	; (8006f68 <_vfprintf_r+0xf18>)
 8006de8:	9902      	ldr	r1, [sp, #8]
 8006dea:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8006dee:	2947      	cmp	r1, #71	; 0x47
 8006df0:	bfcc      	ite	gt
 8006df2:	4690      	movgt	r8, r2
 8006df4:	4698      	movle	r8, r3
 8006df6:	f04f 0903 	mov.w	r9, #3
 8006dfa:	2600      	movs	r6, #0
 8006dfc:	e451      	b.n	80066a2 <_vfprintf_r+0x652>
 8006dfe:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006e02:	d00a      	beq.n	8006e1a <_vfprintf_r+0xdca>
 8006e04:	9b02      	ldr	r3, [sp, #8]
 8006e06:	f023 0320 	bic.w	r3, r3, #32
 8006e0a:	2b47      	cmp	r3, #71	; 0x47
 8006e0c:	d107      	bne.n	8006e1e <_vfprintf_r+0xdce>
 8006e0e:	f1b9 0f00 	cmp.w	r9, #0
 8006e12:	bf08      	it	eq
 8006e14:	f04f 0901 	moveq.w	r9, #1
 8006e18:	e001      	b.n	8006e1e <_vfprintf_r+0xdce>
 8006e1a:	f04f 0906 	mov.w	r9, #6
 8006e1e:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8006e22:	930c      	str	r3, [sp, #48]	; 0x30
 8006e24:	9b07      	ldr	r3, [sp, #28]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	da07      	bge.n	8006e3a <_vfprintf_r+0xdea>
 8006e2a:	9b06      	ldr	r3, [sp, #24]
 8006e2c:	930e      	str	r3, [sp, #56]	; 0x38
 8006e2e:	9b07      	ldr	r3, [sp, #28]
 8006e30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006e34:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e36:	232d      	movs	r3, #45	; 0x2d
 8006e38:	e004      	b.n	8006e44 <_vfprintf_r+0xdf4>
 8006e3a:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006e3e:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8006e42:	2300      	movs	r3, #0
 8006e44:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e46:	9b02      	ldr	r3, [sp, #8]
 8006e48:	f023 0720 	bic.w	r7, r3, #32
 8006e4c:	2f46      	cmp	r7, #70	; 0x46
 8006e4e:	d004      	beq.n	8006e5a <_vfprintf_r+0xe0a>
 8006e50:	2f45      	cmp	r7, #69	; 0x45
 8006e52:	d105      	bne.n	8006e60 <_vfprintf_r+0xe10>
 8006e54:	f109 0601 	add.w	r6, r9, #1
 8006e58:	e003      	b.n	8006e62 <_vfprintf_r+0xe12>
 8006e5a:	464e      	mov	r6, r9
 8006e5c:	2103      	movs	r1, #3
 8006e5e:	e001      	b.n	8006e64 <_vfprintf_r+0xe14>
 8006e60:	464e      	mov	r6, r9
 8006e62:	2102      	movs	r1, #2
 8006e64:	ab1d      	add	r3, sp, #116	; 0x74
 8006e66:	9301      	str	r3, [sp, #4]
 8006e68:	ab1a      	add	r3, sp, #104	; 0x68
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	4632      	mov	r2, r6
 8006e6e:	ab19      	add	r3, sp, #100	; 0x64
 8006e70:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8006e74:	4650      	mov	r0, sl
 8006e76:	f000 fa1b 	bl	80072b0 <_dtoa_r>
 8006e7a:	2f47      	cmp	r7, #71	; 0x47
 8006e7c:	4680      	mov	r8, r0
 8006e7e:	d102      	bne.n	8006e86 <_vfprintf_r+0xe36>
 8006e80:	07eb      	lsls	r3, r5, #31
 8006e82:	f140 80ce 	bpl.w	8007022 <_vfprintf_r+0xfd2>
 8006e86:	eb08 0306 	add.w	r3, r8, r6
 8006e8a:	2f46      	cmp	r7, #70	; 0x46
 8006e8c:	9304      	str	r3, [sp, #16]
 8006e8e:	d111      	bne.n	8006eb4 <_vfprintf_r+0xe64>
 8006e90:	f898 3000 	ldrb.w	r3, [r8]
 8006e94:	2b30      	cmp	r3, #48	; 0x30
 8006e96:	d109      	bne.n	8006eac <_vfprintf_r+0xe5c>
 8006e98:	2200      	movs	r2, #0
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006ea0:	f7f9 fe1e 	bl	8000ae0 <__aeabi_dcmpeq>
 8006ea4:	b910      	cbnz	r0, 8006eac <_vfprintf_r+0xe5c>
 8006ea6:	f1c6 0601 	rsb	r6, r6, #1
 8006eaa:	9619      	str	r6, [sp, #100]	; 0x64
 8006eac:	9a04      	ldr	r2, [sp, #16]
 8006eae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006eb0:	441a      	add	r2, r3
 8006eb2:	9204      	str	r2, [sp, #16]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006ebc:	f7f9 fe10 	bl	8000ae0 <__aeabi_dcmpeq>
 8006ec0:	b908      	cbnz	r0, 8006ec6 <_vfprintf_r+0xe76>
 8006ec2:	2230      	movs	r2, #48	; 0x30
 8006ec4:	e002      	b.n	8006ecc <_vfprintf_r+0xe7c>
 8006ec6:	9b04      	ldr	r3, [sp, #16]
 8006ec8:	931d      	str	r3, [sp, #116]	; 0x74
 8006eca:	e007      	b.n	8006edc <_vfprintf_r+0xe8c>
 8006ecc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ece:	9904      	ldr	r1, [sp, #16]
 8006ed0:	4299      	cmp	r1, r3
 8006ed2:	d903      	bls.n	8006edc <_vfprintf_r+0xe8c>
 8006ed4:	1c59      	adds	r1, r3, #1
 8006ed6:	911d      	str	r1, [sp, #116]	; 0x74
 8006ed8:	701a      	strb	r2, [r3, #0]
 8006eda:	e7f7      	b.n	8006ecc <_vfprintf_r+0xe7c>
 8006edc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ede:	2f47      	cmp	r7, #71	; 0x47
 8006ee0:	ebc8 0303 	rsb	r3, r8, r3
 8006ee4:	9304      	str	r3, [sp, #16]
 8006ee6:	d108      	bne.n	8006efa <_vfprintf_r+0xeaa>
 8006ee8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006eea:	1cdf      	adds	r7, r3, #3
 8006eec:	db01      	blt.n	8006ef2 <_vfprintf_r+0xea2>
 8006eee:	4599      	cmp	r9, r3
 8006ef0:	da69      	bge.n	8006fc6 <_vfprintf_r+0xf76>
 8006ef2:	9b02      	ldr	r3, [sp, #8]
 8006ef4:	3b02      	subs	r3, #2
 8006ef6:	9302      	str	r3, [sp, #8]
 8006ef8:	e002      	b.n	8006f00 <_vfprintf_r+0xeb0>
 8006efa:	9b02      	ldr	r3, [sp, #8]
 8006efc:	2b65      	cmp	r3, #101	; 0x65
 8006efe:	dc4b      	bgt.n	8006f98 <_vfprintf_r+0xf48>
 8006f00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f02:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8006f06:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	9319      	str	r3, [sp, #100]	; 0x64
 8006f10:	bfba      	itte	lt
 8006f12:	425b      	neglt	r3, r3
 8006f14:	222d      	movlt	r2, #45	; 0x2d
 8006f16:	222b      	movge	r2, #43	; 0x2b
 8006f18:	2b09      	cmp	r3, #9
 8006f1a:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8006f1e:	dd25      	ble.n	8006f6c <_vfprintf_r+0xf1c>
 8006f20:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8006f24:	200a      	movs	r0, #10
 8006f26:	fb93 f1f0 	sdiv	r1, r3, r0
 8006f2a:	fb00 3311 	mls	r3, r0, r1, r3
 8006f2e:	3330      	adds	r3, #48	; 0x30
 8006f30:	2909      	cmp	r1, #9
 8006f32:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8006f36:	460b      	mov	r3, r1
 8006f38:	dcf5      	bgt.n	8006f26 <_vfprintf_r+0xed6>
 8006f3a:	3330      	adds	r3, #48	; 0x30
 8006f3c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006f40:	1e51      	subs	r1, r2, #1
 8006f42:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8006f46:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8006f4a:	4281      	cmp	r1, r0
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	d214      	bcs.n	8006f7a <_vfprintf_r+0xf2a>
 8006f50:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f54:	f803 2b01 	strb.w	r2, [r3], #1
 8006f58:	e7f7      	b.n	8006f4a <_vfprintf_r+0xefa>
 8006f5a:	bf00      	nop
 8006f5c:	0800a014 	.word	0x0800a014
 8006f60:	0800a004 	.word	0x0800a004
 8006f64:	08009fc8 	.word	0x08009fc8
 8006f68:	08009fcc 	.word	0x08009fcc
 8006f6c:	2230      	movs	r2, #48	; 0x30
 8006f6e:	4413      	add	r3, r2
 8006f70:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8006f74:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8006f78:	aa1c      	add	r2, sp, #112	; 0x70
 8006f7a:	ab1b      	add	r3, sp, #108	; 0x6c
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	9a04      	ldr	r2, [sp, #16]
 8006f80:	9310      	str	r3, [sp, #64]	; 0x40
 8006f82:	2a01      	cmp	r2, #1
 8006f84:	eb03 0902 	add.w	r9, r3, r2
 8006f88:	dc02      	bgt.n	8006f90 <_vfprintf_r+0xf40>
 8006f8a:	f015 0701 	ands.w	r7, r5, #1
 8006f8e:	d032      	beq.n	8006ff6 <_vfprintf_r+0xfa6>
 8006f90:	9b08      	ldr	r3, [sp, #32]
 8006f92:	2700      	movs	r7, #0
 8006f94:	4499      	add	r9, r3
 8006f96:	e02e      	b.n	8006ff6 <_vfprintf_r+0xfa6>
 8006f98:	9b02      	ldr	r3, [sp, #8]
 8006f9a:	2b66      	cmp	r3, #102	; 0x66
 8006f9c:	d113      	bne.n	8006fc6 <_vfprintf_r+0xf76>
 8006f9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	dd07      	ble.n	8006fb4 <_vfprintf_r+0xf64>
 8006fa4:	f1b9 0f00 	cmp.w	r9, #0
 8006fa8:	d101      	bne.n	8006fae <_vfprintf_r+0xf5e>
 8006faa:	07ee      	lsls	r6, r5, #31
 8006fac:	d521      	bpl.n	8006ff2 <_vfprintf_r+0xfa2>
 8006fae:	9a08      	ldr	r2, [sp, #32]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	e006      	b.n	8006fc2 <_vfprintf_r+0xf72>
 8006fb4:	f1b9 0f00 	cmp.w	r9, #0
 8006fb8:	d101      	bne.n	8006fbe <_vfprintf_r+0xf6e>
 8006fba:	07ed      	lsls	r5, r5, #31
 8006fbc:	d514      	bpl.n	8006fe8 <_vfprintf_r+0xf98>
 8006fbe:	9b08      	ldr	r3, [sp, #32]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	444b      	add	r3, r9
 8006fc4:	e015      	b.n	8006ff2 <_vfprintf_r+0xfa2>
 8006fc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fc8:	9a04      	ldr	r2, [sp, #16]
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	db03      	blt.n	8006fd6 <_vfprintf_r+0xf86>
 8006fce:	07e8      	lsls	r0, r5, #31
 8006fd0:	d50d      	bpl.n	8006fee <_vfprintf_r+0xf9e>
 8006fd2:	9a08      	ldr	r2, [sp, #32]
 8006fd4:	e006      	b.n	8006fe4 <_vfprintf_r+0xf94>
 8006fd6:	9a04      	ldr	r2, [sp, #16]
 8006fd8:	9908      	ldr	r1, [sp, #32]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	440a      	add	r2, r1
 8006fde:	dc05      	bgt.n	8006fec <_vfprintf_r+0xf9c>
 8006fe0:	f1c3 0301 	rsb	r3, r3, #1
 8006fe4:	4413      	add	r3, r2
 8006fe6:	e002      	b.n	8006fee <_vfprintf_r+0xf9e>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e002      	b.n	8006ff2 <_vfprintf_r+0xfa2>
 8006fec:	4613      	mov	r3, r2
 8006fee:	2267      	movs	r2, #103	; 0x67
 8006ff0:	9202      	str	r2, [sp, #8]
 8006ff2:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8006ff4:	4699      	mov	r9, r3
 8006ff6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ff8:	b113      	cbz	r3, 8007000 <_vfprintf_r+0xfb0>
 8006ffa:	232d      	movs	r3, #45	; 0x2d
 8006ffc:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8007000:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007002:	2600      	movs	r6, #0
 8007004:	f7ff bb4e 	b.w	80066a4 <_vfprintf_r+0x654>
 8007008:	2200      	movs	r2, #0
 800700a:	2300      	movs	r3, #0
 800700c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007010:	f7f9 fd70 	bl	8000af4 <__aeabi_dcmplt>
 8007014:	b110      	cbz	r0, 800701c <_vfprintf_r+0xfcc>
 8007016:	232d      	movs	r3, #45	; 0x2d
 8007018:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800701c:	4b07      	ldr	r3, [pc, #28]	; (800703c <_vfprintf_r+0xfec>)
 800701e:	4a08      	ldr	r2, [pc, #32]	; (8007040 <_vfprintf_r+0xff0>)
 8007020:	e6e2      	b.n	8006de8 <_vfprintf_r+0xd98>
 8007022:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007024:	1a1b      	subs	r3, r3, r0
 8007026:	9304      	str	r3, [sp, #16]
 8007028:	e75e      	b.n	8006ee8 <_vfprintf_r+0xe98>
 800702a:	ea56 0207 	orrs.w	r2, r6, r7
 800702e:	f47f aaac 	bne.w	800658a <_vfprintf_r+0x53a>
 8007032:	f7ff bab1 	b.w	8006598 <_vfprintf_r+0x548>
 8007036:	b03d      	add	sp, #244	; 0xf4
 8007038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800703c:	08009fc0 	.word	0x08009fc0
 8007040:	08009fc4 	.word	0x08009fc4

08007044 <__sbprintf>:
 8007044:	b570      	push	{r4, r5, r6, lr}
 8007046:	460c      	mov	r4, r1
 8007048:	8989      	ldrh	r1, [r1, #12]
 800704a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 800704e:	f021 0102 	bic.w	r1, r1, #2
 8007052:	f8ad 100c 	strh.w	r1, [sp, #12]
 8007056:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007058:	9119      	str	r1, [sp, #100]	; 0x64
 800705a:	89e1      	ldrh	r1, [r4, #14]
 800705c:	f8ad 100e 	strh.w	r1, [sp, #14]
 8007060:	6a21      	ldr	r1, [r4, #32]
 8007062:	9108      	str	r1, [sp, #32]
 8007064:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007066:	910a      	str	r1, [sp, #40]	; 0x28
 8007068:	a91a      	add	r1, sp, #104	; 0x68
 800706a:	9100      	str	r1, [sp, #0]
 800706c:	9104      	str	r1, [sp, #16]
 800706e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007072:	9102      	str	r1, [sp, #8]
 8007074:	9105      	str	r1, [sp, #20]
 8007076:	2100      	movs	r1, #0
 8007078:	9106      	str	r1, [sp, #24]
 800707a:	4669      	mov	r1, sp
 800707c:	4606      	mov	r6, r0
 800707e:	f7fe ffe7 	bl	8006050 <_vfprintf_r>
 8007082:	1e05      	subs	r5, r0, #0
 8007084:	db07      	blt.n	8007096 <__sbprintf+0x52>
 8007086:	4669      	mov	r1, sp
 8007088:	4630      	mov	r0, r6
 800708a:	f000 ff41 	bl	8007f10 <_fflush_r>
 800708e:	2800      	cmp	r0, #0
 8007090:	bf18      	it	ne
 8007092:	f04f 35ff 	movne.w	r5, #4294967295
 8007096:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800709a:	065b      	lsls	r3, r3, #25
 800709c:	bf48      	it	mi
 800709e:	89a3      	ldrhmi	r3, [r4, #12]
 80070a0:	4628      	mov	r0, r5
 80070a2:	bf44      	itt	mi
 80070a4:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80070a8:	81a3      	strhmi	r3, [r4, #12]
 80070aa:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 80070ae:	bd70      	pop	{r4, r5, r6, pc}

080070b0 <__swsetup_r>:
 80070b0:	4b32      	ldr	r3, [pc, #200]	; (800717c <__swsetup_r+0xcc>)
 80070b2:	b570      	push	{r4, r5, r6, lr}
 80070b4:	681d      	ldr	r5, [r3, #0]
 80070b6:	4606      	mov	r6, r0
 80070b8:	460c      	mov	r4, r1
 80070ba:	b125      	cbz	r5, 80070c6 <__swsetup_r+0x16>
 80070bc:	69ab      	ldr	r3, [r5, #24]
 80070be:	b913      	cbnz	r3, 80070c6 <__swsetup_r+0x16>
 80070c0:	4628      	mov	r0, r5
 80070c2:	f000 ff8f 	bl	8007fe4 <__sinit>
 80070c6:	4b2e      	ldr	r3, [pc, #184]	; (8007180 <__swsetup_r+0xd0>)
 80070c8:	429c      	cmp	r4, r3
 80070ca:	d101      	bne.n	80070d0 <__swsetup_r+0x20>
 80070cc:	686c      	ldr	r4, [r5, #4]
 80070ce:	e008      	b.n	80070e2 <__swsetup_r+0x32>
 80070d0:	4b2c      	ldr	r3, [pc, #176]	; (8007184 <__swsetup_r+0xd4>)
 80070d2:	429c      	cmp	r4, r3
 80070d4:	d101      	bne.n	80070da <__swsetup_r+0x2a>
 80070d6:	68ac      	ldr	r4, [r5, #8]
 80070d8:	e003      	b.n	80070e2 <__swsetup_r+0x32>
 80070da:	4b2b      	ldr	r3, [pc, #172]	; (8007188 <__swsetup_r+0xd8>)
 80070dc:	429c      	cmp	r4, r3
 80070de:	bf08      	it	eq
 80070e0:	68ec      	ldreq	r4, [r5, #12]
 80070e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	0715      	lsls	r5, r2, #28
 80070ea:	d41d      	bmi.n	8007128 <__swsetup_r+0x78>
 80070ec:	06d0      	lsls	r0, r2, #27
 80070ee:	d402      	bmi.n	80070f6 <__swsetup_r+0x46>
 80070f0:	2209      	movs	r2, #9
 80070f2:	6032      	str	r2, [r6, #0]
 80070f4:	e03a      	b.n	800716c <__swsetup_r+0xbc>
 80070f6:	0751      	lsls	r1, r2, #29
 80070f8:	d512      	bpl.n	8007120 <__swsetup_r+0x70>
 80070fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070fc:	b141      	cbz	r1, 8007110 <__swsetup_r+0x60>
 80070fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007102:	4299      	cmp	r1, r3
 8007104:	d002      	beq.n	800710c <__swsetup_r+0x5c>
 8007106:	4630      	mov	r0, r6
 8007108:	f001 f834 	bl	8008174 <_free_r>
 800710c:	2300      	movs	r3, #0
 800710e:	6363      	str	r3, [r4, #52]	; 0x34
 8007110:	89a3      	ldrh	r3, [r4, #12]
 8007112:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007116:	81a3      	strh	r3, [r4, #12]
 8007118:	2300      	movs	r3, #0
 800711a:	6063      	str	r3, [r4, #4]
 800711c:	6923      	ldr	r3, [r4, #16]
 800711e:	6023      	str	r3, [r4, #0]
 8007120:	89a3      	ldrh	r3, [r4, #12]
 8007122:	f043 0308 	orr.w	r3, r3, #8
 8007126:	81a3      	strh	r3, [r4, #12]
 8007128:	6923      	ldr	r3, [r4, #16]
 800712a:	b94b      	cbnz	r3, 8007140 <__swsetup_r+0x90>
 800712c:	89a3      	ldrh	r3, [r4, #12]
 800712e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007132:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007136:	d003      	beq.n	8007140 <__swsetup_r+0x90>
 8007138:	4621      	mov	r1, r4
 800713a:	4630      	mov	r0, r6
 800713c:	f001 fd98 	bl	8008c70 <__smakebuf_r>
 8007140:	89a2      	ldrh	r2, [r4, #12]
 8007142:	f012 0301 	ands.w	r3, r2, #1
 8007146:	d005      	beq.n	8007154 <__swsetup_r+0xa4>
 8007148:	2300      	movs	r3, #0
 800714a:	60a3      	str	r3, [r4, #8]
 800714c:	6963      	ldr	r3, [r4, #20]
 800714e:	425b      	negs	r3, r3
 8007150:	61a3      	str	r3, [r4, #24]
 8007152:	e003      	b.n	800715c <__swsetup_r+0xac>
 8007154:	0792      	lsls	r2, r2, #30
 8007156:	bf58      	it	pl
 8007158:	6963      	ldrpl	r3, [r4, #20]
 800715a:	60a3      	str	r3, [r4, #8]
 800715c:	6923      	ldr	r3, [r4, #16]
 800715e:	b95b      	cbnz	r3, 8007178 <__swsetup_r+0xc8>
 8007160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007164:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8007168:	b280      	uxth	r0, r0
 800716a:	b130      	cbz	r0, 800717a <__swsetup_r+0xca>
 800716c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007170:	81a3      	strh	r3, [r4, #12]
 8007172:	f04f 30ff 	mov.w	r0, #4294967295
 8007176:	bd70      	pop	{r4, r5, r6, pc}
 8007178:	2000      	movs	r0, #0
 800717a:	bd70      	pop	{r4, r5, r6, pc}
 800717c:	20000508 	.word	0x20000508
 8007180:	0800a134 	.word	0x0800a134
 8007184:	0800a154 	.word	0x0800a154
 8007188:	0800a174 	.word	0x0800a174

0800718c <quorem>:
 800718c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007190:	6903      	ldr	r3, [r0, #16]
 8007192:	690c      	ldr	r4, [r1, #16]
 8007194:	429c      	cmp	r4, r3
 8007196:	4680      	mov	r8, r0
 8007198:	f300 8083 	bgt.w	80072a2 <quorem+0x116>
 800719c:	3c01      	subs	r4, #1
 800719e:	f101 0714 	add.w	r7, r1, #20
 80071a2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80071a6:	f100 0614 	add.w	r6, r0, #20
 80071aa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80071ae:	eb06 030e 	add.w	r3, r6, lr
 80071b2:	9301      	str	r3, [sp, #4]
 80071b4:	3501      	adds	r5, #1
 80071b6:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80071ba:	fbb3 f5f5 	udiv	r5, r3, r5
 80071be:	eb07 090e 	add.w	r9, r7, lr
 80071c2:	2d00      	cmp	r5, #0
 80071c4:	d039      	beq.n	800723a <quorem+0xae>
 80071c6:	f04f 0a00 	mov.w	sl, #0
 80071ca:	4638      	mov	r0, r7
 80071cc:	46b4      	mov	ip, r6
 80071ce:	46d3      	mov	fp, sl
 80071d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80071d4:	b293      	uxth	r3, r2
 80071d6:	fb05 a303 	mla	r3, r5, r3, sl
 80071da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071de:	b29b      	uxth	r3, r3
 80071e0:	ebc3 030b 	rsb	r3, r3, fp
 80071e4:	0c12      	lsrs	r2, r2, #16
 80071e6:	f8bc b000 	ldrh.w	fp, [ip]
 80071ea:	fb05 a202 	mla	r2, r5, r2, sl
 80071ee:	fa13 f38b 	uxtah	r3, r3, fp
 80071f2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80071f6:	fa1f fb82 	uxth.w	fp, r2
 80071fa:	f8dc 2000 	ldr.w	r2, [ip]
 80071fe:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007202:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007206:	b29b      	uxth	r3, r3
 8007208:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800720c:	4581      	cmp	r9, r0
 800720e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007212:	f84c 3b04 	str.w	r3, [ip], #4
 8007216:	d2db      	bcs.n	80071d0 <quorem+0x44>
 8007218:	f856 300e 	ldr.w	r3, [r6, lr]
 800721c:	b96b      	cbnz	r3, 800723a <quorem+0xae>
 800721e:	9b01      	ldr	r3, [sp, #4]
 8007220:	3b04      	subs	r3, #4
 8007222:	429e      	cmp	r6, r3
 8007224:	461a      	mov	r2, r3
 8007226:	d302      	bcc.n	800722e <quorem+0xa2>
 8007228:	f8c8 4010 	str.w	r4, [r8, #16]
 800722c:	e005      	b.n	800723a <quorem+0xae>
 800722e:	6812      	ldr	r2, [r2, #0]
 8007230:	3b04      	subs	r3, #4
 8007232:	2a00      	cmp	r2, #0
 8007234:	d1f8      	bne.n	8007228 <quorem+0x9c>
 8007236:	3c01      	subs	r4, #1
 8007238:	e7f3      	b.n	8007222 <quorem+0x96>
 800723a:	4640      	mov	r0, r8
 800723c:	f001 ffc5 	bl	80091ca <__mcmp>
 8007240:	2800      	cmp	r0, #0
 8007242:	db2c      	blt.n	800729e <quorem+0x112>
 8007244:	3501      	adds	r5, #1
 8007246:	4630      	mov	r0, r6
 8007248:	f04f 0e00 	mov.w	lr, #0
 800724c:	f857 1b04 	ldr.w	r1, [r7], #4
 8007250:	f8d0 c000 	ldr.w	ip, [r0]
 8007254:	b28a      	uxth	r2, r1
 8007256:	ebc2 030e 	rsb	r3, r2, lr
 800725a:	0c09      	lsrs	r1, r1, #16
 800725c:	fa13 f38c 	uxtah	r3, r3, ip
 8007260:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 8007264:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007268:	b29b      	uxth	r3, r3
 800726a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800726e:	45b9      	cmp	r9, r7
 8007270:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007274:	f840 3b04 	str.w	r3, [r0], #4
 8007278:	d2e8      	bcs.n	800724c <quorem+0xc0>
 800727a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800727e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007282:	b962      	cbnz	r2, 800729e <quorem+0x112>
 8007284:	3b04      	subs	r3, #4
 8007286:	429e      	cmp	r6, r3
 8007288:	461a      	mov	r2, r3
 800728a:	d302      	bcc.n	8007292 <quorem+0x106>
 800728c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007290:	e005      	b.n	800729e <quorem+0x112>
 8007292:	6812      	ldr	r2, [r2, #0]
 8007294:	3b04      	subs	r3, #4
 8007296:	2a00      	cmp	r2, #0
 8007298:	d1f8      	bne.n	800728c <quorem+0x100>
 800729a:	3c01      	subs	r4, #1
 800729c:	e7f3      	b.n	8007286 <quorem+0xfa>
 800729e:	4628      	mov	r0, r5
 80072a0:	e000      	b.n	80072a4 <quorem+0x118>
 80072a2:	2000      	movs	r0, #0
 80072a4:	b003      	add	sp, #12
 80072a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072aa:	0000      	movs	r0, r0
 80072ac:	0000      	movs	r0, r0
	...

080072b0 <_dtoa_r>:
 80072b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b4:	ec59 8b10 	vmov	r8, r9, d0
 80072b8:	b097      	sub	sp, #92	; 0x5c
 80072ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80072bc:	9106      	str	r1, [sp, #24]
 80072be:	4682      	mov	sl, r0
 80072c0:	9209      	str	r2, [sp, #36]	; 0x24
 80072c2:	9310      	str	r3, [sp, #64]	; 0x40
 80072c4:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80072c6:	e9cd 8900 	strd	r8, r9, [sp]
 80072ca:	b945      	cbnz	r5, 80072de <_dtoa_r+0x2e>
 80072cc:	2010      	movs	r0, #16
 80072ce:	f7fc fc55 	bl	8003b7c <malloc>
 80072d2:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 80072d6:	6045      	str	r5, [r0, #4]
 80072d8:	6085      	str	r5, [r0, #8]
 80072da:	6005      	str	r5, [r0, #0]
 80072dc:	60c5      	str	r5, [r0, #12]
 80072de:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80072e2:	6819      	ldr	r1, [r3, #0]
 80072e4:	b159      	cbz	r1, 80072fe <_dtoa_r+0x4e>
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	604a      	str	r2, [r1, #4]
 80072ea:	2301      	movs	r3, #1
 80072ec:	4093      	lsls	r3, r2
 80072ee:	608b      	str	r3, [r1, #8]
 80072f0:	4650      	mov	r0, sl
 80072f2:	f001 fd54 	bl	8008d9e <_Bfree>
 80072f6:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80072fa:	2200      	movs	r2, #0
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	9b01      	ldr	r3, [sp, #4]
 8007300:	4a9f      	ldr	r2, [pc, #636]	; (8007580 <_dtoa_r+0x2d0>)
 8007302:	2b00      	cmp	r3, #0
 8007304:	bfbf      	itttt	lt
 8007306:	2301      	movlt	r3, #1
 8007308:	6023      	strlt	r3, [r4, #0]
 800730a:	9b01      	ldrlt	r3, [sp, #4]
 800730c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007310:	bfb8      	it	lt
 8007312:	9301      	strlt	r3, [sp, #4]
 8007314:	9f01      	ldr	r7, [sp, #4]
 8007316:	bfa4      	itt	ge
 8007318:	2300      	movge	r3, #0
 800731a:	6023      	strge	r3, [r4, #0]
 800731c:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8007320:	0d1b      	lsrs	r3, r3, #20
 8007322:	051b      	lsls	r3, r3, #20
 8007324:	4293      	cmp	r3, r2
 8007326:	d11d      	bne.n	8007364 <_dtoa_r+0xb4>
 8007328:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800732a:	f242 730f 	movw	r3, #9999	; 0x270f
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	9b00      	ldr	r3, [sp, #0]
 8007332:	b943      	cbnz	r3, 8007346 <_dtoa_r+0x96>
 8007334:	4a93      	ldr	r2, [pc, #588]	; (8007584 <_dtoa_r+0x2d4>)
 8007336:	4b94      	ldr	r3, [pc, #592]	; (8007588 <_dtoa_r+0x2d8>)
 8007338:	f3c7 0013 	ubfx	r0, r7, #0, #20
 800733c:	2800      	cmp	r0, #0
 800733e:	bf14      	ite	ne
 8007340:	4618      	movne	r0, r3
 8007342:	4610      	moveq	r0, r2
 8007344:	e000      	b.n	8007348 <_dtoa_r+0x98>
 8007346:	4890      	ldr	r0, [pc, #576]	; (8007588 <_dtoa_r+0x2d8>)
 8007348:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800734a:	2b00      	cmp	r3, #0
 800734c:	f000 854a 	beq.w	8007de4 <_dtoa_r+0xb34>
 8007350:	78c3      	ldrb	r3, [r0, #3]
 8007352:	b113      	cbz	r3, 800735a <_dtoa_r+0xaa>
 8007354:	f100 0308 	add.w	r3, r0, #8
 8007358:	e000      	b.n	800735c <_dtoa_r+0xac>
 800735a:	1cc3      	adds	r3, r0, #3
 800735c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800735e:	6013      	str	r3, [r2, #0]
 8007360:	f000 bd40 	b.w	8007de4 <_dtoa_r+0xb34>
 8007364:	e9dd 4500 	ldrd	r4, r5, [sp]
 8007368:	2200      	movs	r2, #0
 800736a:	2300      	movs	r3, #0
 800736c:	4620      	mov	r0, r4
 800736e:	4629      	mov	r1, r5
 8007370:	f7f9 fbb6 	bl	8000ae0 <__aeabi_dcmpeq>
 8007374:	4680      	mov	r8, r0
 8007376:	b158      	cbz	r0, 8007390 <_dtoa_r+0xe0>
 8007378:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800737a:	2301      	movs	r3, #1
 800737c:	6013      	str	r3, [r2, #0]
 800737e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 8522 	beq.w	8007dca <_dtoa_r+0xb1a>
 8007386:	4881      	ldr	r0, [pc, #516]	; (800758c <_dtoa_r+0x2dc>)
 8007388:	6018      	str	r0, [r3, #0]
 800738a:	3801      	subs	r0, #1
 800738c:	f000 bd2a 	b.w	8007de4 <_dtoa_r+0xb34>
 8007390:	aa14      	add	r2, sp, #80	; 0x50
 8007392:	a915      	add	r1, sp, #84	; 0x54
 8007394:	ec45 4b10 	vmov	d0, r4, r5
 8007398:	4650      	mov	r0, sl
 800739a:	f002 f806 	bl	80093aa <__d2b>
 800739e:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80073a2:	9002      	str	r0, [sp, #8]
 80073a4:	b15e      	cbz	r6, 80073be <_dtoa_r+0x10e>
 80073a6:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80073aa:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80073ae:	4620      	mov	r0, r4
 80073b0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80073b4:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 80073b8:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80073bc:	e01d      	b.n	80073fa <_dtoa_r+0x14a>
 80073be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073c0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80073c2:	441e      	add	r6, r3
 80073c4:	f206 4332 	addw	r3, r6, #1074	; 0x432
 80073c8:	2b20      	cmp	r3, #32
 80073ca:	dd0a      	ble.n	80073e2 <_dtoa_r+0x132>
 80073cc:	9a00      	ldr	r2, [sp, #0]
 80073ce:	f206 4012 	addw	r0, r6, #1042	; 0x412
 80073d2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80073d6:	fa22 f000 	lsr.w	r0, r2, r0
 80073da:	fa07 f303 	lsl.w	r3, r7, r3
 80073de:	4318      	orrs	r0, r3
 80073e0:	e004      	b.n	80073ec <_dtoa_r+0x13c>
 80073e2:	f1c3 0020 	rsb	r0, r3, #32
 80073e6:	9b00      	ldr	r3, [sp, #0]
 80073e8:	fa03 f000 	lsl.w	r0, r3, r0
 80073ec:	f7f9 f89a 	bl	8000524 <__aeabi_ui2d>
 80073f0:	2301      	movs	r3, #1
 80073f2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80073f6:	3e01      	subs	r6, #1
 80073f8:	9311      	str	r3, [sp, #68]	; 0x44
 80073fa:	2200      	movs	r2, #0
 80073fc:	4b64      	ldr	r3, [pc, #400]	; (8007590 <_dtoa_r+0x2e0>)
 80073fe:	f7f8 ff53 	bl	80002a8 <__aeabi_dsub>
 8007402:	a359      	add	r3, pc, #356	; (adr r3, 8007568 <_dtoa_r+0x2b8>)
 8007404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007408:	f7f9 f902 	bl	8000610 <__aeabi_dmul>
 800740c:	a358      	add	r3, pc, #352	; (adr r3, 8007570 <_dtoa_r+0x2c0>)
 800740e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007412:	f7f8 ff4b 	bl	80002ac <__adddf3>
 8007416:	4604      	mov	r4, r0
 8007418:	4630      	mov	r0, r6
 800741a:	460d      	mov	r5, r1
 800741c:	f7f9 f892 	bl	8000544 <__aeabi_i2d>
 8007420:	a355      	add	r3, pc, #340	; (adr r3, 8007578 <_dtoa_r+0x2c8>)
 8007422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007426:	f7f9 f8f3 	bl	8000610 <__aeabi_dmul>
 800742a:	4602      	mov	r2, r0
 800742c:	460b      	mov	r3, r1
 800742e:	4620      	mov	r0, r4
 8007430:	4629      	mov	r1, r5
 8007432:	f7f8 ff3b 	bl	80002ac <__adddf3>
 8007436:	4604      	mov	r4, r0
 8007438:	460d      	mov	r5, r1
 800743a:	f7f9 fb99 	bl	8000b70 <__aeabi_d2iz>
 800743e:	2200      	movs	r2, #0
 8007440:	4683      	mov	fp, r0
 8007442:	2300      	movs	r3, #0
 8007444:	4620      	mov	r0, r4
 8007446:	4629      	mov	r1, r5
 8007448:	f7f9 fb54 	bl	8000af4 <__aeabi_dcmplt>
 800744c:	b158      	cbz	r0, 8007466 <_dtoa_r+0x1b6>
 800744e:	4658      	mov	r0, fp
 8007450:	f7f9 f878 	bl	8000544 <__aeabi_i2d>
 8007454:	4602      	mov	r2, r0
 8007456:	460b      	mov	r3, r1
 8007458:	4620      	mov	r0, r4
 800745a:	4629      	mov	r1, r5
 800745c:	f7f9 fb40 	bl	8000ae0 <__aeabi_dcmpeq>
 8007460:	b908      	cbnz	r0, 8007466 <_dtoa_r+0x1b6>
 8007462:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007466:	f1bb 0f16 	cmp.w	fp, #22
 800746a:	d80d      	bhi.n	8007488 <_dtoa_r+0x1d8>
 800746c:	4949      	ldr	r1, [pc, #292]	; (8007594 <_dtoa_r+0x2e4>)
 800746e:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8007472:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007476:	e9d1 0100 	ldrd	r0, r1, [r1]
 800747a:	f7f9 fb59 	bl	8000b30 <__aeabi_dcmpgt>
 800747e:	b130      	cbz	r0, 800748e <_dtoa_r+0x1de>
 8007480:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007484:	2300      	movs	r3, #0
 8007486:	e000      	b.n	800748a <_dtoa_r+0x1da>
 8007488:	2301      	movs	r3, #1
 800748a:	930d      	str	r3, [sp, #52]	; 0x34
 800748c:	e000      	b.n	8007490 <_dtoa_r+0x1e0>
 800748e:	900d      	str	r0, [sp, #52]	; 0x34
 8007490:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007492:	1b9e      	subs	r6, r3, r6
 8007494:	1e73      	subs	r3, r6, #1
 8007496:	9305      	str	r3, [sp, #20]
 8007498:	bf43      	ittte	mi
 800749a:	f1c3 0900 	rsbmi	r9, r3, #0
 800749e:	2300      	movmi	r3, #0
 80074a0:	9305      	strmi	r3, [sp, #20]
 80074a2:	f04f 0900 	movpl.w	r9, #0
 80074a6:	f1bb 0f00 	cmp.w	fp, #0
 80074aa:	db07      	blt.n	80074bc <_dtoa_r+0x20c>
 80074ac:	9b05      	ldr	r3, [sp, #20]
 80074ae:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80074b2:	445b      	add	r3, fp
 80074b4:	9305      	str	r3, [sp, #20]
 80074b6:	2300      	movs	r3, #0
 80074b8:	9307      	str	r3, [sp, #28]
 80074ba:	e006      	b.n	80074ca <_dtoa_r+0x21a>
 80074bc:	f1cb 0300 	rsb	r3, fp, #0
 80074c0:	9307      	str	r3, [sp, #28]
 80074c2:	2300      	movs	r3, #0
 80074c4:	ebcb 0909 	rsb	r9, fp, r9
 80074c8:	930c      	str	r3, [sp, #48]	; 0x30
 80074ca:	9b06      	ldr	r3, [sp, #24]
 80074cc:	2b09      	cmp	r3, #9
 80074ce:	d827      	bhi.n	8007520 <_dtoa_r+0x270>
 80074d0:	2b05      	cmp	r3, #5
 80074d2:	bfc4      	itt	gt
 80074d4:	3b04      	subgt	r3, #4
 80074d6:	9306      	strgt	r3, [sp, #24]
 80074d8:	9b06      	ldr	r3, [sp, #24]
 80074da:	f1a3 0302 	sub.w	r3, r3, #2
 80074de:	bfcc      	ite	gt
 80074e0:	2500      	movgt	r5, #0
 80074e2:	2501      	movle	r5, #1
 80074e4:	2b03      	cmp	r3, #3
 80074e6:	d820      	bhi.n	800752a <_dtoa_r+0x27a>
 80074e8:	e8df f003 	tbb	[pc, r3]
 80074ec:	04020e06 	.word	0x04020e06
 80074f0:	2301      	movs	r3, #1
 80074f2:	e002      	b.n	80074fa <_dtoa_r+0x24a>
 80074f4:	2301      	movs	r3, #1
 80074f6:	e008      	b.n	800750a <_dtoa_r+0x25a>
 80074f8:	2300      	movs	r3, #0
 80074fa:	9308      	str	r3, [sp, #32]
 80074fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074fe:	2b00      	cmp	r3, #0
 8007500:	dd1c      	ble.n	800753c <_dtoa_r+0x28c>
 8007502:	9303      	str	r3, [sp, #12]
 8007504:	4698      	mov	r8, r3
 8007506:	e01e      	b.n	8007546 <_dtoa_r+0x296>
 8007508:	2300      	movs	r3, #0
 800750a:	9308      	str	r3, [sp, #32]
 800750c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800750e:	445b      	add	r3, fp
 8007510:	f103 0801 	add.w	r8, r3, #1
 8007514:	9303      	str	r3, [sp, #12]
 8007516:	4643      	mov	r3, r8
 8007518:	2b01      	cmp	r3, #1
 800751a:	bfb8      	it	lt
 800751c:	2301      	movlt	r3, #1
 800751e:	e012      	b.n	8007546 <_dtoa_r+0x296>
 8007520:	2501      	movs	r5, #1
 8007522:	2300      	movs	r3, #0
 8007524:	9306      	str	r3, [sp, #24]
 8007526:	9508      	str	r5, [sp, #32]
 8007528:	e001      	b.n	800752e <_dtoa_r+0x27e>
 800752a:	2301      	movs	r3, #1
 800752c:	9308      	str	r3, [sp, #32]
 800752e:	f04f 33ff 	mov.w	r3, #4294967295
 8007532:	9303      	str	r3, [sp, #12]
 8007534:	4698      	mov	r8, r3
 8007536:	2200      	movs	r2, #0
 8007538:	2312      	movs	r3, #18
 800753a:	e003      	b.n	8007544 <_dtoa_r+0x294>
 800753c:	2301      	movs	r3, #1
 800753e:	9303      	str	r3, [sp, #12]
 8007540:	4698      	mov	r8, r3
 8007542:	461a      	mov	r2, r3
 8007544:	9209      	str	r2, [sp, #36]	; 0x24
 8007546:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 800754a:	2200      	movs	r2, #0
 800754c:	6062      	str	r2, [r4, #4]
 800754e:	2104      	movs	r1, #4
 8007550:	f101 0214 	add.w	r2, r1, #20
 8007554:	429a      	cmp	r2, r3
 8007556:	d81f      	bhi.n	8007598 <_dtoa_r+0x2e8>
 8007558:	6862      	ldr	r2, [r4, #4]
 800755a:	3201      	adds	r2, #1
 800755c:	6062      	str	r2, [r4, #4]
 800755e:	0049      	lsls	r1, r1, #1
 8007560:	e7f6      	b.n	8007550 <_dtoa_r+0x2a0>
 8007562:	bf00      	nop
 8007564:	f3af 8000 	nop.w
 8007568:	636f4361 	.word	0x636f4361
 800756c:	3fd287a7 	.word	0x3fd287a7
 8007570:	8b60c8b3 	.word	0x8b60c8b3
 8007574:	3fc68a28 	.word	0x3fc68a28
 8007578:	509f79fb 	.word	0x509f79fb
 800757c:	3fd34413 	.word	0x3fd34413
 8007580:	7ff00000 	.word	0x7ff00000
 8007584:	0800a125 	.word	0x0800a125
 8007588:	0800a12e 	.word	0x0800a12e
 800758c:	08009ff3 	.word	0x08009ff3
 8007590:	3ff80000 	.word	0x3ff80000
 8007594:	0800a1a8 	.word	0x0800a1a8
 8007598:	6861      	ldr	r1, [r4, #4]
 800759a:	4650      	mov	r0, sl
 800759c:	f001 fbca 	bl	8008d34 <_Balloc>
 80075a0:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80075a4:	6020      	str	r0, [r4, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	9304      	str	r3, [sp, #16]
 80075aa:	f1b8 0f0e 	cmp.w	r8, #14
 80075ae:	f200 815d 	bhi.w	800786c <_dtoa_r+0x5bc>
 80075b2:	2d00      	cmp	r5, #0
 80075b4:	f000 815a 	beq.w	800786c <_dtoa_r+0x5bc>
 80075b8:	ed9d 7b00 	vldr	d7, [sp]
 80075bc:	f1bb 0f00 	cmp.w	fp, #0
 80075c0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80075c4:	dd31      	ble.n	800762a <_dtoa_r+0x37a>
 80075c6:	4aa0      	ldr	r2, [pc, #640]	; (8007848 <_dtoa_r+0x598>)
 80075c8:	f00b 030f 	and.w	r3, fp, #15
 80075cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80075d0:	ed93 7b00 	vldr	d7, [r3]
 80075d4:	ea4f 142b 	mov.w	r4, fp, asr #4
 80075d8:	06e2      	lsls	r2, r4, #27
 80075da:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80075de:	d50c      	bpl.n	80075fa <_dtoa_r+0x34a>
 80075e0:	4b9a      	ldr	r3, [pc, #616]	; (800784c <_dtoa_r+0x59c>)
 80075e2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80075e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075ea:	f7f9 f93b 	bl	8000864 <__aeabi_ddiv>
 80075ee:	f004 040f 	and.w	r4, r4, #15
 80075f2:	e9cd 0100 	strd	r0, r1, [sp]
 80075f6:	2603      	movs	r6, #3
 80075f8:	e000      	b.n	80075fc <_dtoa_r+0x34c>
 80075fa:	2602      	movs	r6, #2
 80075fc:	4d93      	ldr	r5, [pc, #588]	; (800784c <_dtoa_r+0x59c>)
 80075fe:	b16c      	cbz	r4, 800761c <_dtoa_r+0x36c>
 8007600:	07e3      	lsls	r3, r4, #31
 8007602:	d508      	bpl.n	8007616 <_dtoa_r+0x366>
 8007604:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007608:	e9d5 2300 	ldrd	r2, r3, [r5]
 800760c:	f7f9 f800 	bl	8000610 <__aeabi_dmul>
 8007610:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007614:	3601      	adds	r6, #1
 8007616:	1064      	asrs	r4, r4, #1
 8007618:	3508      	adds	r5, #8
 800761a:	e7f0      	b.n	80075fe <_dtoa_r+0x34e>
 800761c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007620:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007624:	f7f9 f91e 	bl	8000864 <__aeabi_ddiv>
 8007628:	e020      	b.n	800766c <_dtoa_r+0x3bc>
 800762a:	f1cb 0400 	rsb	r4, fp, #0
 800762e:	b304      	cbz	r4, 8007672 <_dtoa_r+0x3c2>
 8007630:	4b85      	ldr	r3, [pc, #532]	; (8007848 <_dtoa_r+0x598>)
 8007632:	4d86      	ldr	r5, [pc, #536]	; (800784c <_dtoa_r+0x59c>)
 8007634:	f004 020f 	and.w	r2, r4, #15
 8007638:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800763c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007640:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007644:	f7f8 ffe4 	bl	8000610 <__aeabi_dmul>
 8007648:	e9cd 0100 	strd	r0, r1, [sp]
 800764c:	1124      	asrs	r4, r4, #4
 800764e:	2300      	movs	r3, #0
 8007650:	2602      	movs	r6, #2
 8007652:	b154      	cbz	r4, 800766a <_dtoa_r+0x3ba>
 8007654:	07e7      	lsls	r7, r4, #31
 8007656:	d505      	bpl.n	8007664 <_dtoa_r+0x3b4>
 8007658:	e9d5 2300 	ldrd	r2, r3, [r5]
 800765c:	f7f8 ffd8 	bl	8000610 <__aeabi_dmul>
 8007660:	3601      	adds	r6, #1
 8007662:	2301      	movs	r3, #1
 8007664:	1064      	asrs	r4, r4, #1
 8007666:	3508      	adds	r5, #8
 8007668:	e7f3      	b.n	8007652 <_dtoa_r+0x3a2>
 800766a:	b11b      	cbz	r3, 8007674 <_dtoa_r+0x3c4>
 800766c:	e9cd 0100 	strd	r0, r1, [sp]
 8007670:	e000      	b.n	8007674 <_dtoa_r+0x3c4>
 8007672:	2602      	movs	r6, #2
 8007674:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007676:	b1eb      	cbz	r3, 80076b4 <_dtoa_r+0x404>
 8007678:	e9dd 4500 	ldrd	r4, r5, [sp]
 800767c:	2200      	movs	r2, #0
 800767e:	4b74      	ldr	r3, [pc, #464]	; (8007850 <_dtoa_r+0x5a0>)
 8007680:	4620      	mov	r0, r4
 8007682:	4629      	mov	r1, r5
 8007684:	f7f9 fa36 	bl	8000af4 <__aeabi_dcmplt>
 8007688:	b1a0      	cbz	r0, 80076b4 <_dtoa_r+0x404>
 800768a:	f1b8 0f00 	cmp.w	r8, #0
 800768e:	d011      	beq.n	80076b4 <_dtoa_r+0x404>
 8007690:	9b03      	ldr	r3, [sp, #12]
 8007692:	2b00      	cmp	r3, #0
 8007694:	f340 80e6 	ble.w	8007864 <_dtoa_r+0x5b4>
 8007698:	f10b 33ff 	add.w	r3, fp, #4294967295
 800769c:	930a      	str	r3, [sp, #40]	; 0x28
 800769e:	2200      	movs	r2, #0
 80076a0:	4b6c      	ldr	r3, [pc, #432]	; (8007854 <_dtoa_r+0x5a4>)
 80076a2:	4620      	mov	r0, r4
 80076a4:	4629      	mov	r1, r5
 80076a6:	f7f8 ffb3 	bl	8000610 <__aeabi_dmul>
 80076aa:	3601      	adds	r6, #1
 80076ac:	e9cd 0100 	strd	r0, r1, [sp]
 80076b0:	9f03      	ldr	r7, [sp, #12]
 80076b2:	e002      	b.n	80076ba <_dtoa_r+0x40a>
 80076b4:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80076b8:	4647      	mov	r7, r8
 80076ba:	4630      	mov	r0, r6
 80076bc:	f7f8 ff42 	bl	8000544 <__aeabi_i2d>
 80076c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076c4:	f7f8 ffa4 	bl	8000610 <__aeabi_dmul>
 80076c8:	2200      	movs	r2, #0
 80076ca:	4b63      	ldr	r3, [pc, #396]	; (8007858 <_dtoa_r+0x5a8>)
 80076cc:	f7f8 fdee 	bl	80002ac <__adddf3>
 80076d0:	4604      	mov	r4, r0
 80076d2:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80076d6:	b9cf      	cbnz	r7, 800770c <_dtoa_r+0x45c>
 80076d8:	2200      	movs	r2, #0
 80076da:	4b60      	ldr	r3, [pc, #384]	; (800785c <_dtoa_r+0x5ac>)
 80076dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076e0:	f7f8 fde2 	bl	80002a8 <__aeabi_dsub>
 80076e4:	4622      	mov	r2, r4
 80076e6:	462b      	mov	r3, r5
 80076e8:	e9cd 0100 	strd	r0, r1, [sp]
 80076ec:	f7f9 fa20 	bl	8000b30 <__aeabi_dcmpgt>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	f040 8241 	bne.w	8007b78 <_dtoa_r+0x8c8>
 80076f6:	4622      	mov	r2, r4
 80076f8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80076fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007700:	f7f9 f9f8 	bl	8000af4 <__aeabi_dcmplt>
 8007704:	2800      	cmp	r0, #0
 8007706:	f040 822e 	bne.w	8007b66 <_dtoa_r+0x8b6>
 800770a:	e0ab      	b.n	8007864 <_dtoa_r+0x5b4>
 800770c:	9a08      	ldr	r2, [sp, #32]
 800770e:	4b4e      	ldr	r3, [pc, #312]	; (8007848 <_dtoa_r+0x598>)
 8007710:	1e79      	subs	r1, r7, #1
 8007712:	2a00      	cmp	r2, #0
 8007714:	d04a      	beq.n	80077ac <_dtoa_r+0x4fc>
 8007716:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800771a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771e:	2000      	movs	r0, #0
 8007720:	494f      	ldr	r1, [pc, #316]	; (8007860 <_dtoa_r+0x5b0>)
 8007722:	f7f9 f89f 	bl	8000864 <__aeabi_ddiv>
 8007726:	4622      	mov	r2, r4
 8007728:	462b      	mov	r3, r5
 800772a:	f7f8 fdbd 	bl	80002a8 <__aeabi_dsub>
 800772e:	9c04      	ldr	r4, [sp, #16]
 8007730:	4605      	mov	r5, r0
 8007732:	460e      	mov	r6, r1
 8007734:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007738:	f7f9 fa1a 	bl	8000b70 <__aeabi_d2iz>
 800773c:	9012      	str	r0, [sp, #72]	; 0x48
 800773e:	f7f8 ff01 	bl	8000544 <__aeabi_i2d>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	e9dd 0100 	ldrd	r0, r1, [sp]
 800774a:	f7f8 fdad 	bl	80002a8 <__aeabi_dsub>
 800774e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007750:	3330      	adds	r3, #48	; 0x30
 8007752:	f804 3b01 	strb.w	r3, [r4], #1
 8007756:	462a      	mov	r2, r5
 8007758:	4633      	mov	r3, r6
 800775a:	e9cd 0100 	strd	r0, r1, [sp]
 800775e:	f7f9 f9c9 	bl	8000af4 <__aeabi_dcmplt>
 8007762:	2800      	cmp	r0, #0
 8007764:	f040 8321 	bne.w	8007daa <_dtoa_r+0xafa>
 8007768:	e9dd 2300 	ldrd	r2, r3, [sp]
 800776c:	2000      	movs	r0, #0
 800776e:	4938      	ldr	r1, [pc, #224]	; (8007850 <_dtoa_r+0x5a0>)
 8007770:	f7f8 fd9a 	bl	80002a8 <__aeabi_dsub>
 8007774:	462a      	mov	r2, r5
 8007776:	4633      	mov	r3, r6
 8007778:	f7f9 f9bc 	bl	8000af4 <__aeabi_dcmplt>
 800777c:	2800      	cmp	r0, #0
 800777e:	f040 80d2 	bne.w	8007926 <_dtoa_r+0x676>
 8007782:	9b04      	ldr	r3, [sp, #16]
 8007784:	1ae3      	subs	r3, r4, r3
 8007786:	42bb      	cmp	r3, r7
 8007788:	da6c      	bge.n	8007864 <_dtoa_r+0x5b4>
 800778a:	2200      	movs	r2, #0
 800778c:	4b31      	ldr	r3, [pc, #196]	; (8007854 <_dtoa_r+0x5a4>)
 800778e:	4628      	mov	r0, r5
 8007790:	4631      	mov	r1, r6
 8007792:	f7f8 ff3d 	bl	8000610 <__aeabi_dmul>
 8007796:	2200      	movs	r2, #0
 8007798:	4605      	mov	r5, r0
 800779a:	460e      	mov	r6, r1
 800779c:	4b2d      	ldr	r3, [pc, #180]	; (8007854 <_dtoa_r+0x5a4>)
 800779e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077a2:	f7f8 ff35 	bl	8000610 <__aeabi_dmul>
 80077a6:	e9cd 0100 	strd	r0, r1, [sp]
 80077aa:	e7c3      	b.n	8007734 <_dtoa_r+0x484>
 80077ac:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80077b0:	4622      	mov	r2, r4
 80077b2:	462b      	mov	r3, r5
 80077b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077b8:	f7f8 ff2a 	bl	8000610 <__aeabi_dmul>
 80077bc:	9b04      	ldr	r3, [sp, #16]
 80077be:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80077c2:	19dc      	adds	r4, r3, r7
 80077c4:	461d      	mov	r5, r3
 80077c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077ca:	f7f9 f9d1 	bl	8000b70 <__aeabi_d2iz>
 80077ce:	4606      	mov	r6, r0
 80077d0:	f7f8 feb8 	bl	8000544 <__aeabi_i2d>
 80077d4:	3630      	adds	r6, #48	; 0x30
 80077d6:	4602      	mov	r2, r0
 80077d8:	460b      	mov	r3, r1
 80077da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077de:	f7f8 fd63 	bl	80002a8 <__aeabi_dsub>
 80077e2:	f805 6b01 	strb.w	r6, [r5], #1
 80077e6:	42ac      	cmp	r4, r5
 80077e8:	e9cd 0100 	strd	r0, r1, [sp]
 80077ec:	f04f 0200 	mov.w	r2, #0
 80077f0:	d123      	bne.n	800783a <_dtoa_r+0x58a>
 80077f2:	4b1b      	ldr	r3, [pc, #108]	; (8007860 <_dtoa_r+0x5b0>)
 80077f4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80077f8:	f7f8 fd58 	bl	80002ac <__adddf3>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007804:	f7f9 f994 	bl	8000b30 <__aeabi_dcmpgt>
 8007808:	2800      	cmp	r0, #0
 800780a:	f040 808c 	bne.w	8007926 <_dtoa_r+0x676>
 800780e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007812:	2000      	movs	r0, #0
 8007814:	4912      	ldr	r1, [pc, #72]	; (8007860 <_dtoa_r+0x5b0>)
 8007816:	f7f8 fd47 	bl	80002a8 <__aeabi_dsub>
 800781a:	4602      	mov	r2, r0
 800781c:	460b      	mov	r3, r1
 800781e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007822:	f7f9 f967 	bl	8000af4 <__aeabi_dcmplt>
 8007826:	b1e8      	cbz	r0, 8007864 <_dtoa_r+0x5b4>
 8007828:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800782c:	2b30      	cmp	r3, #48	; 0x30
 800782e:	f104 32ff 	add.w	r2, r4, #4294967295
 8007832:	f040 82ba 	bne.w	8007daa <_dtoa_r+0xafa>
 8007836:	4614      	mov	r4, r2
 8007838:	e7f6      	b.n	8007828 <_dtoa_r+0x578>
 800783a:	4b06      	ldr	r3, [pc, #24]	; (8007854 <_dtoa_r+0x5a4>)
 800783c:	f7f8 fee8 	bl	8000610 <__aeabi_dmul>
 8007840:	e9cd 0100 	strd	r0, r1, [sp]
 8007844:	e7bf      	b.n	80077c6 <_dtoa_r+0x516>
 8007846:	bf00      	nop
 8007848:	0800a1a8 	.word	0x0800a1a8
 800784c:	0800a270 	.word	0x0800a270
 8007850:	3ff00000 	.word	0x3ff00000
 8007854:	40240000 	.word	0x40240000
 8007858:	401c0000 	.word	0x401c0000
 800785c:	40140000 	.word	0x40140000
 8007860:	3fe00000 	.word	0x3fe00000
 8007864:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8007868:	e88d 0018 	stmia.w	sp, {r3, r4}
 800786c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800786e:	2b00      	cmp	r3, #0
 8007870:	db7c      	blt.n	800796c <_dtoa_r+0x6bc>
 8007872:	f1bb 0f0e 	cmp.w	fp, #14
 8007876:	dc79      	bgt.n	800796c <_dtoa_r+0x6bc>
 8007878:	4b8f      	ldr	r3, [pc, #572]	; (8007ab8 <_dtoa_r+0x808>)
 800787a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800787e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007884:	2b00      	cmp	r3, #0
 8007886:	da14      	bge.n	80078b2 <_dtoa_r+0x602>
 8007888:	f1b8 0f00 	cmp.w	r8, #0
 800788c:	dc11      	bgt.n	80078b2 <_dtoa_r+0x602>
 800788e:	f040 816c 	bne.w	8007b6a <_dtoa_r+0x8ba>
 8007892:	2200      	movs	r2, #0
 8007894:	4b89      	ldr	r3, [pc, #548]	; (8007abc <_dtoa_r+0x80c>)
 8007896:	4630      	mov	r0, r6
 8007898:	4639      	mov	r1, r7
 800789a:	f7f8 feb9 	bl	8000610 <__aeabi_dmul>
 800789e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078a2:	f7f9 f93b 	bl	8000b1c <__aeabi_dcmpge>
 80078a6:	4645      	mov	r5, r8
 80078a8:	4646      	mov	r6, r8
 80078aa:	2800      	cmp	r0, #0
 80078ac:	f040 815f 	bne.w	8007b6e <_dtoa_r+0x8be>
 80078b0:	e166      	b.n	8007b80 <_dtoa_r+0x8d0>
 80078b2:	9c04      	ldr	r4, [sp, #16]
 80078b4:	4632      	mov	r2, r6
 80078b6:	463b      	mov	r3, r7
 80078b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078bc:	f7f8 ffd2 	bl	8000864 <__aeabi_ddiv>
 80078c0:	f7f9 f956 	bl	8000b70 <__aeabi_d2iz>
 80078c4:	4605      	mov	r5, r0
 80078c6:	f7f8 fe3d 	bl	8000544 <__aeabi_i2d>
 80078ca:	4632      	mov	r2, r6
 80078cc:	463b      	mov	r3, r7
 80078ce:	f7f8 fe9f 	bl	8000610 <__aeabi_dmul>
 80078d2:	460b      	mov	r3, r1
 80078d4:	4602      	mov	r2, r0
 80078d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078da:	f7f8 fce5 	bl	80002a8 <__aeabi_dsub>
 80078de:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 80078e2:	f804 eb01 	strb.w	lr, [r4], #1
 80078e6:	9b04      	ldr	r3, [sp, #16]
 80078e8:	ebc3 0e04 	rsb	lr, r3, r4
 80078ec:	45f0      	cmp	r8, lr
 80078ee:	e9cd 0100 	strd	r0, r1, [sp]
 80078f2:	d12e      	bne.n	8007952 <_dtoa_r+0x6a2>
 80078f4:	4602      	mov	r2, r0
 80078f6:	460b      	mov	r3, r1
 80078f8:	f7f8 fcd8 	bl	80002ac <__adddf3>
 80078fc:	4680      	mov	r8, r0
 80078fe:	4689      	mov	r9, r1
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	4630      	mov	r0, r6
 8007906:	4639      	mov	r1, r7
 8007908:	f7f9 f8f4 	bl	8000af4 <__aeabi_dcmplt>
 800790c:	b978      	cbnz	r0, 800792e <_dtoa_r+0x67e>
 800790e:	4642      	mov	r2, r8
 8007910:	464b      	mov	r3, r9
 8007912:	4630      	mov	r0, r6
 8007914:	4639      	mov	r1, r7
 8007916:	f7f9 f8e3 	bl	8000ae0 <__aeabi_dcmpeq>
 800791a:	2800      	cmp	r0, #0
 800791c:	f000 8247 	beq.w	8007dae <_dtoa_r+0xafe>
 8007920:	07e9      	lsls	r1, r5, #31
 8007922:	d404      	bmi.n	800792e <_dtoa_r+0x67e>
 8007924:	e243      	b.n	8007dae <_dtoa_r+0xafe>
 8007926:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800792a:	e000      	b.n	800792e <_dtoa_r+0x67e>
 800792c:	461c      	mov	r4, r3
 800792e:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8007932:	2a39      	cmp	r2, #57	; 0x39
 8007934:	f104 33ff 	add.w	r3, r4, #4294967295
 8007938:	d107      	bne.n	800794a <_dtoa_r+0x69a>
 800793a:	9a04      	ldr	r2, [sp, #16]
 800793c:	429a      	cmp	r2, r3
 800793e:	d1f5      	bne.n	800792c <_dtoa_r+0x67c>
 8007940:	9904      	ldr	r1, [sp, #16]
 8007942:	2230      	movs	r2, #48	; 0x30
 8007944:	f10b 0b01 	add.w	fp, fp, #1
 8007948:	700a      	strb	r2, [r1, #0]
 800794a:	781a      	ldrb	r2, [r3, #0]
 800794c:	3201      	adds	r2, #1
 800794e:	701a      	strb	r2, [r3, #0]
 8007950:	e22d      	b.n	8007dae <_dtoa_r+0xafe>
 8007952:	2200      	movs	r2, #0
 8007954:	4b5a      	ldr	r3, [pc, #360]	; (8007ac0 <_dtoa_r+0x810>)
 8007956:	f7f8 fe5b 	bl	8000610 <__aeabi_dmul>
 800795a:	2200      	movs	r2, #0
 800795c:	2300      	movs	r3, #0
 800795e:	e9cd 0100 	strd	r0, r1, [sp]
 8007962:	f7f9 f8bd 	bl	8000ae0 <__aeabi_dcmpeq>
 8007966:	2800      	cmp	r0, #0
 8007968:	d0a4      	beq.n	80078b4 <_dtoa_r+0x604>
 800796a:	e220      	b.n	8007dae <_dtoa_r+0xafe>
 800796c:	9a08      	ldr	r2, [sp, #32]
 800796e:	2a00      	cmp	r2, #0
 8007970:	d02d      	beq.n	80079ce <_dtoa_r+0x71e>
 8007972:	9a06      	ldr	r2, [sp, #24]
 8007974:	2a01      	cmp	r2, #1
 8007976:	dc0a      	bgt.n	800798e <_dtoa_r+0x6de>
 8007978:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800797a:	b112      	cbz	r2, 8007982 <_dtoa_r+0x6d2>
 800797c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007980:	e002      	b.n	8007988 <_dtoa_r+0x6d8>
 8007982:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007984:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007988:	9d07      	ldr	r5, [sp, #28]
 800798a:	464c      	mov	r4, r9
 800798c:	e015      	b.n	80079ba <_dtoa_r+0x70a>
 800798e:	9b07      	ldr	r3, [sp, #28]
 8007990:	f108 35ff 	add.w	r5, r8, #4294967295
 8007994:	42ab      	cmp	r3, r5
 8007996:	bfbf      	itttt	lt
 8007998:	9b07      	ldrlt	r3, [sp, #28]
 800799a:	9507      	strlt	r5, [sp, #28]
 800799c:	1aea      	sublt	r2, r5, r3
 800799e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80079a0:	bfb7      	itett	lt
 80079a2:	189b      	addlt	r3, r3, r2
 80079a4:	1b5d      	subge	r5, r3, r5
 80079a6:	930c      	strlt	r3, [sp, #48]	; 0x30
 80079a8:	2500      	movlt	r5, #0
 80079aa:	f1b8 0f00 	cmp.w	r8, #0
 80079ae:	bfb9      	ittee	lt
 80079b0:	ebc8 0409 	rsblt	r4, r8, r9
 80079b4:	2300      	movlt	r3, #0
 80079b6:	464c      	movge	r4, r9
 80079b8:	4643      	movge	r3, r8
 80079ba:	9a05      	ldr	r2, [sp, #20]
 80079bc:	2101      	movs	r1, #1
 80079be:	441a      	add	r2, r3
 80079c0:	4650      	mov	r0, sl
 80079c2:	4499      	add	r9, r3
 80079c4:	9205      	str	r2, [sp, #20]
 80079c6:	f001 fac7 	bl	8008f58 <__i2b>
 80079ca:	4606      	mov	r6, r0
 80079cc:	e002      	b.n	80079d4 <_dtoa_r+0x724>
 80079ce:	9d07      	ldr	r5, [sp, #28]
 80079d0:	9e08      	ldr	r6, [sp, #32]
 80079d2:	464c      	mov	r4, r9
 80079d4:	b15c      	cbz	r4, 80079ee <_dtoa_r+0x73e>
 80079d6:	9b05      	ldr	r3, [sp, #20]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	dd08      	ble.n	80079ee <_dtoa_r+0x73e>
 80079dc:	42a3      	cmp	r3, r4
 80079de:	9a05      	ldr	r2, [sp, #20]
 80079e0:	bfa8      	it	ge
 80079e2:	4623      	movge	r3, r4
 80079e4:	ebc3 0909 	rsb	r9, r3, r9
 80079e8:	1ae4      	subs	r4, r4, r3
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	9305      	str	r3, [sp, #20]
 80079ee:	9b07      	ldr	r3, [sp, #28]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	dd1d      	ble.n	8007a30 <_dtoa_r+0x780>
 80079f4:	9b08      	ldr	r3, [sp, #32]
 80079f6:	b1ab      	cbz	r3, 8007a24 <_dtoa_r+0x774>
 80079f8:	b185      	cbz	r5, 8007a1c <_dtoa_r+0x76c>
 80079fa:	4631      	mov	r1, r6
 80079fc:	462a      	mov	r2, r5
 80079fe:	4650      	mov	r0, sl
 8007a00:	f001 fb44 	bl	800908c <__pow5mult>
 8007a04:	9a02      	ldr	r2, [sp, #8]
 8007a06:	4601      	mov	r1, r0
 8007a08:	4606      	mov	r6, r0
 8007a0a:	4650      	mov	r0, sl
 8007a0c:	f001 faad 	bl	8008f6a <__multiply>
 8007a10:	9902      	ldr	r1, [sp, #8]
 8007a12:	4607      	mov	r7, r0
 8007a14:	4650      	mov	r0, sl
 8007a16:	f001 f9c2 	bl	8008d9e <_Bfree>
 8007a1a:	9702      	str	r7, [sp, #8]
 8007a1c:	9b07      	ldr	r3, [sp, #28]
 8007a1e:	1b5a      	subs	r2, r3, r5
 8007a20:	d006      	beq.n	8007a30 <_dtoa_r+0x780>
 8007a22:	e000      	b.n	8007a26 <_dtoa_r+0x776>
 8007a24:	9a07      	ldr	r2, [sp, #28]
 8007a26:	9902      	ldr	r1, [sp, #8]
 8007a28:	4650      	mov	r0, sl
 8007a2a:	f001 fb2f 	bl	800908c <__pow5mult>
 8007a2e:	9002      	str	r0, [sp, #8]
 8007a30:	2101      	movs	r1, #1
 8007a32:	4650      	mov	r0, sl
 8007a34:	f001 fa90 	bl	8008f58 <__i2b>
 8007a38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a3a:	4605      	mov	r5, r0
 8007a3c:	b35b      	cbz	r3, 8007a96 <_dtoa_r+0x7e6>
 8007a3e:	461a      	mov	r2, r3
 8007a40:	4601      	mov	r1, r0
 8007a42:	4650      	mov	r0, sl
 8007a44:	f001 fb22 	bl	800908c <__pow5mult>
 8007a48:	9b06      	ldr	r3, [sp, #24]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	4605      	mov	r5, r0
 8007a4e:	dc18      	bgt.n	8007a82 <_dtoa_r+0x7d2>
 8007a50:	9b00      	ldr	r3, [sp, #0]
 8007a52:	b983      	cbnz	r3, 8007a76 <_dtoa_r+0x7c6>
 8007a54:	9b01      	ldr	r3, [sp, #4]
 8007a56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a5a:	b973      	cbnz	r3, 8007a7a <_dtoa_r+0x7ca>
 8007a5c:	9b01      	ldr	r3, [sp, #4]
 8007a5e:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8007a62:	0d3f      	lsrs	r7, r7, #20
 8007a64:	053f      	lsls	r7, r7, #20
 8007a66:	b14f      	cbz	r7, 8007a7c <_dtoa_r+0x7cc>
 8007a68:	9b05      	ldr	r3, [sp, #20]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	f109 0901 	add.w	r9, r9, #1
 8007a70:	9305      	str	r3, [sp, #20]
 8007a72:	2701      	movs	r7, #1
 8007a74:	e002      	b.n	8007a7c <_dtoa_r+0x7cc>
 8007a76:	2700      	movs	r7, #0
 8007a78:	e000      	b.n	8007a7c <_dtoa_r+0x7cc>
 8007a7a:	9f00      	ldr	r7, [sp, #0]
 8007a7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a7e:	b173      	cbz	r3, 8007a9e <_dtoa_r+0x7ee>
 8007a80:	e000      	b.n	8007a84 <_dtoa_r+0x7d4>
 8007a82:	2700      	movs	r7, #0
 8007a84:	692b      	ldr	r3, [r5, #16]
 8007a86:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007a8a:	6918      	ldr	r0, [r3, #16]
 8007a8c:	f001 fa17 	bl	8008ebe <__hi0bits>
 8007a90:	f1c0 0020 	rsb	r0, r0, #32
 8007a94:	e004      	b.n	8007aa0 <_dtoa_r+0x7f0>
 8007a96:	9b06      	ldr	r3, [sp, #24]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	ddd9      	ble.n	8007a50 <_dtoa_r+0x7a0>
 8007a9c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8007a9e:	2001      	movs	r0, #1
 8007aa0:	9b05      	ldr	r3, [sp, #20]
 8007aa2:	4418      	add	r0, r3
 8007aa4:	f010 001f 	ands.w	r0, r0, #31
 8007aa8:	d00e      	beq.n	8007ac8 <_dtoa_r+0x818>
 8007aaa:	f1c0 0320 	rsb	r3, r0, #32
 8007aae:	2b04      	cmp	r3, #4
 8007ab0:	dd08      	ble.n	8007ac4 <_dtoa_r+0x814>
 8007ab2:	f1c0 001c 	rsb	r0, r0, #28
 8007ab6:	e008      	b.n	8007aca <_dtoa_r+0x81a>
 8007ab8:	0800a1a8 	.word	0x0800a1a8
 8007abc:	40140000 	.word	0x40140000
 8007ac0:	40240000 	.word	0x40240000
 8007ac4:	d006      	beq.n	8007ad4 <_dtoa_r+0x824>
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	301c      	adds	r0, #28
 8007aca:	9b05      	ldr	r3, [sp, #20]
 8007acc:	4403      	add	r3, r0
 8007ace:	4481      	add	r9, r0
 8007ad0:	4404      	add	r4, r0
 8007ad2:	9305      	str	r3, [sp, #20]
 8007ad4:	f1b9 0f00 	cmp.w	r9, #0
 8007ad8:	dd05      	ble.n	8007ae6 <_dtoa_r+0x836>
 8007ada:	464a      	mov	r2, r9
 8007adc:	9902      	ldr	r1, [sp, #8]
 8007ade:	4650      	mov	r0, sl
 8007ae0:	f001 fb22 	bl	8009128 <__lshift>
 8007ae4:	9002      	str	r0, [sp, #8]
 8007ae6:	9b05      	ldr	r3, [sp, #20]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	dd05      	ble.n	8007af8 <_dtoa_r+0x848>
 8007aec:	4629      	mov	r1, r5
 8007aee:	461a      	mov	r2, r3
 8007af0:	4650      	mov	r0, sl
 8007af2:	f001 fb19 	bl	8009128 <__lshift>
 8007af6:	4605      	mov	r5, r0
 8007af8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007afa:	b1eb      	cbz	r3, 8007b38 <_dtoa_r+0x888>
 8007afc:	4629      	mov	r1, r5
 8007afe:	9802      	ldr	r0, [sp, #8]
 8007b00:	f001 fb63 	bl	80091ca <__mcmp>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	da17      	bge.n	8007b38 <_dtoa_r+0x888>
 8007b08:	2300      	movs	r3, #0
 8007b0a:	220a      	movs	r2, #10
 8007b0c:	9902      	ldr	r1, [sp, #8]
 8007b0e:	4650      	mov	r0, sl
 8007b10:	f001 f95c 	bl	8008dcc <__multadd>
 8007b14:	9b08      	ldr	r3, [sp, #32]
 8007b16:	9002      	str	r0, [sp, #8]
 8007b18:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 8158 	beq.w	8007dd2 <_dtoa_r+0xb22>
 8007b22:	2300      	movs	r3, #0
 8007b24:	4631      	mov	r1, r6
 8007b26:	220a      	movs	r2, #10
 8007b28:	4650      	mov	r0, sl
 8007b2a:	f001 f94f 	bl	8008dcc <__multadd>
 8007b2e:	9b03      	ldr	r3, [sp, #12]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	4606      	mov	r6, r0
 8007b34:	dc37      	bgt.n	8007ba6 <_dtoa_r+0x8f6>
 8007b36:	e033      	b.n	8007ba0 <_dtoa_r+0x8f0>
 8007b38:	f1b8 0f00 	cmp.w	r8, #0
 8007b3c:	dc2a      	bgt.n	8007b94 <_dtoa_r+0x8e4>
 8007b3e:	9b06      	ldr	r3, [sp, #24]
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	dd27      	ble.n	8007b94 <_dtoa_r+0x8e4>
 8007b44:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b48:	9b03      	ldr	r3, [sp, #12]
 8007b4a:	b983      	cbnz	r3, 8007b6e <_dtoa_r+0x8be>
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	2205      	movs	r2, #5
 8007b50:	4650      	mov	r0, sl
 8007b52:	f001 f93b 	bl	8008dcc <__multadd>
 8007b56:	4601      	mov	r1, r0
 8007b58:	4605      	mov	r5, r0
 8007b5a:	9802      	ldr	r0, [sp, #8]
 8007b5c:	f001 fb35 	bl	80091ca <__mcmp>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	dc0d      	bgt.n	8007b80 <_dtoa_r+0x8d0>
 8007b64:	e003      	b.n	8007b6e <_dtoa_r+0x8be>
 8007b66:	463d      	mov	r5, r7
 8007b68:	e000      	b.n	8007b6c <_dtoa_r+0x8bc>
 8007b6a:	2500      	movs	r5, #0
 8007b6c:	462e      	mov	r6, r5
 8007b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b70:	9c04      	ldr	r4, [sp, #16]
 8007b72:	ea6f 0b03 	mvn.w	fp, r3
 8007b76:	e00a      	b.n	8007b8e <_dtoa_r+0x8de>
 8007b78:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8007b7c:	463d      	mov	r5, r7
 8007b7e:	463e      	mov	r6, r7
 8007b80:	9b04      	ldr	r3, [sp, #16]
 8007b82:	9a04      	ldr	r2, [sp, #16]
 8007b84:	1c5c      	adds	r4, r3, #1
 8007b86:	2331      	movs	r3, #49	; 0x31
 8007b88:	7013      	strb	r3, [r2, #0]
 8007b8a:	f10b 0b01 	add.w	fp, fp, #1
 8007b8e:	46b0      	mov	r8, r6
 8007b90:	2600      	movs	r6, #0
 8007b92:	e0f7      	b.n	8007d84 <_dtoa_r+0xad4>
 8007b94:	9b08      	ldr	r3, [sp, #32]
 8007b96:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b9a:	b923      	cbnz	r3, 8007ba6 <_dtoa_r+0x8f6>
 8007b9c:	9c04      	ldr	r4, [sp, #16]
 8007b9e:	e0b1      	b.n	8007d04 <_dtoa_r+0xa54>
 8007ba0:	9b06      	ldr	r3, [sp, #24]
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	dcd0      	bgt.n	8007b48 <_dtoa_r+0x898>
 8007ba6:	2c00      	cmp	r4, #0
 8007ba8:	dd05      	ble.n	8007bb6 <_dtoa_r+0x906>
 8007baa:	4631      	mov	r1, r6
 8007bac:	4622      	mov	r2, r4
 8007bae:	4650      	mov	r0, sl
 8007bb0:	f001 faba 	bl	8009128 <__lshift>
 8007bb4:	4606      	mov	r6, r0
 8007bb6:	b19f      	cbz	r7, 8007be0 <_dtoa_r+0x930>
 8007bb8:	6871      	ldr	r1, [r6, #4]
 8007bba:	4650      	mov	r0, sl
 8007bbc:	f001 f8ba 	bl	8008d34 <_Balloc>
 8007bc0:	6932      	ldr	r2, [r6, #16]
 8007bc2:	3202      	adds	r2, #2
 8007bc4:	4604      	mov	r4, r0
 8007bc6:	0092      	lsls	r2, r2, #2
 8007bc8:	f106 010c 	add.w	r1, r6, #12
 8007bcc:	300c      	adds	r0, #12
 8007bce:	f001 f88b 	bl	8008ce8 <memcpy>
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	4650      	mov	r0, sl
 8007bd8:	f001 faa6 	bl	8009128 <__lshift>
 8007bdc:	4680      	mov	r8, r0
 8007bde:	e000      	b.n	8007be2 <_dtoa_r+0x932>
 8007be0:	46b0      	mov	r8, r6
 8007be2:	9b00      	ldr	r3, [sp, #0]
 8007be4:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	9305      	str	r3, [sp, #20]
 8007bee:	4629      	mov	r1, r5
 8007bf0:	9802      	ldr	r0, [sp, #8]
 8007bf2:	f7ff facb 	bl	800718c <quorem>
 8007bf6:	4631      	mov	r1, r6
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8007bfe:	9802      	ldr	r0, [sp, #8]
 8007c00:	f001 fae3 	bl	80091ca <__mcmp>
 8007c04:	4642      	mov	r2, r8
 8007c06:	9000      	str	r0, [sp, #0]
 8007c08:	4629      	mov	r1, r5
 8007c0a:	4650      	mov	r0, sl
 8007c0c:	f001 faf9 	bl	8009202 <__mdiff>
 8007c10:	68c3      	ldr	r3, [r0, #12]
 8007c12:	4602      	mov	r2, r0
 8007c14:	b93b      	cbnz	r3, 8007c26 <_dtoa_r+0x976>
 8007c16:	4601      	mov	r1, r0
 8007c18:	9007      	str	r0, [sp, #28]
 8007c1a:	9802      	ldr	r0, [sp, #8]
 8007c1c:	f001 fad5 	bl	80091ca <__mcmp>
 8007c20:	9a07      	ldr	r2, [sp, #28]
 8007c22:	4603      	mov	r3, r0
 8007c24:	e000      	b.n	8007c28 <_dtoa_r+0x978>
 8007c26:	2301      	movs	r3, #1
 8007c28:	4611      	mov	r1, r2
 8007c2a:	4650      	mov	r0, sl
 8007c2c:	9307      	str	r3, [sp, #28]
 8007c2e:	f001 f8b6 	bl	8008d9e <_Bfree>
 8007c32:	9b07      	ldr	r3, [sp, #28]
 8007c34:	b94b      	cbnz	r3, 8007c4a <_dtoa_r+0x99a>
 8007c36:	9a06      	ldr	r2, [sp, #24]
 8007c38:	b93a      	cbnz	r2, 8007c4a <_dtoa_r+0x99a>
 8007c3a:	9a05      	ldr	r2, [sp, #20]
 8007c3c:	b92a      	cbnz	r2, 8007c4a <_dtoa_r+0x99a>
 8007c3e:	2f39      	cmp	r7, #57	; 0x39
 8007c40:	d028      	beq.n	8007c94 <_dtoa_r+0x9e4>
 8007c42:	9b00      	ldr	r3, [sp, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	dc1a      	bgt.n	8007c7e <_dtoa_r+0x9ce>
 8007c48:	e01b      	b.n	8007c82 <_dtoa_r+0x9d2>
 8007c4a:	9a00      	ldr	r2, [sp, #0]
 8007c4c:	2a00      	cmp	r2, #0
 8007c4e:	db04      	blt.n	8007c5a <_dtoa_r+0x9aa>
 8007c50:	d11a      	bne.n	8007c88 <_dtoa_r+0x9d8>
 8007c52:	9a06      	ldr	r2, [sp, #24]
 8007c54:	b9c2      	cbnz	r2, 8007c88 <_dtoa_r+0x9d8>
 8007c56:	9a05      	ldr	r2, [sp, #20]
 8007c58:	b9b2      	cbnz	r2, 8007c88 <_dtoa_r+0x9d8>
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	dd11      	ble.n	8007c82 <_dtoa_r+0x9d2>
 8007c5e:	2201      	movs	r2, #1
 8007c60:	9902      	ldr	r1, [sp, #8]
 8007c62:	4650      	mov	r0, sl
 8007c64:	f001 fa60 	bl	8009128 <__lshift>
 8007c68:	4629      	mov	r1, r5
 8007c6a:	9002      	str	r0, [sp, #8]
 8007c6c:	f001 faad 	bl	80091ca <__mcmp>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	dc02      	bgt.n	8007c7a <_dtoa_r+0x9ca>
 8007c74:	d105      	bne.n	8007c82 <_dtoa_r+0x9d2>
 8007c76:	07fa      	lsls	r2, r7, #31
 8007c78:	d503      	bpl.n	8007c82 <_dtoa_r+0x9d2>
 8007c7a:	2f39      	cmp	r7, #57	; 0x39
 8007c7c:	d00a      	beq.n	8007c94 <_dtoa_r+0x9e4>
 8007c7e:	f104 0731 	add.w	r7, r4, #49	; 0x31
 8007c82:	f109 0401 	add.w	r4, r9, #1
 8007c86:	e00c      	b.n	8007ca2 <_dtoa_r+0x9f2>
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f109 0401 	add.w	r4, r9, #1
 8007c8e:	dd0b      	ble.n	8007ca8 <_dtoa_r+0x9f8>
 8007c90:	2f39      	cmp	r7, #57	; 0x39
 8007c92:	d105      	bne.n	8007ca0 <_dtoa_r+0x9f0>
 8007c94:	2339      	movs	r3, #57	; 0x39
 8007c96:	f889 3000 	strb.w	r3, [r9]
 8007c9a:	f109 0901 	add.w	r9, r9, #1
 8007c9e:	e054      	b.n	8007d4a <_dtoa_r+0xa9a>
 8007ca0:	3701      	adds	r7, #1
 8007ca2:	f889 7000 	strb.w	r7, [r9]
 8007ca6:	e06d      	b.n	8007d84 <_dtoa_r+0xad4>
 8007ca8:	9b04      	ldr	r3, [sp, #16]
 8007caa:	9a03      	ldr	r2, [sp, #12]
 8007cac:	f804 7c01 	strb.w	r7, [r4, #-1]
 8007cb0:	1ae3      	subs	r3, r4, r3
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	46a1      	mov	r9, r4
 8007cb6:	d03a      	beq.n	8007d2e <_dtoa_r+0xa7e>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	220a      	movs	r2, #10
 8007cbc:	9902      	ldr	r1, [sp, #8]
 8007cbe:	4650      	mov	r0, sl
 8007cc0:	f001 f884 	bl	8008dcc <__multadd>
 8007cc4:	4546      	cmp	r6, r8
 8007cc6:	9002      	str	r0, [sp, #8]
 8007cc8:	f04f 0300 	mov.w	r3, #0
 8007ccc:	f04f 020a 	mov.w	r2, #10
 8007cd0:	4631      	mov	r1, r6
 8007cd2:	4650      	mov	r0, sl
 8007cd4:	d104      	bne.n	8007ce0 <_dtoa_r+0xa30>
 8007cd6:	f001 f879 	bl	8008dcc <__multadd>
 8007cda:	4606      	mov	r6, r0
 8007cdc:	4680      	mov	r8, r0
 8007cde:	e786      	b.n	8007bee <_dtoa_r+0x93e>
 8007ce0:	f001 f874 	bl	8008dcc <__multadd>
 8007ce4:	4641      	mov	r1, r8
 8007ce6:	4606      	mov	r6, r0
 8007ce8:	2300      	movs	r3, #0
 8007cea:	220a      	movs	r2, #10
 8007cec:	4650      	mov	r0, sl
 8007cee:	f001 f86d 	bl	8008dcc <__multadd>
 8007cf2:	4680      	mov	r8, r0
 8007cf4:	e77b      	b.n	8007bee <_dtoa_r+0x93e>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	220a      	movs	r2, #10
 8007cfa:	9902      	ldr	r1, [sp, #8]
 8007cfc:	4650      	mov	r0, sl
 8007cfe:	f001 f865 	bl	8008dcc <__multadd>
 8007d02:	9002      	str	r0, [sp, #8]
 8007d04:	4629      	mov	r1, r5
 8007d06:	9802      	ldr	r0, [sp, #8]
 8007d08:	f7ff fa40 	bl	800718c <quorem>
 8007d0c:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8007d10:	f804 7b01 	strb.w	r7, [r4], #1
 8007d14:	9b04      	ldr	r3, [sp, #16]
 8007d16:	9a03      	ldr	r2, [sp, #12]
 8007d18:	1ae3      	subs	r3, r4, r3
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	dbeb      	blt.n	8007cf6 <_dtoa_r+0xa46>
 8007d1e:	9b04      	ldr	r3, [sp, #16]
 8007d20:	2a01      	cmp	r2, #1
 8007d22:	bfac      	ite	ge
 8007d24:	189b      	addge	r3, r3, r2
 8007d26:	3301      	addlt	r3, #1
 8007d28:	46b0      	mov	r8, r6
 8007d2a:	4699      	mov	r9, r3
 8007d2c:	2600      	movs	r6, #0
 8007d2e:	2201      	movs	r2, #1
 8007d30:	9902      	ldr	r1, [sp, #8]
 8007d32:	4650      	mov	r0, sl
 8007d34:	f001 f9f8 	bl	8009128 <__lshift>
 8007d38:	4629      	mov	r1, r5
 8007d3a:	9002      	str	r0, [sp, #8]
 8007d3c:	f001 fa45 	bl	80091ca <__mcmp>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	dc02      	bgt.n	8007d4a <_dtoa_r+0xa9a>
 8007d44:	d115      	bne.n	8007d72 <_dtoa_r+0xac2>
 8007d46:	07fb      	lsls	r3, r7, #31
 8007d48:	d513      	bpl.n	8007d72 <_dtoa_r+0xac2>
 8007d4a:	464c      	mov	r4, r9
 8007d4c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8007d50:	2b39      	cmp	r3, #57	; 0x39
 8007d52:	f104 32ff 	add.w	r2, r4, #4294967295
 8007d56:	d109      	bne.n	8007d6c <_dtoa_r+0xabc>
 8007d58:	9b04      	ldr	r3, [sp, #16]
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d104      	bne.n	8007d68 <_dtoa_r+0xab8>
 8007d5e:	f10b 0b01 	add.w	fp, fp, #1
 8007d62:	2331      	movs	r3, #49	; 0x31
 8007d64:	9a04      	ldr	r2, [sp, #16]
 8007d66:	e002      	b.n	8007d6e <_dtoa_r+0xabe>
 8007d68:	4614      	mov	r4, r2
 8007d6a:	e7ef      	b.n	8007d4c <_dtoa_r+0xa9c>
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	7013      	strb	r3, [r2, #0]
 8007d70:	e008      	b.n	8007d84 <_dtoa_r+0xad4>
 8007d72:	464c      	mov	r4, r9
 8007d74:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8007d78:	2b30      	cmp	r3, #48	; 0x30
 8007d7a:	f104 32ff 	add.w	r2, r4, #4294967295
 8007d7e:	d101      	bne.n	8007d84 <_dtoa_r+0xad4>
 8007d80:	4614      	mov	r4, r2
 8007d82:	e7f7      	b.n	8007d74 <_dtoa_r+0xac4>
 8007d84:	4629      	mov	r1, r5
 8007d86:	4650      	mov	r0, sl
 8007d88:	f001 f809 	bl	8008d9e <_Bfree>
 8007d8c:	f1b8 0f00 	cmp.w	r8, #0
 8007d90:	d00d      	beq.n	8007dae <_dtoa_r+0xafe>
 8007d92:	b12e      	cbz	r6, 8007da0 <_dtoa_r+0xaf0>
 8007d94:	4546      	cmp	r6, r8
 8007d96:	d003      	beq.n	8007da0 <_dtoa_r+0xaf0>
 8007d98:	4631      	mov	r1, r6
 8007d9a:	4650      	mov	r0, sl
 8007d9c:	f000 ffff 	bl	8008d9e <_Bfree>
 8007da0:	4641      	mov	r1, r8
 8007da2:	4650      	mov	r0, sl
 8007da4:	f000 fffb 	bl	8008d9e <_Bfree>
 8007da8:	e001      	b.n	8007dae <_dtoa_r+0xafe>
 8007daa:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8007dae:	9902      	ldr	r1, [sp, #8]
 8007db0:	4650      	mov	r0, sl
 8007db2:	f000 fff4 	bl	8008d9e <_Bfree>
 8007db6:	2300      	movs	r3, #0
 8007db8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007dba:	7023      	strb	r3, [r4, #0]
 8007dbc:	f10b 0301 	add.w	r3, fp, #1
 8007dc0:	6013      	str	r3, [r2, #0]
 8007dc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dc4:	b11b      	cbz	r3, 8007dce <_dtoa_r+0xb1e>
 8007dc6:	601c      	str	r4, [r3, #0]
 8007dc8:	e001      	b.n	8007dce <_dtoa_r+0xb1e>
 8007dca:	4808      	ldr	r0, [pc, #32]	; (8007dec <_dtoa_r+0xb3c>)
 8007dcc:	e00a      	b.n	8007de4 <_dtoa_r+0xb34>
 8007dce:	9804      	ldr	r0, [sp, #16]
 8007dd0:	e008      	b.n	8007de4 <_dtoa_r+0xb34>
 8007dd2:	9b03      	ldr	r3, [sp, #12]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f73f aee1 	bgt.w	8007b9c <_dtoa_r+0x8ec>
 8007dda:	9b06      	ldr	r3, [sp, #24]
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	f77f aedd 	ble.w	8007b9c <_dtoa_r+0x8ec>
 8007de2:	e6b1      	b.n	8007b48 <_dtoa_r+0x898>
 8007de4:	b017      	add	sp, #92	; 0x5c
 8007de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dea:	bf00      	nop
 8007dec:	08009ff2 	.word	0x08009ff2

08007df0 <__sflush_r>:
 8007df0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007df4:	b293      	uxth	r3, r2
 8007df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dfa:	4605      	mov	r5, r0
 8007dfc:	0718      	lsls	r0, r3, #28
 8007dfe:	460c      	mov	r4, r1
 8007e00:	d460      	bmi.n	8007ec4 <__sflush_r+0xd4>
 8007e02:	684b      	ldr	r3, [r1, #4]
 8007e04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	818a      	strh	r2, [r1, #12]
 8007e0c:	dc02      	bgt.n	8007e14 <__sflush_r+0x24>
 8007e0e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	dd17      	ble.n	8007e44 <__sflush_r+0x54>
 8007e14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e16:	b1ae      	cbz	r6, 8007e44 <__sflush_r+0x54>
 8007e18:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	b292      	uxth	r2, r2
 8007e20:	682f      	ldr	r7, [r5, #0]
 8007e22:	602b      	str	r3, [r5, #0]
 8007e24:	b10a      	cbz	r2, 8007e2a <__sflush_r+0x3a>
 8007e26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e28:	e015      	b.n	8007e56 <__sflush_r+0x66>
 8007e2a:	6a21      	ldr	r1, [r4, #32]
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	4628      	mov	r0, r5
 8007e30:	47b0      	blx	r6
 8007e32:	1c41      	adds	r1, r0, #1
 8007e34:	d10f      	bne.n	8007e56 <__sflush_r+0x66>
 8007e36:	682b      	ldr	r3, [r5, #0]
 8007e38:	b16b      	cbz	r3, 8007e56 <__sflush_r+0x66>
 8007e3a:	2b1d      	cmp	r3, #29
 8007e3c:	d001      	beq.n	8007e42 <__sflush_r+0x52>
 8007e3e:	2b16      	cmp	r3, #22
 8007e40:	d103      	bne.n	8007e4a <__sflush_r+0x5a>
 8007e42:	602f      	str	r7, [r5, #0]
 8007e44:	2000      	movs	r0, #0
 8007e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e4a:	89a3      	ldrh	r3, [r4, #12]
 8007e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e50:	81a3      	strh	r3, [r4, #12]
 8007e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e56:	89a3      	ldrh	r3, [r4, #12]
 8007e58:	075a      	lsls	r2, r3, #29
 8007e5a:	d505      	bpl.n	8007e68 <__sflush_r+0x78>
 8007e5c:	6863      	ldr	r3, [r4, #4]
 8007e5e:	1ac0      	subs	r0, r0, r3
 8007e60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e62:	b10b      	cbz	r3, 8007e68 <__sflush_r+0x78>
 8007e64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e66:	1ac0      	subs	r0, r0, r3
 8007e68:	2300      	movs	r3, #0
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e6e:	6a21      	ldr	r1, [r4, #32]
 8007e70:	4628      	mov	r0, r5
 8007e72:	47b0      	blx	r6
 8007e74:	1c43      	adds	r3, r0, #1
 8007e76:	89a3      	ldrh	r3, [r4, #12]
 8007e78:	d106      	bne.n	8007e88 <__sflush_r+0x98>
 8007e7a:	6829      	ldr	r1, [r5, #0]
 8007e7c:	291d      	cmp	r1, #29
 8007e7e:	d83e      	bhi.n	8007efe <__sflush_r+0x10e>
 8007e80:	4a22      	ldr	r2, [pc, #136]	; (8007f0c <__sflush_r+0x11c>)
 8007e82:	40ca      	lsrs	r2, r1
 8007e84:	07d6      	lsls	r6, r2, #31
 8007e86:	d53a      	bpl.n	8007efe <__sflush_r+0x10e>
 8007e88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e8c:	b21b      	sxth	r3, r3
 8007e8e:	2200      	movs	r2, #0
 8007e90:	6062      	str	r2, [r4, #4]
 8007e92:	04d9      	lsls	r1, r3, #19
 8007e94:	6922      	ldr	r2, [r4, #16]
 8007e96:	81a3      	strh	r3, [r4, #12]
 8007e98:	6022      	str	r2, [r4, #0]
 8007e9a:	d504      	bpl.n	8007ea6 <__sflush_r+0xb6>
 8007e9c:	1c42      	adds	r2, r0, #1
 8007e9e:	d101      	bne.n	8007ea4 <__sflush_r+0xb4>
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	b903      	cbnz	r3, 8007ea6 <__sflush_r+0xb6>
 8007ea4:	6560      	str	r0, [r4, #84]	; 0x54
 8007ea6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ea8:	602f      	str	r7, [r5, #0]
 8007eaa:	2900      	cmp	r1, #0
 8007eac:	d0ca      	beq.n	8007e44 <__sflush_r+0x54>
 8007eae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007eb2:	4299      	cmp	r1, r3
 8007eb4:	d002      	beq.n	8007ebc <__sflush_r+0xcc>
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	f000 f95c 	bl	8008174 <_free_r>
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	6360      	str	r0, [r4, #52]	; 0x34
 8007ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ec4:	690f      	ldr	r7, [r1, #16]
 8007ec6:	2f00      	cmp	r7, #0
 8007ec8:	d0bc      	beq.n	8007e44 <__sflush_r+0x54>
 8007eca:	079b      	lsls	r3, r3, #30
 8007ecc:	680e      	ldr	r6, [r1, #0]
 8007ece:	bf08      	it	eq
 8007ed0:	694b      	ldreq	r3, [r1, #20]
 8007ed2:	600f      	str	r7, [r1, #0]
 8007ed4:	bf18      	it	ne
 8007ed6:	2300      	movne	r3, #0
 8007ed8:	ebc7 0806 	rsb	r8, r7, r6
 8007edc:	608b      	str	r3, [r1, #8]
 8007ede:	e002      	b.n	8007ee6 <__sflush_r+0xf6>
 8007ee0:	4407      	add	r7, r0
 8007ee2:	ebc0 0808 	rsb	r8, r0, r8
 8007ee6:	f1b8 0f00 	cmp.w	r8, #0
 8007eea:	ddab      	ble.n	8007e44 <__sflush_r+0x54>
 8007eec:	4643      	mov	r3, r8
 8007eee:	463a      	mov	r2, r7
 8007ef0:	6a21      	ldr	r1, [r4, #32]
 8007ef2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	47b0      	blx	r6
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	dcf1      	bgt.n	8007ee0 <__sflush_r+0xf0>
 8007efc:	89a3      	ldrh	r3, [r4, #12]
 8007efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f02:	81a3      	strh	r3, [r4, #12]
 8007f04:	f04f 30ff 	mov.w	r0, #4294967295
 8007f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f0c:	20400001 	.word	0x20400001

08007f10 <_fflush_r>:
 8007f10:	b538      	push	{r3, r4, r5, lr}
 8007f12:	690b      	ldr	r3, [r1, #16]
 8007f14:	4605      	mov	r5, r0
 8007f16:	460c      	mov	r4, r1
 8007f18:	b1db      	cbz	r3, 8007f52 <_fflush_r+0x42>
 8007f1a:	b118      	cbz	r0, 8007f24 <_fflush_r+0x14>
 8007f1c:	6983      	ldr	r3, [r0, #24]
 8007f1e:	b90b      	cbnz	r3, 8007f24 <_fflush_r+0x14>
 8007f20:	f000 f860 	bl	8007fe4 <__sinit>
 8007f24:	4b0c      	ldr	r3, [pc, #48]	; (8007f58 <_fflush_r+0x48>)
 8007f26:	429c      	cmp	r4, r3
 8007f28:	d101      	bne.n	8007f2e <_fflush_r+0x1e>
 8007f2a:	686c      	ldr	r4, [r5, #4]
 8007f2c:	e008      	b.n	8007f40 <_fflush_r+0x30>
 8007f2e:	4b0b      	ldr	r3, [pc, #44]	; (8007f5c <_fflush_r+0x4c>)
 8007f30:	429c      	cmp	r4, r3
 8007f32:	d101      	bne.n	8007f38 <_fflush_r+0x28>
 8007f34:	68ac      	ldr	r4, [r5, #8]
 8007f36:	e003      	b.n	8007f40 <_fflush_r+0x30>
 8007f38:	4b09      	ldr	r3, [pc, #36]	; (8007f60 <_fflush_r+0x50>)
 8007f3a:	429c      	cmp	r4, r3
 8007f3c:	bf08      	it	eq
 8007f3e:	68ec      	ldreq	r4, [r5, #12]
 8007f40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f44:	b12b      	cbz	r3, 8007f52 <_fflush_r+0x42>
 8007f46:	4621      	mov	r1, r4
 8007f48:	4628      	mov	r0, r5
 8007f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f4e:	f7ff bf4f 	b.w	8007df0 <__sflush_r>
 8007f52:	2000      	movs	r0, #0
 8007f54:	bd38      	pop	{r3, r4, r5, pc}
 8007f56:	bf00      	nop
 8007f58:	0800a134 	.word	0x0800a134
 8007f5c:	0800a154 	.word	0x0800a154
 8007f60:	0800a174 	.word	0x0800a174

08007f64 <_cleanup_r>:
 8007f64:	4901      	ldr	r1, [pc, #4]	; (8007f6c <_cleanup_r+0x8>)
 8007f66:	f000 bb0d 	b.w	8008584 <_fwalk_reent>
 8007f6a:	bf00      	nop
 8007f6c:	08009b19 	.word	0x08009b19

08007f70 <std.isra.0>:
 8007f70:	2300      	movs	r3, #0
 8007f72:	b510      	push	{r4, lr}
 8007f74:	4604      	mov	r4, r0
 8007f76:	6003      	str	r3, [r0, #0]
 8007f78:	6043      	str	r3, [r0, #4]
 8007f7a:	6083      	str	r3, [r0, #8]
 8007f7c:	8181      	strh	r1, [r0, #12]
 8007f7e:	6643      	str	r3, [r0, #100]	; 0x64
 8007f80:	81c2      	strh	r2, [r0, #14]
 8007f82:	6103      	str	r3, [r0, #16]
 8007f84:	6143      	str	r3, [r0, #20]
 8007f86:	6183      	str	r3, [r0, #24]
 8007f88:	4619      	mov	r1, r3
 8007f8a:	2208      	movs	r2, #8
 8007f8c:	305c      	adds	r0, #92	; 0x5c
 8007f8e:	f7fc f81d 	bl	8003fcc <memset>
 8007f92:	4b05      	ldr	r3, [pc, #20]	; (8007fa8 <std.isra.0+0x38>)
 8007f94:	6263      	str	r3, [r4, #36]	; 0x24
 8007f96:	4b05      	ldr	r3, [pc, #20]	; (8007fac <std.isra.0+0x3c>)
 8007f98:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f9a:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <std.isra.0+0x40>)
 8007f9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f9e:	4b05      	ldr	r3, [pc, #20]	; (8007fb4 <std.isra.0+0x44>)
 8007fa0:	6224      	str	r4, [r4, #32]
 8007fa2:	6323      	str	r3, [r4, #48]	; 0x30
 8007fa4:	bd10      	pop	{r4, pc}
 8007fa6:	bf00      	nop
 8007fa8:	08009865 	.word	0x08009865
 8007fac:	08009887 	.word	0x08009887
 8007fb0:	080098bf 	.word	0x080098bf
 8007fb4:	080098e3 	.word	0x080098e3

08007fb8 <__sfmoreglue>:
 8007fb8:	b570      	push	{r4, r5, r6, lr}
 8007fba:	2368      	movs	r3, #104	; 0x68
 8007fbc:	1e4d      	subs	r5, r1, #1
 8007fbe:	435d      	muls	r5, r3
 8007fc0:	460e      	mov	r6, r1
 8007fc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007fc6:	f7fb fde1 	bl	8003b8c <_malloc_r>
 8007fca:	4604      	mov	r4, r0
 8007fcc:	b140      	cbz	r0, 8007fe0 <__sfmoreglue+0x28>
 8007fce:	2100      	movs	r1, #0
 8007fd0:	e880 0042 	stmia.w	r0, {r1, r6}
 8007fd4:	300c      	adds	r0, #12
 8007fd6:	60a0      	str	r0, [r4, #8]
 8007fd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007fdc:	f7fb fff6 	bl	8003fcc <memset>
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	bd70      	pop	{r4, r5, r6, pc}

08007fe4 <__sinit>:
 8007fe4:	6983      	ldr	r3, [r0, #24]
 8007fe6:	b510      	push	{r4, lr}
 8007fe8:	4604      	mov	r4, r0
 8007fea:	bb4b      	cbnz	r3, 8008040 <__sinit+0x5c>
 8007fec:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 8007ff0:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
 8007ff4:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 8007ff8:	4b12      	ldr	r3, [pc, #72]	; (8008044 <__sinit+0x60>)
 8007ffa:	4a13      	ldr	r2, [pc, #76]	; (8008048 <__sinit+0x64>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6282      	str	r2, [r0, #40]	; 0x28
 8008000:	4298      	cmp	r0, r3
 8008002:	bf04      	itt	eq
 8008004:	2301      	moveq	r3, #1
 8008006:	6183      	streq	r3, [r0, #24]
 8008008:	f000 f820 	bl	800804c <__sfp>
 800800c:	6060      	str	r0, [r4, #4]
 800800e:	4620      	mov	r0, r4
 8008010:	f000 f81c 	bl	800804c <__sfp>
 8008014:	60a0      	str	r0, [r4, #8]
 8008016:	4620      	mov	r0, r4
 8008018:	f000 f818 	bl	800804c <__sfp>
 800801c:	2200      	movs	r2, #0
 800801e:	60e0      	str	r0, [r4, #12]
 8008020:	2104      	movs	r1, #4
 8008022:	6860      	ldr	r0, [r4, #4]
 8008024:	f7ff ffa4 	bl	8007f70 <std.isra.0>
 8008028:	2201      	movs	r2, #1
 800802a:	2109      	movs	r1, #9
 800802c:	68a0      	ldr	r0, [r4, #8]
 800802e:	f7ff ff9f 	bl	8007f70 <std.isra.0>
 8008032:	2202      	movs	r2, #2
 8008034:	2112      	movs	r1, #18
 8008036:	68e0      	ldr	r0, [r4, #12]
 8008038:	f7ff ff9a 	bl	8007f70 <std.isra.0>
 800803c:	2301      	movs	r3, #1
 800803e:	61a3      	str	r3, [r4, #24]
 8008040:	bd10      	pop	{r4, pc}
 8008042:	bf00      	nop
 8008044:	0800a198 	.word	0x0800a198
 8008048:	08007f65 	.word	0x08007f65

0800804c <__sfp>:
 800804c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804e:	4b1c      	ldr	r3, [pc, #112]	; (80080c0 <__sfp+0x74>)
 8008050:	681e      	ldr	r6, [r3, #0]
 8008052:	69b3      	ldr	r3, [r6, #24]
 8008054:	4607      	mov	r7, r0
 8008056:	b913      	cbnz	r3, 800805e <__sfp+0x12>
 8008058:	4630      	mov	r0, r6
 800805a:	f7ff ffc3 	bl	8007fe4 <__sinit>
 800805e:	36d8      	adds	r6, #216	; 0xd8
 8008060:	68b4      	ldr	r4, [r6, #8]
 8008062:	6873      	ldr	r3, [r6, #4]
 8008064:	3b01      	subs	r3, #1
 8008066:	d404      	bmi.n	8008072 <__sfp+0x26>
 8008068:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800806c:	b17d      	cbz	r5, 800808e <__sfp+0x42>
 800806e:	3468      	adds	r4, #104	; 0x68
 8008070:	e7f8      	b.n	8008064 <__sfp+0x18>
 8008072:	6833      	ldr	r3, [r6, #0]
 8008074:	b10b      	cbz	r3, 800807a <__sfp+0x2e>
 8008076:	6836      	ldr	r6, [r6, #0]
 8008078:	e7f2      	b.n	8008060 <__sfp+0x14>
 800807a:	2104      	movs	r1, #4
 800807c:	4638      	mov	r0, r7
 800807e:	f7ff ff9b 	bl	8007fb8 <__sfmoreglue>
 8008082:	6030      	str	r0, [r6, #0]
 8008084:	2800      	cmp	r0, #0
 8008086:	d1f6      	bne.n	8008076 <__sfp+0x2a>
 8008088:	230c      	movs	r3, #12
 800808a:	603b      	str	r3, [r7, #0]
 800808c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800808e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008092:	81e3      	strh	r3, [r4, #14]
 8008094:	2301      	movs	r3, #1
 8008096:	81a3      	strh	r3, [r4, #12]
 8008098:	6665      	str	r5, [r4, #100]	; 0x64
 800809a:	6025      	str	r5, [r4, #0]
 800809c:	60a5      	str	r5, [r4, #8]
 800809e:	6065      	str	r5, [r4, #4]
 80080a0:	6125      	str	r5, [r4, #16]
 80080a2:	6165      	str	r5, [r4, #20]
 80080a4:	61a5      	str	r5, [r4, #24]
 80080a6:	2208      	movs	r2, #8
 80080a8:	4629      	mov	r1, r5
 80080aa:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80080ae:	f7fb ff8d 	bl	8003fcc <memset>
 80080b2:	6365      	str	r5, [r4, #52]	; 0x34
 80080b4:	63a5      	str	r5, [r4, #56]	; 0x38
 80080b6:	64a5      	str	r5, [r4, #72]	; 0x48
 80080b8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80080ba:	4620      	mov	r0, r4
 80080bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080be:	bf00      	nop
 80080c0:	0800a198 	.word	0x0800a198

080080c4 <__sfp_lock_acquire>:
 80080c4:	4770      	bx	lr

080080c6 <__sfp_lock_release>:
 80080c6:	4770      	bx	lr

080080c8 <_malloc_trim_r>:
 80080c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080cc:	4f25      	ldr	r7, [pc, #148]	; (8008164 <_malloc_trim_r+0x9c>)
 80080ce:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8008170 <_malloc_trim_r+0xa8>
 80080d2:	4689      	mov	r9, r1
 80080d4:	4606      	mov	r6, r0
 80080d6:	f7fb ff81 	bl	8003fdc <__malloc_lock>
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	685d      	ldr	r5, [r3, #4]
 80080de:	f1a8 0411 	sub.w	r4, r8, #17
 80080e2:	f025 0503 	bic.w	r5, r5, #3
 80080e6:	442c      	add	r4, r5
 80080e8:	ebc9 0404 	rsb	r4, r9, r4
 80080ec:	fbb4 f4f8 	udiv	r4, r4, r8
 80080f0:	3c01      	subs	r4, #1
 80080f2:	fb08 f404 	mul.w	r4, r8, r4
 80080f6:	4544      	cmp	r4, r8
 80080f8:	da05      	bge.n	8008106 <_malloc_trim_r+0x3e>
 80080fa:	4630      	mov	r0, r6
 80080fc:	f7fb ff6f 	bl	8003fde <__malloc_unlock>
 8008100:	2000      	movs	r0, #0
 8008102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008106:	2100      	movs	r1, #0
 8008108:	4630      	mov	r0, r6
 800810a:	f7fb ffd5 	bl	80040b8 <_sbrk_r>
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	442b      	add	r3, r5
 8008112:	4298      	cmp	r0, r3
 8008114:	d1f1      	bne.n	80080fa <_malloc_trim_r+0x32>
 8008116:	4261      	negs	r1, r4
 8008118:	4630      	mov	r0, r6
 800811a:	f7fb ffcd 	bl	80040b8 <_sbrk_r>
 800811e:	3001      	adds	r0, #1
 8008120:	d110      	bne.n	8008144 <_malloc_trim_r+0x7c>
 8008122:	2100      	movs	r1, #0
 8008124:	4630      	mov	r0, r6
 8008126:	f7fb ffc7 	bl	80040b8 <_sbrk_r>
 800812a:	68ba      	ldr	r2, [r7, #8]
 800812c:	1a83      	subs	r3, r0, r2
 800812e:	2b0f      	cmp	r3, #15
 8008130:	dde3      	ble.n	80080fa <_malloc_trim_r+0x32>
 8008132:	490d      	ldr	r1, [pc, #52]	; (8008168 <_malloc_trim_r+0xa0>)
 8008134:	6809      	ldr	r1, [r1, #0]
 8008136:	1a40      	subs	r0, r0, r1
 8008138:	490c      	ldr	r1, [pc, #48]	; (800816c <_malloc_trim_r+0xa4>)
 800813a:	f043 0301 	orr.w	r3, r3, #1
 800813e:	6008      	str	r0, [r1, #0]
 8008140:	6053      	str	r3, [r2, #4]
 8008142:	e7da      	b.n	80080fa <_malloc_trim_r+0x32>
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	4a09      	ldr	r2, [pc, #36]	; (800816c <_malloc_trim_r+0xa4>)
 8008148:	1b2d      	subs	r5, r5, r4
 800814a:	f045 0501 	orr.w	r5, r5, #1
 800814e:	605d      	str	r5, [r3, #4]
 8008150:	6813      	ldr	r3, [r2, #0]
 8008152:	4630      	mov	r0, r6
 8008154:	1b1c      	subs	r4, r3, r4
 8008156:	6014      	str	r4, [r2, #0]
 8008158:	f7fb ff41 	bl	8003fde <__malloc_unlock>
 800815c:	2001      	movs	r0, #1
 800815e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008162:	bf00      	nop
 8008164:	20000004 	.word	0x20000004
 8008168:	20000410 	.word	0x20000410
 800816c:	2000069c 	.word	0x2000069c
 8008170:	00000080 	.word	0x00000080

08008174 <_free_r>:
 8008174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008178:	4604      	mov	r4, r0
 800817a:	4688      	mov	r8, r1
 800817c:	2900      	cmp	r1, #0
 800817e:	f000 80ad 	beq.w	80082dc <_free_r+0x168>
 8008182:	f7fb ff2b 	bl	8003fdc <__malloc_lock>
 8008186:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800818a:	4d55      	ldr	r5, [pc, #340]	; (80082e0 <_free_r+0x16c>)
 800818c:	f022 0001 	bic.w	r0, r2, #1
 8008190:	f1a8 0308 	sub.w	r3, r8, #8
 8008194:	181f      	adds	r7, r3, r0
 8008196:	68a9      	ldr	r1, [r5, #8]
 8008198:	687e      	ldr	r6, [r7, #4]
 800819a:	428f      	cmp	r7, r1
 800819c:	f026 0603 	bic.w	r6, r6, #3
 80081a0:	f002 0201 	and.w	r2, r2, #1
 80081a4:	d11b      	bne.n	80081de <_free_r+0x6a>
 80081a6:	4430      	add	r0, r6
 80081a8:	b93a      	cbnz	r2, 80081ba <_free_r+0x46>
 80081aa:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80081ae:	1a9b      	subs	r3, r3, r2
 80081b0:	4410      	add	r0, r2
 80081b2:	6899      	ldr	r1, [r3, #8]
 80081b4:	68da      	ldr	r2, [r3, #12]
 80081b6:	60ca      	str	r2, [r1, #12]
 80081b8:	6091      	str	r1, [r2, #8]
 80081ba:	f040 0201 	orr.w	r2, r0, #1
 80081be:	605a      	str	r2, [r3, #4]
 80081c0:	60ab      	str	r3, [r5, #8]
 80081c2:	4b48      	ldr	r3, [pc, #288]	; (80082e4 <_free_r+0x170>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4298      	cmp	r0, r3
 80081c8:	d304      	bcc.n	80081d4 <_free_r+0x60>
 80081ca:	4b47      	ldr	r3, [pc, #284]	; (80082e8 <_free_r+0x174>)
 80081cc:	4620      	mov	r0, r4
 80081ce:	6819      	ldr	r1, [r3, #0]
 80081d0:	f7ff ff7a 	bl	80080c8 <_malloc_trim_r>
 80081d4:	4620      	mov	r0, r4
 80081d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081da:	f7fb bf00 	b.w	8003fde <__malloc_unlock>
 80081de:	607e      	str	r6, [r7, #4]
 80081e0:	b97a      	cbnz	r2, 8008202 <_free_r+0x8e>
 80081e2:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80081e6:	1a5b      	subs	r3, r3, r1
 80081e8:	4408      	add	r0, r1
 80081ea:	6899      	ldr	r1, [r3, #8]
 80081ec:	f105 0e08 	add.w	lr, r5, #8
 80081f0:	4571      	cmp	r1, lr
 80081f2:	d008      	beq.n	8008206 <_free_r+0x92>
 80081f4:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80081f8:	f8c1 e00c 	str.w	lr, [r1, #12]
 80081fc:	f8ce 1008 	str.w	r1, [lr, #8]
 8008200:	e002      	b.n	8008208 <_free_r+0x94>
 8008202:	2200      	movs	r2, #0
 8008204:	e000      	b.n	8008208 <_free_r+0x94>
 8008206:	2201      	movs	r2, #1
 8008208:	19b9      	adds	r1, r7, r6
 800820a:	6849      	ldr	r1, [r1, #4]
 800820c:	07c9      	lsls	r1, r1, #31
 800820e:	d40e      	bmi.n	800822e <_free_r+0xba>
 8008210:	4430      	add	r0, r6
 8008212:	68b9      	ldr	r1, [r7, #8]
 8008214:	b942      	cbnz	r2, 8008228 <_free_r+0xb4>
 8008216:	4e35      	ldr	r6, [pc, #212]	; (80082ec <_free_r+0x178>)
 8008218:	42b1      	cmp	r1, r6
 800821a:	d105      	bne.n	8008228 <_free_r+0xb4>
 800821c:	616b      	str	r3, [r5, #20]
 800821e:	612b      	str	r3, [r5, #16]
 8008220:	2201      	movs	r2, #1
 8008222:	60d9      	str	r1, [r3, #12]
 8008224:	6099      	str	r1, [r3, #8]
 8008226:	e002      	b.n	800822e <_free_r+0xba>
 8008228:	68fe      	ldr	r6, [r7, #12]
 800822a:	60ce      	str	r6, [r1, #12]
 800822c:	60b1      	str	r1, [r6, #8]
 800822e:	f040 0101 	orr.w	r1, r0, #1
 8008232:	6059      	str	r1, [r3, #4]
 8008234:	5018      	str	r0, [r3, r0]
 8008236:	2a00      	cmp	r2, #0
 8008238:	d1cc      	bne.n	80081d4 <_free_r+0x60>
 800823a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800823e:	d212      	bcs.n	8008266 <_free_r+0xf2>
 8008240:	08c0      	lsrs	r0, r0, #3
 8008242:	1081      	asrs	r1, r0, #2
 8008244:	2201      	movs	r2, #1
 8008246:	fa02 f101 	lsl.w	r1, r2, r1
 800824a:	686a      	ldr	r2, [r5, #4]
 800824c:	3001      	adds	r0, #1
 800824e:	430a      	orrs	r2, r1
 8008250:	606a      	str	r2, [r5, #4]
 8008252:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8008256:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800825a:	6099      	str	r1, [r3, #8]
 800825c:	3a08      	subs	r2, #8
 800825e:	60da      	str	r2, [r3, #12]
 8008260:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8008264:	e038      	b.n	80082d8 <_free_r+0x164>
 8008266:	0a42      	lsrs	r2, r0, #9
 8008268:	2a04      	cmp	r2, #4
 800826a:	d802      	bhi.n	8008272 <_free_r+0xfe>
 800826c:	0982      	lsrs	r2, r0, #6
 800826e:	3238      	adds	r2, #56	; 0x38
 8008270:	e015      	b.n	800829e <_free_r+0x12a>
 8008272:	2a14      	cmp	r2, #20
 8008274:	d801      	bhi.n	800827a <_free_r+0x106>
 8008276:	325b      	adds	r2, #91	; 0x5b
 8008278:	e011      	b.n	800829e <_free_r+0x12a>
 800827a:	2a54      	cmp	r2, #84	; 0x54
 800827c:	d802      	bhi.n	8008284 <_free_r+0x110>
 800827e:	0b02      	lsrs	r2, r0, #12
 8008280:	326e      	adds	r2, #110	; 0x6e
 8008282:	e00c      	b.n	800829e <_free_r+0x12a>
 8008284:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008288:	d802      	bhi.n	8008290 <_free_r+0x11c>
 800828a:	0bc2      	lsrs	r2, r0, #15
 800828c:	3277      	adds	r2, #119	; 0x77
 800828e:	e006      	b.n	800829e <_free_r+0x12a>
 8008290:	f240 5154 	movw	r1, #1364	; 0x554
 8008294:	428a      	cmp	r2, r1
 8008296:	bf9a      	itte	ls
 8008298:	0c82      	lsrls	r2, r0, #18
 800829a:	327c      	addls	r2, #124	; 0x7c
 800829c:	227e      	movhi	r2, #126	; 0x7e
 800829e:	1c51      	adds	r1, r2, #1
 80082a0:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80082a4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80082a8:	4f0d      	ldr	r7, [pc, #52]	; (80082e0 <_free_r+0x16c>)
 80082aa:	428e      	cmp	r6, r1
 80082ac:	d10b      	bne.n	80082c6 <_free_r+0x152>
 80082ae:	2101      	movs	r1, #1
 80082b0:	1092      	asrs	r2, r2, #2
 80082b2:	fa01 f202 	lsl.w	r2, r1, r2
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	4311      	orrs	r1, r2
 80082ba:	6079      	str	r1, [r7, #4]
 80082bc:	4631      	mov	r1, r6
 80082be:	e008      	b.n	80082d2 <_free_r+0x15e>
 80082c0:	6889      	ldr	r1, [r1, #8]
 80082c2:	428e      	cmp	r6, r1
 80082c4:	d004      	beq.n	80082d0 <_free_r+0x15c>
 80082c6:	684a      	ldr	r2, [r1, #4]
 80082c8:	f022 0203 	bic.w	r2, r2, #3
 80082cc:	4290      	cmp	r0, r2
 80082ce:	d3f7      	bcc.n	80082c0 <_free_r+0x14c>
 80082d0:	68ce      	ldr	r6, [r1, #12]
 80082d2:	60de      	str	r6, [r3, #12]
 80082d4:	6099      	str	r1, [r3, #8]
 80082d6:	60b3      	str	r3, [r6, #8]
 80082d8:	60cb      	str	r3, [r1, #12]
 80082da:	e77b      	b.n	80081d4 <_free_r+0x60>
 80082dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082e0:	20000004 	.word	0x20000004
 80082e4:	2000040c 	.word	0x2000040c
 80082e8:	20000698 	.word	0x20000698
 80082ec:	2000000c 	.word	0x2000000c

080082f0 <__sfvwrite_r>:
 80082f0:	6893      	ldr	r3, [r2, #8]
 80082f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f6:	4606      	mov	r6, r0
 80082f8:	460c      	mov	r4, r1
 80082fa:	4690      	mov	r8, r2
 80082fc:	b90b      	cbnz	r3, 8008302 <__sfvwrite_r+0x12>
 80082fe:	2000      	movs	r0, #0
 8008300:	e13b      	b.n	800857a <__sfvwrite_r+0x28a>
 8008302:	898b      	ldrh	r3, [r1, #12]
 8008304:	0718      	lsls	r0, r3, #28
 8008306:	d50f      	bpl.n	8008328 <__sfvwrite_r+0x38>
 8008308:	690b      	ldr	r3, [r1, #16]
 800830a:	b16b      	cbz	r3, 8008328 <__sfvwrite_r+0x38>
 800830c:	f8b4 900c 	ldrh.w	r9, [r4, #12]
 8008310:	f8d8 b000 	ldr.w	fp, [r8]
 8008314:	f009 0502 	and.w	r5, r9, #2
 8008318:	b2ad      	uxth	r5, r5
 800831a:	b355      	cbz	r5, 8008372 <__sfvwrite_r+0x82>
 800831c:	f04f 0900 	mov.w	r9, #0
 8008320:	464f      	mov	r7, r9
 8008322:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8008580 <__sfvwrite_r+0x290>
 8008326:	e01b      	b.n	8008360 <__sfvwrite_r+0x70>
 8008328:	4621      	mov	r1, r4
 800832a:	4630      	mov	r0, r6
 800832c:	f7fe fec0 	bl	80070b0 <__swsetup_r>
 8008330:	2800      	cmp	r0, #0
 8008332:	d0eb      	beq.n	800830c <__sfvwrite_r+0x1c>
 8008334:	e11f      	b.n	8008576 <__sfvwrite_r+0x286>
 8008336:	4557      	cmp	r7, sl
 8008338:	463b      	mov	r3, r7
 800833a:	464a      	mov	r2, r9
 800833c:	bf28      	it	cs
 800833e:	4653      	movcs	r3, sl
 8008340:	6a21      	ldr	r1, [r4, #32]
 8008342:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8008344:	4630      	mov	r0, r6
 8008346:	47a8      	blx	r5
 8008348:	2800      	cmp	r0, #0
 800834a:	f340 8110 	ble.w	800856e <__sfvwrite_r+0x27e>
 800834e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008352:	4481      	add	r9, r0
 8008354:	1a3f      	subs	r7, r7, r0
 8008356:	1a18      	subs	r0, r3, r0
 8008358:	f8c8 0008 	str.w	r0, [r8, #8]
 800835c:	2800      	cmp	r0, #0
 800835e:	d0ce      	beq.n	80082fe <__sfvwrite_r+0xe>
 8008360:	2f00      	cmp	r7, #0
 8008362:	d1e8      	bne.n	8008336 <__sfvwrite_r+0x46>
 8008364:	f8db 9000 	ldr.w	r9, [fp]
 8008368:	f8db 7004 	ldr.w	r7, [fp, #4]
 800836c:	f10b 0b08 	add.w	fp, fp, #8
 8008370:	e7f6      	b.n	8008360 <__sfvwrite_r+0x70>
 8008372:	f019 0901 	ands.w	r9, r9, #1
 8008376:	d003      	beq.n	8008380 <__sfvwrite_r+0x90>
 8008378:	9500      	str	r5, [sp, #0]
 800837a:	46a9      	mov	r9, r5
 800837c:	46aa      	mov	sl, r5
 800837e:	e0bd      	b.n	80084fc <__sfvwrite_r+0x20c>
 8008380:	464f      	mov	r7, r9
 8008382:	b937      	cbnz	r7, 8008392 <__sfvwrite_r+0xa2>
 8008384:	f8db 9000 	ldr.w	r9, [fp]
 8008388:	f8db 7004 	ldr.w	r7, [fp, #4]
 800838c:	f10b 0b08 	add.w	fp, fp, #8
 8008390:	e7f7      	b.n	8008382 <__sfvwrite_r+0x92>
 8008392:	89a2      	ldrh	r2, [r4, #12]
 8008394:	68a5      	ldr	r5, [r4, #8]
 8008396:	0591      	lsls	r1, r2, #22
 8008398:	d552      	bpl.n	8008440 <__sfvwrite_r+0x150>
 800839a:	42af      	cmp	r7, r5
 800839c:	d342      	bcc.n	8008424 <__sfvwrite_r+0x134>
 800839e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083a2:	d03d      	beq.n	8008420 <__sfvwrite_r+0x130>
 80083a4:	6921      	ldr	r1, [r4, #16]
 80083a6:	6823      	ldr	r3, [r4, #0]
 80083a8:	1a5b      	subs	r3, r3, r1
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	6963      	ldr	r3, [r4, #20]
 80083ae:	2002      	movs	r0, #2
 80083b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80083b4:	fb93 faf0 	sdiv	sl, r3, r0
 80083b8:	9b00      	ldr	r3, [sp, #0]
 80083ba:	3301      	adds	r3, #1
 80083bc:	443b      	add	r3, r7
 80083be:	459a      	cmp	sl, r3
 80083c0:	bf38      	it	cc
 80083c2:	469a      	movcc	sl, r3
 80083c4:	0553      	lsls	r3, r2, #21
 80083c6:	d510      	bpl.n	80083ea <__sfvwrite_r+0xfa>
 80083c8:	4651      	mov	r1, sl
 80083ca:	4630      	mov	r0, r6
 80083cc:	f7fb fbde 	bl	8003b8c <_malloc_r>
 80083d0:	4605      	mov	r5, r0
 80083d2:	b1c0      	cbz	r0, 8008406 <__sfvwrite_r+0x116>
 80083d4:	9a00      	ldr	r2, [sp, #0]
 80083d6:	6921      	ldr	r1, [r4, #16]
 80083d8:	f000 fc86 	bl	8008ce8 <memcpy>
 80083dc:	89a3      	ldrh	r3, [r4, #12]
 80083de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083e6:	81a3      	strh	r3, [r4, #12]
 80083e8:	e010      	b.n	800840c <__sfvwrite_r+0x11c>
 80083ea:	4652      	mov	r2, sl
 80083ec:	4630      	mov	r0, r6
 80083ee:	f001 f891 	bl	8009514 <_realloc_r>
 80083f2:	4605      	mov	r5, r0
 80083f4:	b950      	cbnz	r0, 800840c <__sfvwrite_r+0x11c>
 80083f6:	6921      	ldr	r1, [r4, #16]
 80083f8:	4630      	mov	r0, r6
 80083fa:	f7ff febb 	bl	8008174 <_free_r>
 80083fe:	89a3      	ldrh	r3, [r4, #12]
 8008400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008404:	81a3      	strh	r3, [r4, #12]
 8008406:	230c      	movs	r3, #12
 8008408:	6033      	str	r3, [r6, #0]
 800840a:	e0b0      	b.n	800856e <__sfvwrite_r+0x27e>
 800840c:	9b00      	ldr	r3, [sp, #0]
 800840e:	6125      	str	r5, [r4, #16]
 8008410:	441d      	add	r5, r3
 8008412:	ebc3 030a 	rsb	r3, r3, sl
 8008416:	6025      	str	r5, [r4, #0]
 8008418:	f8c4 a014 	str.w	sl, [r4, #20]
 800841c:	463d      	mov	r5, r7
 800841e:	60a3      	str	r3, [r4, #8]
 8008420:	42af      	cmp	r7, r5
 8008422:	d200      	bcs.n	8008426 <__sfvwrite_r+0x136>
 8008424:	463d      	mov	r5, r7
 8008426:	462a      	mov	r2, r5
 8008428:	4649      	mov	r1, r9
 800842a:	6820      	ldr	r0, [r4, #0]
 800842c:	f000 fc67 	bl	8008cfe <memmove>
 8008430:	68a3      	ldr	r3, [r4, #8]
 8008432:	1b5b      	subs	r3, r3, r5
 8008434:	60a3      	str	r3, [r4, #8]
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	441d      	add	r5, r3
 800843a:	6025      	str	r5, [r4, #0]
 800843c:	463d      	mov	r5, r7
 800843e:	e029      	b.n	8008494 <__sfvwrite_r+0x1a4>
 8008440:	6820      	ldr	r0, [r4, #0]
 8008442:	6923      	ldr	r3, [r4, #16]
 8008444:	4298      	cmp	r0, r3
 8008446:	d802      	bhi.n	800844e <__sfvwrite_r+0x15e>
 8008448:	6962      	ldr	r2, [r4, #20]
 800844a:	4297      	cmp	r7, r2
 800844c:	d213      	bcs.n	8008476 <__sfvwrite_r+0x186>
 800844e:	42bd      	cmp	r5, r7
 8008450:	bf28      	it	cs
 8008452:	463d      	movcs	r5, r7
 8008454:	462a      	mov	r2, r5
 8008456:	4649      	mov	r1, r9
 8008458:	f000 fc51 	bl	8008cfe <memmove>
 800845c:	68a3      	ldr	r3, [r4, #8]
 800845e:	6822      	ldr	r2, [r4, #0]
 8008460:	1b5b      	subs	r3, r3, r5
 8008462:	442a      	add	r2, r5
 8008464:	60a3      	str	r3, [r4, #8]
 8008466:	6022      	str	r2, [r4, #0]
 8008468:	b9a3      	cbnz	r3, 8008494 <__sfvwrite_r+0x1a4>
 800846a:	4621      	mov	r1, r4
 800846c:	4630      	mov	r0, r6
 800846e:	f7ff fd4f 	bl	8007f10 <_fflush_r>
 8008472:	b178      	cbz	r0, 8008494 <__sfvwrite_r+0x1a4>
 8008474:	e07b      	b.n	800856e <__sfvwrite_r+0x27e>
 8008476:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800847a:	42bb      	cmp	r3, r7
 800847c:	bf28      	it	cs
 800847e:	463b      	movcs	r3, r7
 8008480:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8008482:	fb93 f3f2 	sdiv	r3, r3, r2
 8008486:	6a21      	ldr	r1, [r4, #32]
 8008488:	4353      	muls	r3, r2
 800848a:	4630      	mov	r0, r6
 800848c:	464a      	mov	r2, r9
 800848e:	47a8      	blx	r5
 8008490:	1e05      	subs	r5, r0, #0
 8008492:	dd6c      	ble.n	800856e <__sfvwrite_r+0x27e>
 8008494:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008498:	44a9      	add	r9, r5
 800849a:	1b7f      	subs	r7, r7, r5
 800849c:	1b5d      	subs	r5, r3, r5
 800849e:	f8c8 5008 	str.w	r5, [r8, #8]
 80084a2:	2d00      	cmp	r5, #0
 80084a4:	f47f af6d 	bne.w	8008382 <__sfvwrite_r+0x92>
 80084a8:	e729      	b.n	80082fe <__sfvwrite_r+0xe>
 80084aa:	9b00      	ldr	r3, [sp, #0]
 80084ac:	b383      	cbz	r3, 8008510 <__sfvwrite_r+0x220>
 80084ae:	6820      	ldr	r0, [r4, #0]
 80084b0:	6921      	ldr	r1, [r4, #16]
 80084b2:	6962      	ldr	r2, [r4, #20]
 80084b4:	4555      	cmp	r5, sl
 80084b6:	462b      	mov	r3, r5
 80084b8:	bf28      	it	cs
 80084ba:	4653      	movcs	r3, sl
 80084bc:	4288      	cmp	r0, r1
 80084be:	d936      	bls.n	800852e <__sfvwrite_r+0x23e>
 80084c0:	68a7      	ldr	r7, [r4, #8]
 80084c2:	4417      	add	r7, r2
 80084c4:	42bb      	cmp	r3, r7
 80084c6:	dd32      	ble.n	800852e <__sfvwrite_r+0x23e>
 80084c8:	4649      	mov	r1, r9
 80084ca:	463a      	mov	r2, r7
 80084cc:	f000 fc17 	bl	8008cfe <memmove>
 80084d0:	6823      	ldr	r3, [r4, #0]
 80084d2:	443b      	add	r3, r7
 80084d4:	6023      	str	r3, [r4, #0]
 80084d6:	4621      	mov	r1, r4
 80084d8:	4630      	mov	r0, r6
 80084da:	f7ff fd19 	bl	8007f10 <_fflush_r>
 80084de:	2800      	cmp	r0, #0
 80084e0:	d145      	bne.n	800856e <__sfvwrite_r+0x27e>
 80084e2:	1bed      	subs	r5, r5, r7
 80084e4:	d03c      	beq.n	8008560 <__sfvwrite_r+0x270>
 80084e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80084ea:	44b9      	add	r9, r7
 80084ec:	ebc7 0a0a 	rsb	sl, r7, sl
 80084f0:	1bdf      	subs	r7, r3, r7
 80084f2:	f8c8 7008 	str.w	r7, [r8, #8]
 80084f6:	2f00      	cmp	r7, #0
 80084f8:	f43f af01 	beq.w	80082fe <__sfvwrite_r+0xe>
 80084fc:	f1ba 0f00 	cmp.w	sl, #0
 8008500:	d1d3      	bne.n	80084aa <__sfvwrite_r+0x1ba>
 8008502:	2300      	movs	r3, #0
 8008504:	e89b 0600 	ldmia.w	fp, {r9, sl}
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	f10b 0b08 	add.w	fp, fp, #8
 800850e:	e7f5      	b.n	80084fc <__sfvwrite_r+0x20c>
 8008510:	4652      	mov	r2, sl
 8008512:	210a      	movs	r1, #10
 8008514:	4648      	mov	r0, r9
 8008516:	f7f7 fe73 	bl	8000200 <memchr>
 800851a:	b118      	cbz	r0, 8008524 <__sfvwrite_r+0x234>
 800851c:	3001      	adds	r0, #1
 800851e:	ebc9 0500 	rsb	r5, r9, r0
 8008522:	e001      	b.n	8008528 <__sfvwrite_r+0x238>
 8008524:	f10a 0501 	add.w	r5, sl, #1
 8008528:	2301      	movs	r3, #1
 800852a:	9300      	str	r3, [sp, #0]
 800852c:	e7bf      	b.n	80084ae <__sfvwrite_r+0x1be>
 800852e:	4293      	cmp	r3, r2
 8008530:	db08      	blt.n	8008544 <__sfvwrite_r+0x254>
 8008532:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8008534:	6a21      	ldr	r1, [r4, #32]
 8008536:	4613      	mov	r3, r2
 8008538:	4630      	mov	r0, r6
 800853a:	464a      	mov	r2, r9
 800853c:	47b8      	blx	r7
 800853e:	1e07      	subs	r7, r0, #0
 8008540:	dccf      	bgt.n	80084e2 <__sfvwrite_r+0x1f2>
 8008542:	e014      	b.n	800856e <__sfvwrite_r+0x27e>
 8008544:	461a      	mov	r2, r3
 8008546:	4649      	mov	r1, r9
 8008548:	9301      	str	r3, [sp, #4]
 800854a:	f000 fbd8 	bl	8008cfe <memmove>
 800854e:	9b01      	ldr	r3, [sp, #4]
 8008550:	68a2      	ldr	r2, [r4, #8]
 8008552:	1ad2      	subs	r2, r2, r3
 8008554:	60a2      	str	r2, [r4, #8]
 8008556:	6822      	ldr	r2, [r4, #0]
 8008558:	441a      	add	r2, r3
 800855a:	6022      	str	r2, [r4, #0]
 800855c:	461f      	mov	r7, r3
 800855e:	e7c0      	b.n	80084e2 <__sfvwrite_r+0x1f2>
 8008560:	4621      	mov	r1, r4
 8008562:	4630      	mov	r0, r6
 8008564:	f7ff fcd4 	bl	8007f10 <_fflush_r>
 8008568:	b908      	cbnz	r0, 800856e <__sfvwrite_r+0x27e>
 800856a:	9500      	str	r5, [sp, #0]
 800856c:	e7bb      	b.n	80084e6 <__sfvwrite_r+0x1f6>
 800856e:	89a3      	ldrh	r3, [r4, #12]
 8008570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008574:	81a3      	strh	r3, [r4, #12]
 8008576:	f04f 30ff 	mov.w	r0, #4294967295
 800857a:	b003      	add	sp, #12
 800857c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008580:	7ffffc00 	.word	0x7ffffc00

08008584 <_fwalk_reent>:
 8008584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008588:	4680      	mov	r8, r0
 800858a:	4689      	mov	r9, r1
 800858c:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8008590:	2600      	movs	r6, #0
 8008592:	b194      	cbz	r4, 80085ba <_fwalk_reent+0x36>
 8008594:	68a5      	ldr	r5, [r4, #8]
 8008596:	6867      	ldr	r7, [r4, #4]
 8008598:	3f01      	subs	r7, #1
 800859a:	d40c      	bmi.n	80085b6 <_fwalk_reent+0x32>
 800859c:	89ab      	ldrh	r3, [r5, #12]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d907      	bls.n	80085b2 <_fwalk_reent+0x2e>
 80085a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085a6:	3301      	adds	r3, #1
 80085a8:	d003      	beq.n	80085b2 <_fwalk_reent+0x2e>
 80085aa:	4629      	mov	r1, r5
 80085ac:	4640      	mov	r0, r8
 80085ae:	47c8      	blx	r9
 80085b0:	4306      	orrs	r6, r0
 80085b2:	3568      	adds	r5, #104	; 0x68
 80085b4:	e7f0      	b.n	8008598 <_fwalk_reent+0x14>
 80085b6:	6824      	ldr	r4, [r4, #0]
 80085b8:	e7eb      	b.n	8008592 <_fwalk_reent+0xe>
 80085ba:	4630      	mov	r0, r6
 80085bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080085c0 <rshift>:
 80085c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085c2:	6906      	ldr	r6, [r0, #16]
 80085c4:	114b      	asrs	r3, r1, #5
 80085c6:	42b3      	cmp	r3, r6
 80085c8:	f100 0514 	add.w	r5, r0, #20
 80085cc:	da27      	bge.n	800861e <rshift+0x5e>
 80085ce:	f011 011f 	ands.w	r1, r1, #31
 80085d2:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80085d6:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80085da:	d101      	bne.n	80085e0 <rshift+0x20>
 80085dc:	4629      	mov	r1, r5
 80085de:	e016      	b.n	800860e <rshift+0x4e>
 80085e0:	1d14      	adds	r4, r2, #4
 80085e2:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80085e6:	f1c1 0e20 	rsb	lr, r1, #32
 80085ea:	40ca      	lsrs	r2, r1
 80085ec:	462b      	mov	r3, r5
 80085ee:	42b4      	cmp	r4, r6
 80085f0:	d209      	bcs.n	8008606 <rshift+0x46>
 80085f2:	6827      	ldr	r7, [r4, #0]
 80085f4:	fa07 f70e 	lsl.w	r7, r7, lr
 80085f8:	433a      	orrs	r2, r7
 80085fa:	f843 2b04 	str.w	r2, [r3], #4
 80085fe:	f854 2b04 	ldr.w	r2, [r4], #4
 8008602:	40ca      	lsrs	r2, r1
 8008604:	e7f3      	b.n	80085ee <rshift+0x2e>
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	b152      	cbz	r2, 8008620 <rshift+0x60>
 800860a:	3304      	adds	r3, #4
 800860c:	e008      	b.n	8008620 <rshift+0x60>
 800860e:	42b2      	cmp	r2, r6
 8008610:	460b      	mov	r3, r1
 8008612:	d205      	bcs.n	8008620 <rshift+0x60>
 8008614:	f852 3b04 	ldr.w	r3, [r2], #4
 8008618:	f841 3b04 	str.w	r3, [r1], #4
 800861c:	e7f7      	b.n	800860e <rshift+0x4e>
 800861e:	462b      	mov	r3, r5
 8008620:	1b5b      	subs	r3, r3, r5
 8008622:	109b      	asrs	r3, r3, #2
 8008624:	6103      	str	r3, [r0, #16]
 8008626:	b903      	cbnz	r3, 800862a <rshift+0x6a>
 8008628:	6143      	str	r3, [r0, #20]
 800862a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800862c <__hexdig_fun>:
 800862c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008630:	2b09      	cmp	r3, #9
 8008632:	d801      	bhi.n	8008638 <__hexdig_fun+0xc>
 8008634:	3820      	subs	r0, #32
 8008636:	e00a      	b.n	800864e <__hexdig_fun+0x22>
 8008638:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800863c:	2b05      	cmp	r3, #5
 800863e:	d801      	bhi.n	8008644 <__hexdig_fun+0x18>
 8008640:	3847      	subs	r0, #71	; 0x47
 8008642:	e004      	b.n	800864e <__hexdig_fun+0x22>
 8008644:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008648:	2b05      	cmp	r3, #5
 800864a:	d802      	bhi.n	8008652 <__hexdig_fun+0x26>
 800864c:	3827      	subs	r0, #39	; 0x27
 800864e:	b2c0      	uxtb	r0, r0
 8008650:	4770      	bx	lr
 8008652:	2000      	movs	r0, #0
 8008654:	4770      	bx	lr

08008656 <__gethex>:
 8008656:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865a:	b08b      	sub	sp, #44	; 0x2c
 800865c:	468a      	mov	sl, r1
 800865e:	4690      	mov	r8, r2
 8008660:	9306      	str	r3, [sp, #24]
 8008662:	9002      	str	r0, [sp, #8]
 8008664:	f000 fad4 	bl	8008c10 <_localeconv_r>
 8008668:	6803      	ldr	r3, [r0, #0]
 800866a:	9303      	str	r3, [sp, #12]
 800866c:	4618      	mov	r0, r3
 800866e:	f7f7 fdb9 	bl	80001e4 <strlen>
 8008672:	9b03      	ldr	r3, [sp, #12]
 8008674:	9001      	str	r0, [sp, #4]
 8008676:	4403      	add	r3, r0
 8008678:	f04f 0b00 	mov.w	fp, #0
 800867c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008680:	9307      	str	r3, [sp, #28]
 8008682:	f8da 3000 	ldr.w	r3, [sl]
 8008686:	3302      	adds	r3, #2
 8008688:	461f      	mov	r7, r3
 800868a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800868e:	2830      	cmp	r0, #48	; 0x30
 8008690:	d102      	bne.n	8008698 <__gethex+0x42>
 8008692:	f10b 0b01 	add.w	fp, fp, #1
 8008696:	e7f7      	b.n	8008688 <__gethex+0x32>
 8008698:	f7ff ffc8 	bl	800862c <__hexdig_fun>
 800869c:	4604      	mov	r4, r0
 800869e:	b9e0      	cbnz	r0, 80086da <__gethex+0x84>
 80086a0:	9a01      	ldr	r2, [sp, #4]
 80086a2:	9903      	ldr	r1, [sp, #12]
 80086a4:	4638      	mov	r0, r7
 80086a6:	f001 f920 	bl	80098ea <strncmp>
 80086aa:	2800      	cmp	r0, #0
 80086ac:	d134      	bne.n	8008718 <__gethex+0xc2>
 80086ae:	9b01      	ldr	r3, [sp, #4]
 80086b0:	5cf8      	ldrb	r0, [r7, r3]
 80086b2:	18fe      	adds	r6, r7, r3
 80086b4:	f7ff ffba 	bl	800862c <__hexdig_fun>
 80086b8:	b380      	cbz	r0, 800871c <__gethex+0xc6>
 80086ba:	4633      	mov	r3, r6
 80086bc:	7818      	ldrb	r0, [r3, #0]
 80086be:	2830      	cmp	r0, #48	; 0x30
 80086c0:	461f      	mov	r7, r3
 80086c2:	f103 0301 	add.w	r3, r3, #1
 80086c6:	d0f9      	beq.n	80086bc <__gethex+0x66>
 80086c8:	f7ff ffb0 	bl	800862c <__hexdig_fun>
 80086cc:	fab0 f580 	clz	r5, r0
 80086d0:	096d      	lsrs	r5, r5, #5
 80086d2:	4634      	mov	r4, r6
 80086d4:	f04f 0b01 	mov.w	fp, #1
 80086d8:	e001      	b.n	80086de <__gethex+0x88>
 80086da:	2500      	movs	r5, #0
 80086dc:	462c      	mov	r4, r5
 80086de:	463a      	mov	r2, r7
 80086e0:	4616      	mov	r6, r2
 80086e2:	3201      	adds	r2, #1
 80086e4:	7830      	ldrb	r0, [r6, #0]
 80086e6:	f7ff ffa1 	bl	800862c <__hexdig_fun>
 80086ea:	2800      	cmp	r0, #0
 80086ec:	d1f8      	bne.n	80086e0 <__gethex+0x8a>
 80086ee:	9a01      	ldr	r2, [sp, #4]
 80086f0:	9903      	ldr	r1, [sp, #12]
 80086f2:	4630      	mov	r0, r6
 80086f4:	f001 f8f9 	bl	80098ea <strncmp>
 80086f8:	b950      	cbnz	r0, 8008710 <__gethex+0xba>
 80086fa:	b954      	cbnz	r4, 8008712 <__gethex+0xbc>
 80086fc:	9b01      	ldr	r3, [sp, #4]
 80086fe:	18f4      	adds	r4, r6, r3
 8008700:	4622      	mov	r2, r4
 8008702:	4616      	mov	r6, r2
 8008704:	3201      	adds	r2, #1
 8008706:	7830      	ldrb	r0, [r6, #0]
 8008708:	f7ff ff90 	bl	800862c <__hexdig_fun>
 800870c:	2800      	cmp	r0, #0
 800870e:	d1f8      	bne.n	8008702 <__gethex+0xac>
 8008710:	b134      	cbz	r4, 8008720 <__gethex+0xca>
 8008712:	1ba4      	subs	r4, r4, r6
 8008714:	00a4      	lsls	r4, r4, #2
 8008716:	e003      	b.n	8008720 <__gethex+0xca>
 8008718:	463e      	mov	r6, r7
 800871a:	e000      	b.n	800871e <__gethex+0xc8>
 800871c:	4604      	mov	r4, r0
 800871e:	2501      	movs	r5, #1
 8008720:	7833      	ldrb	r3, [r6, #0]
 8008722:	2b50      	cmp	r3, #80	; 0x50
 8008724:	d001      	beq.n	800872a <__gethex+0xd4>
 8008726:	2b70      	cmp	r3, #112	; 0x70
 8008728:	d12a      	bne.n	8008780 <__gethex+0x12a>
 800872a:	7873      	ldrb	r3, [r6, #1]
 800872c:	2b2b      	cmp	r3, #43	; 0x2b
 800872e:	d008      	beq.n	8008742 <__gethex+0xec>
 8008730:	2b2d      	cmp	r3, #45	; 0x2d
 8008732:	d003      	beq.n	800873c <__gethex+0xe6>
 8008734:	1c71      	adds	r1, r6, #1
 8008736:	f04f 0900 	mov.w	r9, #0
 800873a:	e005      	b.n	8008748 <__gethex+0xf2>
 800873c:	f04f 0901 	mov.w	r9, #1
 8008740:	e001      	b.n	8008746 <__gethex+0xf0>
 8008742:	f04f 0900 	mov.w	r9, #0
 8008746:	1cb1      	adds	r1, r6, #2
 8008748:	7808      	ldrb	r0, [r1, #0]
 800874a:	f7ff ff6f 	bl	800862c <__hexdig_fun>
 800874e:	1e43      	subs	r3, r0, #1
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b18      	cmp	r3, #24
 8008754:	d814      	bhi.n	8008780 <__gethex+0x12a>
 8008756:	f1a0 0210 	sub.w	r2, r0, #16
 800875a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800875e:	f7ff ff65 	bl	800862c <__hexdig_fun>
 8008762:	1e43      	subs	r3, r0, #1
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b18      	cmp	r3, #24
 8008768:	d804      	bhi.n	8008774 <__gethex+0x11e>
 800876a:	230a      	movs	r3, #10
 800876c:	fb03 0202 	mla	r2, r3, r2, r0
 8008770:	3a10      	subs	r2, #16
 8008772:	e7f2      	b.n	800875a <__gethex+0x104>
 8008774:	f1b9 0f00 	cmp.w	r9, #0
 8008778:	d000      	beq.n	800877c <__gethex+0x126>
 800877a:	4252      	negs	r2, r2
 800877c:	4414      	add	r4, r2
 800877e:	e000      	b.n	8008782 <__gethex+0x12c>
 8008780:	4631      	mov	r1, r6
 8008782:	f8ca 1000 	str.w	r1, [sl]
 8008786:	b12d      	cbz	r5, 8008794 <__gethex+0x13e>
 8008788:	f1bb 0f00 	cmp.w	fp, #0
 800878c:	bf14      	ite	ne
 800878e:	2000      	movne	r0, #0
 8008790:	2006      	moveq	r0, #6
 8008792:	e17c      	b.n	8008a8e <__gethex+0x438>
 8008794:	1bf3      	subs	r3, r6, r7
 8008796:	3b01      	subs	r3, #1
 8008798:	4629      	mov	r1, r5
 800879a:	2b07      	cmp	r3, #7
 800879c:	dd02      	ble.n	80087a4 <__gethex+0x14e>
 800879e:	3101      	adds	r1, #1
 80087a0:	105b      	asrs	r3, r3, #1
 80087a2:	e7fa      	b.n	800879a <__gethex+0x144>
 80087a4:	9802      	ldr	r0, [sp, #8]
 80087a6:	f000 fac5 	bl	8008d34 <_Balloc>
 80087aa:	9b01      	ldr	r3, [sp, #4]
 80087ac:	f100 0a14 	add.w	sl, r0, #20
 80087b0:	f04f 0900 	mov.w	r9, #0
 80087b4:	f1c3 0301 	rsb	r3, r3, #1
 80087b8:	4605      	mov	r5, r0
 80087ba:	f8cd a010 	str.w	sl, [sp, #16]
 80087be:	46cb      	mov	fp, r9
 80087c0:	9308      	str	r3, [sp, #32]
 80087c2:	42b7      	cmp	r7, r6
 80087c4:	d22f      	bcs.n	8008826 <__gethex+0x1d0>
 80087c6:	1e73      	subs	r3, r6, #1
 80087c8:	9305      	str	r3, [sp, #20]
 80087ca:	9a07      	ldr	r2, [sp, #28]
 80087cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d00b      	beq.n	80087ec <__gethex+0x196>
 80087d4:	f1bb 0f20 	cmp.w	fp, #32
 80087d8:	d116      	bne.n	8008808 <__gethex+0x1b2>
 80087da:	9b04      	ldr	r3, [sp, #16]
 80087dc:	f8c3 9000 	str.w	r9, [r3]
 80087e0:	3304      	adds	r3, #4
 80087e2:	f04f 0900 	mov.w	r9, #0
 80087e6:	9304      	str	r3, [sp, #16]
 80087e8:	46cb      	mov	fp, r9
 80087ea:	e00d      	b.n	8008808 <__gethex+0x1b2>
 80087ec:	9b05      	ldr	r3, [sp, #20]
 80087ee:	9a08      	ldr	r2, [sp, #32]
 80087f0:	4413      	add	r3, r2
 80087f2:	429f      	cmp	r7, r3
 80087f4:	d8ee      	bhi.n	80087d4 <__gethex+0x17e>
 80087f6:	4618      	mov	r0, r3
 80087f8:	9a01      	ldr	r2, [sp, #4]
 80087fa:	9903      	ldr	r1, [sp, #12]
 80087fc:	9309      	str	r3, [sp, #36]	; 0x24
 80087fe:	f001 f874 	bl	80098ea <strncmp>
 8008802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008804:	b168      	cbz	r0, 8008822 <__gethex+0x1cc>
 8008806:	e7e5      	b.n	80087d4 <__gethex+0x17e>
 8008808:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800880c:	f7ff ff0e 	bl	800862c <__hexdig_fun>
 8008810:	f000 000f 	and.w	r0, r0, #15
 8008814:	fa00 f00b 	lsl.w	r0, r0, fp
 8008818:	9b05      	ldr	r3, [sp, #20]
 800881a:	ea49 0900 	orr.w	r9, r9, r0
 800881e:	f10b 0b04 	add.w	fp, fp, #4
 8008822:	461e      	mov	r6, r3
 8008824:	e7cd      	b.n	80087c2 <__gethex+0x16c>
 8008826:	9804      	ldr	r0, [sp, #16]
 8008828:	f840 9b04 	str.w	r9, [r0], #4
 800882c:	ebca 0000 	rsb	r0, sl, r0
 8008830:	1080      	asrs	r0, r0, #2
 8008832:	6128      	str	r0, [r5, #16]
 8008834:	0147      	lsls	r7, r0, #5
 8008836:	4648      	mov	r0, r9
 8008838:	f000 fb41 	bl	8008ebe <__hi0bits>
 800883c:	f8d8 6000 	ldr.w	r6, [r8]
 8008840:	1a38      	subs	r0, r7, r0
 8008842:	42b0      	cmp	r0, r6
 8008844:	dd26      	ble.n	8008894 <__gethex+0x23e>
 8008846:	1b87      	subs	r7, r0, r6
 8008848:	4639      	mov	r1, r7
 800884a:	4628      	mov	r0, r5
 800884c:	f000 fe3f 	bl	80094ce <__any_on>
 8008850:	b1c8      	cbz	r0, 8008886 <__gethex+0x230>
 8008852:	1e7b      	subs	r3, r7, #1
 8008854:	1159      	asrs	r1, r3, #5
 8008856:	f003 021f 	and.w	r2, r3, #31
 800885a:	f04f 0901 	mov.w	r9, #1
 800885e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008862:	fa09 f202 	lsl.w	r2, r9, r2
 8008866:	420a      	tst	r2, r1
 8008868:	d00e      	beq.n	8008888 <__gethex+0x232>
 800886a:	454b      	cmp	r3, r9
 800886c:	dc02      	bgt.n	8008874 <__gethex+0x21e>
 800886e:	f04f 0902 	mov.w	r9, #2
 8008872:	e009      	b.n	8008888 <__gethex+0x232>
 8008874:	1eb9      	subs	r1, r7, #2
 8008876:	4628      	mov	r0, r5
 8008878:	f000 fe29 	bl	80094ce <__any_on>
 800887c:	2800      	cmp	r0, #0
 800887e:	d0f6      	beq.n	800886e <__gethex+0x218>
 8008880:	f04f 0903 	mov.w	r9, #3
 8008884:	e000      	b.n	8008888 <__gethex+0x232>
 8008886:	4681      	mov	r9, r0
 8008888:	4639      	mov	r1, r7
 800888a:	4628      	mov	r0, r5
 800888c:	f7ff fe98 	bl	80085c0 <rshift>
 8008890:	443c      	add	r4, r7
 8008892:	e00c      	b.n	80088ae <__gethex+0x258>
 8008894:	da09      	bge.n	80088aa <__gethex+0x254>
 8008896:	1a37      	subs	r7, r6, r0
 8008898:	4629      	mov	r1, r5
 800889a:	463a      	mov	r2, r7
 800889c:	9802      	ldr	r0, [sp, #8]
 800889e:	f000 fc43 	bl	8009128 <__lshift>
 80088a2:	1be4      	subs	r4, r4, r7
 80088a4:	4605      	mov	r5, r0
 80088a6:	f100 0a14 	add.w	sl, r0, #20
 80088aa:	f04f 0900 	mov.w	r9, #0
 80088ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80088b2:	429c      	cmp	r4, r3
 80088b4:	dd08      	ble.n	80088c8 <__gethex+0x272>
 80088b6:	9802      	ldr	r0, [sp, #8]
 80088b8:	4629      	mov	r1, r5
 80088ba:	f000 fa70 	bl	8008d9e <_Bfree>
 80088be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80088c0:	2300      	movs	r3, #0
 80088c2:	6013      	str	r3, [r2, #0]
 80088c4:	20a3      	movs	r0, #163	; 0xa3
 80088c6:	e0e2      	b.n	8008a8e <__gethex+0x438>
 80088c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80088cc:	4284      	cmp	r4, r0
 80088ce:	da53      	bge.n	8008978 <__gethex+0x322>
 80088d0:	1b04      	subs	r4, r0, r4
 80088d2:	42a6      	cmp	r6, r4
 80088d4:	dc2e      	bgt.n	8008934 <__gethex+0x2de>
 80088d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d01a      	beq.n	8008914 <__gethex+0x2be>
 80088de:	2b03      	cmp	r3, #3
 80088e0:	d01c      	beq.n	800891c <__gethex+0x2c6>
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d11d      	bne.n	8008922 <__gethex+0x2cc>
 80088e6:	42a6      	cmp	r6, r4
 80088e8:	d11b      	bne.n	8008922 <__gethex+0x2cc>
 80088ea:	2e01      	cmp	r6, #1
 80088ec:	dc0b      	bgt.n	8008906 <__gethex+0x2b0>
 80088ee:	9a06      	ldr	r2, [sp, #24]
 80088f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80088f4:	6013      	str	r3, [r2, #0]
 80088f6:	2301      	movs	r3, #1
 80088f8:	612b      	str	r3, [r5, #16]
 80088fa:	f8ca 3000 	str.w	r3, [sl]
 80088fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008900:	2062      	movs	r0, #98	; 0x62
 8008902:	601d      	str	r5, [r3, #0]
 8008904:	e0c3      	b.n	8008a8e <__gethex+0x438>
 8008906:	1e71      	subs	r1, r6, #1
 8008908:	4628      	mov	r0, r5
 800890a:	f000 fde0 	bl	80094ce <__any_on>
 800890e:	2800      	cmp	r0, #0
 8008910:	d1ed      	bne.n	80088ee <__gethex+0x298>
 8008912:	e006      	b.n	8008922 <__gethex+0x2cc>
 8008914:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008916:	2b00      	cmp	r3, #0
 8008918:	d0e9      	beq.n	80088ee <__gethex+0x298>
 800891a:	e002      	b.n	8008922 <__gethex+0x2cc>
 800891c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1e5      	bne.n	80088ee <__gethex+0x298>
 8008922:	9802      	ldr	r0, [sp, #8]
 8008924:	4629      	mov	r1, r5
 8008926:	f000 fa3a 	bl	8008d9e <_Bfree>
 800892a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800892c:	2300      	movs	r3, #0
 800892e:	6013      	str	r3, [r2, #0]
 8008930:	2050      	movs	r0, #80	; 0x50
 8008932:	e0ac      	b.n	8008a8e <__gethex+0x438>
 8008934:	1e67      	subs	r7, r4, #1
 8008936:	f1b9 0f00 	cmp.w	r9, #0
 800893a:	d106      	bne.n	800894a <__gethex+0x2f4>
 800893c:	b13f      	cbz	r7, 800894e <__gethex+0x2f8>
 800893e:	4639      	mov	r1, r7
 8008940:	4628      	mov	r0, r5
 8008942:	f000 fdc4 	bl	80094ce <__any_on>
 8008946:	4681      	mov	r9, r0
 8008948:	e001      	b.n	800894e <__gethex+0x2f8>
 800894a:	f04f 0901 	mov.w	r9, #1
 800894e:	117a      	asrs	r2, r7, #5
 8008950:	2301      	movs	r3, #1
 8008952:	f007 071f 	and.w	r7, r7, #31
 8008956:	fa03 f707 	lsl.w	r7, r3, r7
 800895a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 800895e:	4621      	mov	r1, r4
 8008960:	421f      	tst	r7, r3
 8008962:	4628      	mov	r0, r5
 8008964:	bf18      	it	ne
 8008966:	f049 0902 	orrne.w	r9, r9, #2
 800896a:	1b36      	subs	r6, r6, r4
 800896c:	f7ff fe28 	bl	80085c0 <rshift>
 8008970:	2702      	movs	r7, #2
 8008972:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008976:	e000      	b.n	800897a <__gethex+0x324>
 8008978:	2701      	movs	r7, #1
 800897a:	f1b9 0f00 	cmp.w	r9, #0
 800897e:	f000 8081 	beq.w	8008a84 <__gethex+0x42e>
 8008982:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008986:	2b02      	cmp	r3, #2
 8008988:	d00e      	beq.n	80089a8 <__gethex+0x352>
 800898a:	2b03      	cmp	r3, #3
 800898c:	d010      	beq.n	80089b0 <__gethex+0x35a>
 800898e:	2b01      	cmp	r3, #1
 8008990:	d176      	bne.n	8008a80 <__gethex+0x42a>
 8008992:	f019 0f02 	tst.w	r9, #2
 8008996:	d073      	beq.n	8008a80 <__gethex+0x42a>
 8008998:	f8da 0000 	ldr.w	r0, [sl]
 800899c:	ea49 0900 	orr.w	r9, r9, r0
 80089a0:	f019 0f01 	tst.w	r9, #1
 80089a4:	d107      	bne.n	80089b6 <__gethex+0x360>
 80089a6:	e06b      	b.n	8008a80 <__gethex+0x42a>
 80089a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089aa:	f1c3 0301 	rsb	r3, r3, #1
 80089ae:	9315      	str	r3, [sp, #84]	; 0x54
 80089b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d064      	beq.n	8008a80 <__gethex+0x42a>
 80089b6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80089ba:	f105 0314 	add.w	r3, r5, #20
 80089be:	ea4f 098a 	mov.w	r9, sl, lsl #2
 80089c2:	eb03 0109 	add.w	r1, r3, r9
 80089c6:	2000      	movs	r0, #0
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	f1b2 3fff 	cmp.w	r2, #4294967295
 80089ce:	d002      	beq.n	80089d6 <__gethex+0x380>
 80089d0:	3201      	adds	r2, #1
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	e020      	b.n	8008a18 <__gethex+0x3c2>
 80089d6:	f843 0b04 	str.w	r0, [r3], #4
 80089da:	4299      	cmp	r1, r3
 80089dc:	d8f4      	bhi.n	80089c8 <__gethex+0x372>
 80089de:	68ab      	ldr	r3, [r5, #8]
 80089e0:	459a      	cmp	sl, r3
 80089e2:	db12      	blt.n	8008a0a <__gethex+0x3b4>
 80089e4:	6869      	ldr	r1, [r5, #4]
 80089e6:	9802      	ldr	r0, [sp, #8]
 80089e8:	3101      	adds	r1, #1
 80089ea:	f000 f9a3 	bl	8008d34 <_Balloc>
 80089ee:	692a      	ldr	r2, [r5, #16]
 80089f0:	3202      	adds	r2, #2
 80089f2:	f105 010c 	add.w	r1, r5, #12
 80089f6:	4683      	mov	fp, r0
 80089f8:	0092      	lsls	r2, r2, #2
 80089fa:	300c      	adds	r0, #12
 80089fc:	f000 f974 	bl	8008ce8 <memcpy>
 8008a00:	4629      	mov	r1, r5
 8008a02:	9802      	ldr	r0, [sp, #8]
 8008a04:	f000 f9cb 	bl	8008d9e <_Bfree>
 8008a08:	465d      	mov	r5, fp
 8008a0a:	692b      	ldr	r3, [r5, #16]
 8008a0c:	1c5a      	adds	r2, r3, #1
 8008a0e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008a12:	612a      	str	r2, [r5, #16]
 8008a14:	2201      	movs	r2, #1
 8008a16:	615a      	str	r2, [r3, #20]
 8008a18:	2f02      	cmp	r7, #2
 8008a1a:	f105 0214 	add.w	r2, r5, #20
 8008a1e:	d111      	bne.n	8008a44 <__gethex+0x3ee>
 8008a20:	f8d8 3000 	ldr.w	r3, [r8]
 8008a24:	3b01      	subs	r3, #1
 8008a26:	429e      	cmp	r6, r3
 8008a28:	d127      	bne.n	8008a7a <__gethex+0x424>
 8008a2a:	1171      	asrs	r1, r6, #5
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	f006 061f 	and.w	r6, r6, #31
 8008a32:	fa03 f606 	lsl.w	r6, r3, r6
 8008a36:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a3a:	421e      	tst	r6, r3
 8008a3c:	bf0c      	ite	eq
 8008a3e:	2702      	moveq	r7, #2
 8008a40:	2701      	movne	r7, #1
 8008a42:	e01a      	b.n	8008a7a <__gethex+0x424>
 8008a44:	692b      	ldr	r3, [r5, #16]
 8008a46:	459a      	cmp	sl, r3
 8008a48:	da0a      	bge.n	8008a60 <__gethex+0x40a>
 8008a4a:	2101      	movs	r1, #1
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	f7ff fdb7 	bl	80085c0 <rshift>
 8008a52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a56:	3401      	adds	r4, #1
 8008a58:	429c      	cmp	r4, r3
 8008a5a:	f73f af2c 	bgt.w	80088b6 <__gethex+0x260>
 8008a5e:	e00b      	b.n	8008a78 <__gethex+0x422>
 8008a60:	f016 061f 	ands.w	r6, r6, #31
 8008a64:	d008      	beq.n	8008a78 <__gethex+0x422>
 8008a66:	4491      	add	r9, r2
 8008a68:	f1c6 0620 	rsb	r6, r6, #32
 8008a6c:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8008a70:	f000 fa25 	bl	8008ebe <__hi0bits>
 8008a74:	42b0      	cmp	r0, r6
 8008a76:	dbe8      	blt.n	8008a4a <__gethex+0x3f4>
 8008a78:	2701      	movs	r7, #1
 8008a7a:	f047 0720 	orr.w	r7, r7, #32
 8008a7e:	e001      	b.n	8008a84 <__gethex+0x42e>
 8008a80:	f047 0710 	orr.w	r7, r7, #16
 8008a84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a86:	601d      	str	r5, [r3, #0]
 8008a88:	9b06      	ldr	r3, [sp, #24]
 8008a8a:	4638      	mov	r0, r7
 8008a8c:	601c      	str	r4, [r3, #0]
 8008a8e:	b00b      	add	sp, #44	; 0x2c
 8008a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a94 <L_shift>:
 8008a94:	f1c2 0208 	rsb	r2, r2, #8
 8008a98:	0092      	lsls	r2, r2, #2
 8008a9a:	b570      	push	{r4, r5, r6, lr}
 8008a9c:	f1c2 0620 	rsb	r6, r2, #32
 8008aa0:	6843      	ldr	r3, [r0, #4]
 8008aa2:	6805      	ldr	r5, [r0, #0]
 8008aa4:	fa03 f406 	lsl.w	r4, r3, r6
 8008aa8:	432c      	orrs	r4, r5
 8008aaa:	40d3      	lsrs	r3, r2
 8008aac:	6004      	str	r4, [r0, #0]
 8008aae:	f840 3f04 	str.w	r3, [r0, #4]!
 8008ab2:	4288      	cmp	r0, r1
 8008ab4:	d3f4      	bcc.n	8008aa0 <L_shift+0xc>
 8008ab6:	bd70      	pop	{r4, r5, r6, pc}

08008ab8 <__match>:
 8008ab8:	b530      	push	{r4, r5, lr}
 8008aba:	6803      	ldr	r3, [r0, #0]
 8008abc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	b14c      	cbz	r4, 8008ad8 <__match+0x20>
 8008ac4:	781a      	ldrb	r2, [r3, #0]
 8008ac6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008aca:	2d19      	cmp	r5, #25
 8008acc:	bf98      	it	ls
 8008ace:	3220      	addls	r2, #32
 8008ad0:	42a2      	cmp	r2, r4
 8008ad2:	d0f3      	beq.n	8008abc <__match+0x4>
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	bd30      	pop	{r4, r5, pc}
 8008ad8:	6003      	str	r3, [r0, #0]
 8008ada:	2001      	movs	r0, #1
 8008adc:	bd30      	pop	{r4, r5, pc}

08008ade <__hexnan>:
 8008ade:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae2:	680b      	ldr	r3, [r1, #0]
 8008ae4:	f8d0 b000 	ldr.w	fp, [r0]
 8008ae8:	115e      	asrs	r6, r3, #5
 8008aea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008aee:	f013 031f 	ands.w	r3, r3, #31
 8008af2:	b085      	sub	sp, #20
 8008af4:	bf18      	it	ne
 8008af6:	3604      	addne	r6, #4
 8008af8:	1f35      	subs	r5, r6, #4
 8008afa:	4617      	mov	r7, r2
 8008afc:	2200      	movs	r2, #0
 8008afe:	4682      	mov	sl, r0
 8008b00:	9301      	str	r3, [sp, #4]
 8008b02:	f846 2c04 	str.w	r2, [r6, #-4]
 8008b06:	46a8      	mov	r8, r5
 8008b08:	462c      	mov	r4, r5
 8008b0a:	9200      	str	r2, [sp, #0]
 8008b0c:	4691      	mov	r9, r2
 8008b0e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 8008b12:	2900      	cmp	r1, #0
 8008b14:	d03c      	beq.n	8008b90 <__hexnan+0xb2>
 8008b16:	4608      	mov	r0, r1
 8008b18:	9203      	str	r2, [sp, #12]
 8008b1a:	9102      	str	r1, [sp, #8]
 8008b1c:	f7ff fd86 	bl	800862c <__hexdig_fun>
 8008b20:	9a03      	ldr	r2, [sp, #12]
 8008b22:	bb00      	cbnz	r0, 8008b66 <__hexnan+0x88>
 8008b24:	9902      	ldr	r1, [sp, #8]
 8008b26:	2920      	cmp	r1, #32
 8008b28:	d816      	bhi.n	8008b58 <__hexnan+0x7a>
 8008b2a:	9b00      	ldr	r3, [sp, #0]
 8008b2c:	4599      	cmp	r9, r3
 8008b2e:	ddee      	ble.n	8008b0e <__hexnan+0x30>
 8008b30:	4544      	cmp	r4, r8
 8008b32:	d205      	bcs.n	8008b40 <__hexnan+0x62>
 8008b34:	2a07      	cmp	r2, #7
 8008b36:	dc03      	bgt.n	8008b40 <__hexnan+0x62>
 8008b38:	4641      	mov	r1, r8
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f7ff ffaa 	bl	8008a94 <L_shift>
 8008b40:	42bc      	cmp	r4, r7
 8008b42:	d923      	bls.n	8008b8c <__hexnan+0xae>
 8008b44:	2300      	movs	r3, #0
 8008b46:	f1a4 0804 	sub.w	r8, r4, #4
 8008b4a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b4e:	f8cd 9000 	str.w	r9, [sp]
 8008b52:	4644      	mov	r4, r8
 8008b54:	461a      	mov	r2, r3
 8008b56:	e7da      	b.n	8008b0e <__hexnan+0x30>
 8008b58:	2929      	cmp	r1, #41	; 0x29
 8008b5a:	d148      	bne.n	8008bee <__hexnan+0x110>
 8008b5c:	f10b 0301 	add.w	r3, fp, #1
 8008b60:	f8ca 3000 	str.w	r3, [sl]
 8008b64:	e014      	b.n	8008b90 <__hexnan+0xb2>
 8008b66:	3201      	adds	r2, #1
 8008b68:	2a08      	cmp	r2, #8
 8008b6a:	f109 0901 	add.w	r9, r9, #1
 8008b6e:	dd06      	ble.n	8008b7e <__hexnan+0xa0>
 8008b70:	42bc      	cmp	r4, r7
 8008b72:	d9cc      	bls.n	8008b0e <__hexnan+0x30>
 8008b74:	2300      	movs	r3, #0
 8008b76:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	3c04      	subs	r4, #4
 8008b7e:	6821      	ldr	r1, [r4, #0]
 8008b80:	f000 000f 	and.w	r0, r0, #15
 8008b84:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8008b88:	6020      	str	r0, [r4, #0]
 8008b8a:	e7c0      	b.n	8008b0e <__hexnan+0x30>
 8008b8c:	2208      	movs	r2, #8
 8008b8e:	e7be      	b.n	8008b0e <__hexnan+0x30>
 8008b90:	f1b9 0f00 	cmp.w	r9, #0
 8008b94:	d02b      	beq.n	8008bee <__hexnan+0x110>
 8008b96:	4544      	cmp	r4, r8
 8008b98:	d205      	bcs.n	8008ba6 <__hexnan+0xc8>
 8008b9a:	2a07      	cmp	r2, #7
 8008b9c:	dc03      	bgt.n	8008ba6 <__hexnan+0xc8>
 8008b9e:	4641      	mov	r1, r8
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f7ff ff77 	bl	8008a94 <L_shift>
 8008ba6:	42bc      	cmp	r4, r7
 8008ba8:	d90c      	bls.n	8008bc4 <__hexnan+0xe6>
 8008baa:	463b      	mov	r3, r7
 8008bac:	f854 2b04 	ldr.w	r2, [r4], #4
 8008bb0:	f843 2b04 	str.w	r2, [r3], #4
 8008bb4:	42a5      	cmp	r5, r4
 8008bb6:	d2f9      	bcs.n	8008bac <__hexnan+0xce>
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f843 2b04 	str.w	r2, [r3], #4
 8008bbe:	429d      	cmp	r5, r3
 8008bc0:	d2fb      	bcs.n	8008bba <__hexnan+0xdc>
 8008bc2:	e00b      	b.n	8008bdc <__hexnan+0xfe>
 8008bc4:	9b01      	ldr	r3, [sp, #4]
 8008bc6:	b14b      	cbz	r3, 8008bdc <__hexnan+0xfe>
 8008bc8:	f1c3 0220 	rsb	r2, r3, #32
 8008bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd0:	40d3      	lsrs	r3, r2
 8008bd2:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	f846 3c04 	str.w	r3, [r6, #-4]
 8008bdc:	682b      	ldr	r3, [r5, #0]
 8008bde:	b943      	cbnz	r3, 8008bf2 <__hexnan+0x114>
 8008be0:	42bd      	cmp	r5, r7
 8008be2:	d102      	bne.n	8008bea <__hexnan+0x10c>
 8008be4:	2301      	movs	r3, #1
 8008be6:	602b      	str	r3, [r5, #0]
 8008be8:	e003      	b.n	8008bf2 <__hexnan+0x114>
 8008bea:	3d04      	subs	r5, #4
 8008bec:	e7f6      	b.n	8008bdc <__hexnan+0xfe>
 8008bee:	2004      	movs	r0, #4
 8008bf0:	e000      	b.n	8008bf4 <__hexnan+0x116>
 8008bf2:	2005      	movs	r0, #5
 8008bf4:	b005      	add	sp, #20
 8008bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08008bfc <__locale_charset>:
 8008bfc:	4800      	ldr	r0, [pc, #0]	; (8008c00 <__locale_charset+0x4>)
 8008bfe:	4770      	bx	lr
 8008c00:	20000544 	.word	0x20000544

08008c04 <__locale_mb_cur_max>:
 8008c04:	4b01      	ldr	r3, [pc, #4]	; (8008c0c <__locale_mb_cur_max+0x8>)
 8008c06:	6818      	ldr	r0, [r3, #0]
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	20000564 	.word	0x20000564

08008c10 <_localeconv_r>:
 8008c10:	4800      	ldr	r0, [pc, #0]	; (8008c14 <_localeconv_r+0x4>)
 8008c12:	4770      	bx	lr
 8008c14:	2000050c 	.word	0x2000050c

08008c18 <__swhatbuf_r>:
 8008c18:	b570      	push	{r4, r5, r6, lr}
 8008c1a:	460e      	mov	r6, r1
 8008c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c20:	2900      	cmp	r1, #0
 8008c22:	b090      	sub	sp, #64	; 0x40
 8008c24:	4614      	mov	r4, r2
 8008c26:	461d      	mov	r5, r3
 8008c28:	da0a      	bge.n	8008c40 <__swhatbuf_r+0x28>
 8008c2a:	89b3      	ldrh	r3, [r6, #12]
 8008c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c30:	2200      	movs	r2, #0
 8008c32:	b298      	uxth	r0, r3
 8008c34:	602a      	str	r2, [r5, #0]
 8008c36:	b1b0      	cbz	r0, 8008c66 <__swhatbuf_r+0x4e>
 8008c38:	2340      	movs	r3, #64	; 0x40
 8008c3a:	6023      	str	r3, [r4, #0]
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	e015      	b.n	8008c6c <__swhatbuf_r+0x54>
 8008c40:	aa01      	add	r2, sp, #4
 8008c42:	f001 f80b 	bl	8009c5c <_fstat_r>
 8008c46:	2800      	cmp	r0, #0
 8008c48:	dbef      	blt.n	8008c2a <__swhatbuf_r+0x12>
 8008c4a:	9a02      	ldr	r2, [sp, #8]
 8008c4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c54:	425a      	negs	r2, r3
 8008c56:	415a      	adcs	r2, r3
 8008c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c5c:	602a      	str	r2, [r5, #0]
 8008c5e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008c62:	6023      	str	r3, [r4, #0]
 8008c64:	e002      	b.n	8008c6c <__swhatbuf_r+0x54>
 8008c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c6a:	6023      	str	r3, [r4, #0]
 8008c6c:	b010      	add	sp, #64	; 0x40
 8008c6e:	bd70      	pop	{r4, r5, r6, pc}

08008c70 <__smakebuf_r>:
 8008c70:	898b      	ldrh	r3, [r1, #12]
 8008c72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c74:	079e      	lsls	r6, r3, #30
 8008c76:	4605      	mov	r5, r0
 8008c78:	460c      	mov	r4, r1
 8008c7a:	d410      	bmi.n	8008c9e <__smakebuf_r+0x2e>
 8008c7c:	ab01      	add	r3, sp, #4
 8008c7e:	466a      	mov	r2, sp
 8008c80:	f7ff ffca 	bl	8008c18 <__swhatbuf_r>
 8008c84:	9900      	ldr	r1, [sp, #0]
 8008c86:	4606      	mov	r6, r0
 8008c88:	4628      	mov	r0, r5
 8008c8a:	f7fa ff7f 	bl	8003b8c <_malloc_r>
 8008c8e:	b968      	cbnz	r0, 8008cac <__smakebuf_r+0x3c>
 8008c90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c94:	059a      	lsls	r2, r3, #22
 8008c96:	d422      	bmi.n	8008cde <__smakebuf_r+0x6e>
 8008c98:	f043 0302 	orr.w	r3, r3, #2
 8008c9c:	81a3      	strh	r3, [r4, #12]
 8008c9e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ca2:	6023      	str	r3, [r4, #0]
 8008ca4:	6123      	str	r3, [r4, #16]
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	6163      	str	r3, [r4, #20]
 8008caa:	e018      	b.n	8008cde <__smakebuf_r+0x6e>
 8008cac:	4b0d      	ldr	r3, [pc, #52]	; (8008ce4 <__smakebuf_r+0x74>)
 8008cae:	62ab      	str	r3, [r5, #40]	; 0x28
 8008cb0:	89a3      	ldrh	r3, [r4, #12]
 8008cb2:	6020      	str	r0, [r4, #0]
 8008cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cb8:	81a3      	strh	r3, [r4, #12]
 8008cba:	9b00      	ldr	r3, [sp, #0]
 8008cbc:	6163      	str	r3, [r4, #20]
 8008cbe:	9b01      	ldr	r3, [sp, #4]
 8008cc0:	6120      	str	r0, [r4, #16]
 8008cc2:	b14b      	cbz	r3, 8008cd8 <__smakebuf_r+0x68>
 8008cc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cc8:	4628      	mov	r0, r5
 8008cca:	f000 ffd9 	bl	8009c80 <_isatty_r>
 8008cce:	b118      	cbz	r0, 8008cd8 <__smakebuf_r+0x68>
 8008cd0:	89a3      	ldrh	r3, [r4, #12]
 8008cd2:	f043 0301 	orr.w	r3, r3, #1
 8008cd6:	81a3      	strh	r3, [r4, #12]
 8008cd8:	89a0      	ldrh	r0, [r4, #12]
 8008cda:	4330      	orrs	r0, r6
 8008cdc:	81a0      	strh	r0, [r4, #12]
 8008cde:	b002      	add	sp, #8
 8008ce0:	bd70      	pop	{r4, r5, r6, pc}
 8008ce2:	bf00      	nop
 8008ce4:	08007f65 	.word	0x08007f65

08008ce8 <memcpy>:
 8008ce8:	b510      	push	{r4, lr}
 8008cea:	1e43      	subs	r3, r0, #1
 8008cec:	440a      	add	r2, r1
 8008cee:	4291      	cmp	r1, r2
 8008cf0:	d004      	beq.n	8008cfc <memcpy+0x14>
 8008cf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cfa:	e7f8      	b.n	8008cee <memcpy+0x6>
 8008cfc:	bd10      	pop	{r4, pc}

08008cfe <memmove>:
 8008cfe:	4288      	cmp	r0, r1
 8008d00:	b510      	push	{r4, lr}
 8008d02:	eb01 0302 	add.w	r3, r1, r2
 8008d06:	d801      	bhi.n	8008d0c <memmove+0xe>
 8008d08:	1e42      	subs	r2, r0, #1
 8008d0a:	e00b      	b.n	8008d24 <memmove+0x26>
 8008d0c:	4298      	cmp	r0, r3
 8008d0e:	d2fb      	bcs.n	8008d08 <memmove+0xa>
 8008d10:	1881      	adds	r1, r0, r2
 8008d12:	1ad2      	subs	r2, r2, r3
 8008d14:	42d3      	cmn	r3, r2
 8008d16:	d004      	beq.n	8008d22 <memmove+0x24>
 8008d18:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d1c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008d20:	e7f8      	b.n	8008d14 <memmove+0x16>
 8008d22:	bd10      	pop	{r4, pc}
 8008d24:	4299      	cmp	r1, r3
 8008d26:	d004      	beq.n	8008d32 <memmove+0x34>
 8008d28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d2c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008d30:	e7f8      	b.n	8008d24 <memmove+0x26>
 8008d32:	bd10      	pop	{r4, pc}

08008d34 <_Balloc>:
 8008d34:	b570      	push	{r4, r5, r6, lr}
 8008d36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d38:	4604      	mov	r4, r0
 8008d3a:	460e      	mov	r6, r1
 8008d3c:	b93d      	cbnz	r5, 8008d4e <_Balloc+0x1a>
 8008d3e:	2010      	movs	r0, #16
 8008d40:	f7fa ff1c 	bl	8003b7c <malloc>
 8008d44:	6260      	str	r0, [r4, #36]	; 0x24
 8008d46:	6045      	str	r5, [r0, #4]
 8008d48:	6085      	str	r5, [r0, #8]
 8008d4a:	6005      	str	r5, [r0, #0]
 8008d4c:	60c5      	str	r5, [r0, #12]
 8008d4e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008d50:	68eb      	ldr	r3, [r5, #12]
 8008d52:	b143      	cbz	r3, 8008d66 <_Balloc+0x32>
 8008d54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008d5c:	b178      	cbz	r0, 8008d7e <_Balloc+0x4a>
 8008d5e:	6802      	ldr	r2, [r0, #0]
 8008d60:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008d64:	e017      	b.n	8008d96 <_Balloc+0x62>
 8008d66:	2221      	movs	r2, #33	; 0x21
 8008d68:	2104      	movs	r1, #4
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	f000 fe96 	bl	8009a9c <_calloc_r>
 8008d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d72:	60e8      	str	r0, [r5, #12]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1ec      	bne.n	8008d54 <_Balloc+0x20>
 8008d7a:	2000      	movs	r0, #0
 8008d7c:	bd70      	pop	{r4, r5, r6, pc}
 8008d7e:	2101      	movs	r1, #1
 8008d80:	fa01 f506 	lsl.w	r5, r1, r6
 8008d84:	1d6a      	adds	r2, r5, #5
 8008d86:	0092      	lsls	r2, r2, #2
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f000 fe87 	bl	8009a9c <_calloc_r>
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	d0f3      	beq.n	8008d7a <_Balloc+0x46>
 8008d92:	6046      	str	r6, [r0, #4]
 8008d94:	6085      	str	r5, [r0, #8]
 8008d96:	2300      	movs	r3, #0
 8008d98:	6103      	str	r3, [r0, #16]
 8008d9a:	60c3      	str	r3, [r0, #12]
 8008d9c:	bd70      	pop	{r4, r5, r6, pc}

08008d9e <_Bfree>:
 8008d9e:	b570      	push	{r4, r5, r6, lr}
 8008da0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008da2:	4606      	mov	r6, r0
 8008da4:	460d      	mov	r5, r1
 8008da6:	b93c      	cbnz	r4, 8008db8 <_Bfree+0x1a>
 8008da8:	2010      	movs	r0, #16
 8008daa:	f7fa fee7 	bl	8003b7c <malloc>
 8008dae:	6270      	str	r0, [r6, #36]	; 0x24
 8008db0:	6044      	str	r4, [r0, #4]
 8008db2:	6084      	str	r4, [r0, #8]
 8008db4:	6004      	str	r4, [r0, #0]
 8008db6:	60c4      	str	r4, [r0, #12]
 8008db8:	b13d      	cbz	r5, 8008dca <_Bfree+0x2c>
 8008dba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008dbc:	686a      	ldr	r2, [r5, #4]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008dc4:	6029      	str	r1, [r5, #0]
 8008dc6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008dca:	bd70      	pop	{r4, r5, r6, pc}

08008dcc <__multadd>:
 8008dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd0:	690d      	ldr	r5, [r1, #16]
 8008dd2:	461f      	mov	r7, r3
 8008dd4:	4606      	mov	r6, r0
 8008dd6:	460c      	mov	r4, r1
 8008dd8:	f101 0e14 	add.w	lr, r1, #20
 8008ddc:	2300      	movs	r3, #0
 8008dde:	f8de 0000 	ldr.w	r0, [lr]
 8008de2:	b281      	uxth	r1, r0
 8008de4:	fb02 7101 	mla	r1, r2, r1, r7
 8008de8:	0c0f      	lsrs	r7, r1, #16
 8008dea:	0c00      	lsrs	r0, r0, #16
 8008dec:	fb02 7000 	mla	r0, r2, r0, r7
 8008df0:	b289      	uxth	r1, r1
 8008df2:	3301      	adds	r3, #1
 8008df4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008df8:	429d      	cmp	r5, r3
 8008dfa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008dfe:	f84e 1b04 	str.w	r1, [lr], #4
 8008e02:	dcec      	bgt.n	8008dde <__multadd+0x12>
 8008e04:	b1d7      	cbz	r7, 8008e3c <__multadd+0x70>
 8008e06:	68a3      	ldr	r3, [r4, #8]
 8008e08:	429d      	cmp	r5, r3
 8008e0a:	db12      	blt.n	8008e32 <__multadd+0x66>
 8008e0c:	6861      	ldr	r1, [r4, #4]
 8008e0e:	4630      	mov	r0, r6
 8008e10:	3101      	adds	r1, #1
 8008e12:	f7ff ff8f 	bl	8008d34 <_Balloc>
 8008e16:	6922      	ldr	r2, [r4, #16]
 8008e18:	3202      	adds	r2, #2
 8008e1a:	f104 010c 	add.w	r1, r4, #12
 8008e1e:	4680      	mov	r8, r0
 8008e20:	0092      	lsls	r2, r2, #2
 8008e22:	300c      	adds	r0, #12
 8008e24:	f7ff ff60 	bl	8008ce8 <memcpy>
 8008e28:	4621      	mov	r1, r4
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	f7ff ffb7 	bl	8008d9e <_Bfree>
 8008e30:	4644      	mov	r4, r8
 8008e32:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e36:	3501      	adds	r5, #1
 8008e38:	615f      	str	r7, [r3, #20]
 8008e3a:	6125      	str	r5, [r4, #16]
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008e42 <__s2b>:
 8008e42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e46:	460c      	mov	r4, r1
 8008e48:	4615      	mov	r5, r2
 8008e4a:	461f      	mov	r7, r3
 8008e4c:	2209      	movs	r2, #9
 8008e4e:	3308      	adds	r3, #8
 8008e50:	4606      	mov	r6, r0
 8008e52:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e56:	2100      	movs	r1, #0
 8008e58:	2201      	movs	r2, #1
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	da02      	bge.n	8008e64 <__s2b+0x22>
 8008e5e:	0052      	lsls	r2, r2, #1
 8008e60:	3101      	adds	r1, #1
 8008e62:	e7fa      	b.n	8008e5a <__s2b+0x18>
 8008e64:	4630      	mov	r0, r6
 8008e66:	f7ff ff65 	bl	8008d34 <_Balloc>
 8008e6a:	9b08      	ldr	r3, [sp, #32]
 8008e6c:	6143      	str	r3, [r0, #20]
 8008e6e:	2d09      	cmp	r5, #9
 8008e70:	f04f 0301 	mov.w	r3, #1
 8008e74:	6103      	str	r3, [r0, #16]
 8008e76:	dd11      	ble.n	8008e9c <__s2b+0x5a>
 8008e78:	f104 0809 	add.w	r8, r4, #9
 8008e7c:	46c1      	mov	r9, r8
 8008e7e:	442c      	add	r4, r5
 8008e80:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008e84:	4601      	mov	r1, r0
 8008e86:	3b30      	subs	r3, #48	; 0x30
 8008e88:	220a      	movs	r2, #10
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	f7ff ff9e 	bl	8008dcc <__multadd>
 8008e90:	45a1      	cmp	r9, r4
 8008e92:	d1f5      	bne.n	8008e80 <__s2b+0x3e>
 8008e94:	eb08 0405 	add.w	r4, r8, r5
 8008e98:	3c08      	subs	r4, #8
 8008e9a:	e001      	b.n	8008ea0 <__s2b+0x5e>
 8008e9c:	340a      	adds	r4, #10
 8008e9e:	2509      	movs	r5, #9
 8008ea0:	1b2d      	subs	r5, r5, r4
 8008ea2:	1963      	adds	r3, r4, r5
 8008ea4:	429f      	cmp	r7, r3
 8008ea6:	dd08      	ble.n	8008eba <__s2b+0x78>
 8008ea8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008eac:	4601      	mov	r1, r0
 8008eae:	3b30      	subs	r3, #48	; 0x30
 8008eb0:	220a      	movs	r2, #10
 8008eb2:	4630      	mov	r0, r6
 8008eb4:	f7ff ff8a 	bl	8008dcc <__multadd>
 8008eb8:	e7f3      	b.n	8008ea2 <__s2b+0x60>
 8008eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008ebe <__hi0bits>:
 8008ebe:	0c03      	lsrs	r3, r0, #16
 8008ec0:	041b      	lsls	r3, r3, #16
 8008ec2:	b913      	cbnz	r3, 8008eca <__hi0bits+0xc>
 8008ec4:	0400      	lsls	r0, r0, #16
 8008ec6:	2310      	movs	r3, #16
 8008ec8:	e000      	b.n	8008ecc <__hi0bits+0xe>
 8008eca:	2300      	movs	r3, #0
 8008ecc:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008ed0:	bf04      	itt	eq
 8008ed2:	0200      	lsleq	r0, r0, #8
 8008ed4:	3308      	addeq	r3, #8
 8008ed6:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008eda:	bf04      	itt	eq
 8008edc:	0100      	lsleq	r0, r0, #4
 8008ede:	3304      	addeq	r3, #4
 8008ee0:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ee4:	bf04      	itt	eq
 8008ee6:	0080      	lsleq	r0, r0, #2
 8008ee8:	3302      	addeq	r3, #2
 8008eea:	2800      	cmp	r0, #0
 8008eec:	db03      	blt.n	8008ef6 <__hi0bits+0x38>
 8008eee:	0042      	lsls	r2, r0, #1
 8008ef0:	d503      	bpl.n	8008efa <__hi0bits+0x3c>
 8008ef2:	1c58      	adds	r0, r3, #1
 8008ef4:	4770      	bx	lr
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	4770      	bx	lr
 8008efa:	2020      	movs	r0, #32
 8008efc:	4770      	bx	lr

08008efe <__lo0bits>:
 8008efe:	6803      	ldr	r3, [r0, #0]
 8008f00:	f013 0207 	ands.w	r2, r3, #7
 8008f04:	d00b      	beq.n	8008f1e <__lo0bits+0x20>
 8008f06:	07d9      	lsls	r1, r3, #31
 8008f08:	d422      	bmi.n	8008f50 <__lo0bits+0x52>
 8008f0a:	079a      	lsls	r2, r3, #30
 8008f0c:	bf4b      	itete	mi
 8008f0e:	085b      	lsrmi	r3, r3, #1
 8008f10:	089b      	lsrpl	r3, r3, #2
 8008f12:	6003      	strmi	r3, [r0, #0]
 8008f14:	6003      	strpl	r3, [r0, #0]
 8008f16:	bf4c      	ite	mi
 8008f18:	2001      	movmi	r0, #1
 8008f1a:	2002      	movpl	r0, #2
 8008f1c:	4770      	bx	lr
 8008f1e:	b299      	uxth	r1, r3
 8008f20:	b909      	cbnz	r1, 8008f26 <__lo0bits+0x28>
 8008f22:	0c1b      	lsrs	r3, r3, #16
 8008f24:	2210      	movs	r2, #16
 8008f26:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008f2a:	bf04      	itt	eq
 8008f2c:	0a1b      	lsreq	r3, r3, #8
 8008f2e:	3208      	addeq	r2, #8
 8008f30:	0719      	lsls	r1, r3, #28
 8008f32:	bf04      	itt	eq
 8008f34:	091b      	lsreq	r3, r3, #4
 8008f36:	3204      	addeq	r2, #4
 8008f38:	0799      	lsls	r1, r3, #30
 8008f3a:	bf04      	itt	eq
 8008f3c:	089b      	lsreq	r3, r3, #2
 8008f3e:	3202      	addeq	r2, #2
 8008f40:	07d9      	lsls	r1, r3, #31
 8008f42:	d402      	bmi.n	8008f4a <__lo0bits+0x4c>
 8008f44:	085b      	lsrs	r3, r3, #1
 8008f46:	d005      	beq.n	8008f54 <__lo0bits+0x56>
 8008f48:	3201      	adds	r2, #1
 8008f4a:	6003      	str	r3, [r0, #0]
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	4770      	bx	lr
 8008f50:	2000      	movs	r0, #0
 8008f52:	4770      	bx	lr
 8008f54:	2020      	movs	r0, #32
 8008f56:	4770      	bx	lr

08008f58 <__i2b>:
 8008f58:	b510      	push	{r4, lr}
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	2101      	movs	r1, #1
 8008f5e:	f7ff fee9 	bl	8008d34 <_Balloc>
 8008f62:	2201      	movs	r2, #1
 8008f64:	6144      	str	r4, [r0, #20]
 8008f66:	6102      	str	r2, [r0, #16]
 8008f68:	bd10      	pop	{r4, pc}

08008f6a <__multiply>:
 8008f6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f6e:	4614      	mov	r4, r2
 8008f70:	690a      	ldr	r2, [r1, #16]
 8008f72:	6923      	ldr	r3, [r4, #16]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	bfb8      	it	lt
 8008f78:	460b      	movlt	r3, r1
 8008f7a:	4688      	mov	r8, r1
 8008f7c:	bfbc      	itt	lt
 8008f7e:	46a0      	movlt	r8, r4
 8008f80:	461c      	movlt	r4, r3
 8008f82:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008f86:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008f8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f8e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008f92:	eb07 0609 	add.w	r6, r7, r9
 8008f96:	429e      	cmp	r6, r3
 8008f98:	bfc8      	it	gt
 8008f9a:	3101      	addgt	r1, #1
 8008f9c:	f7ff feca 	bl	8008d34 <_Balloc>
 8008fa0:	f100 0514 	add.w	r5, r0, #20
 8008fa4:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8008fa8:	462b      	mov	r3, r5
 8008faa:	2200      	movs	r2, #0
 8008fac:	4563      	cmp	r3, ip
 8008fae:	d202      	bcs.n	8008fb6 <__multiply+0x4c>
 8008fb0:	f843 2b04 	str.w	r2, [r3], #4
 8008fb4:	e7fa      	b.n	8008fac <__multiply+0x42>
 8008fb6:	f104 0214 	add.w	r2, r4, #20
 8008fba:	f108 0114 	add.w	r1, r8, #20
 8008fbe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008fc2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	9b00      	ldr	r3, [sp, #0]
 8008fca:	9201      	str	r2, [sp, #4]
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d957      	bls.n	8009080 <__multiply+0x116>
 8008fd0:	f8b2 b000 	ldrh.w	fp, [r2]
 8008fd4:	f1bb 0f00 	cmp.w	fp, #0
 8008fd8:	d023      	beq.n	8009022 <__multiply+0xb8>
 8008fda:	4689      	mov	r9, r1
 8008fdc:	46ae      	mov	lr, r5
 8008fde:	f04f 0800 	mov.w	r8, #0
 8008fe2:	f859 4b04 	ldr.w	r4, [r9], #4
 8008fe6:	f8be a000 	ldrh.w	sl, [lr]
 8008fea:	b2a3      	uxth	r3, r4
 8008fec:	fb0b a303 	mla	r3, fp, r3, sl
 8008ff0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008ff4:	f8de 4000 	ldr.w	r4, [lr]
 8008ff8:	4443      	add	r3, r8
 8008ffa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008ffe:	fb0b 840a 	mla	r4, fp, sl, r8
 8009002:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009006:	46f2      	mov	sl, lr
 8009008:	b29b      	uxth	r3, r3
 800900a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800900e:	454f      	cmp	r7, r9
 8009010:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009014:	f84a 3b04 	str.w	r3, [sl], #4
 8009018:	d901      	bls.n	800901e <__multiply+0xb4>
 800901a:	46d6      	mov	lr, sl
 800901c:	e7e1      	b.n	8008fe2 <__multiply+0x78>
 800901e:	f8ce 8004 	str.w	r8, [lr, #4]
 8009022:	9b01      	ldr	r3, [sp, #4]
 8009024:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009028:	3204      	adds	r2, #4
 800902a:	f1ba 0f00 	cmp.w	sl, #0
 800902e:	d021      	beq.n	8009074 <__multiply+0x10a>
 8009030:	682b      	ldr	r3, [r5, #0]
 8009032:	462c      	mov	r4, r5
 8009034:	4689      	mov	r9, r1
 8009036:	f04f 0800 	mov.w	r8, #0
 800903a:	f8b9 e000 	ldrh.w	lr, [r9]
 800903e:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8009042:	fb0a be0e 	mla	lr, sl, lr, fp
 8009046:	44f0      	add	r8, lr
 8009048:	46a3      	mov	fp, r4
 800904a:	b29b      	uxth	r3, r3
 800904c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8009050:	f84b 3b04 	str.w	r3, [fp], #4
 8009054:	f859 3b04 	ldr.w	r3, [r9], #4
 8009058:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 800905c:	0c1b      	lsrs	r3, r3, #16
 800905e:	fb0a e303 	mla	r3, sl, r3, lr
 8009062:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8009066:	454f      	cmp	r7, r9
 8009068:	ea4f 4813 	mov.w	r8, r3, lsr #16
 800906c:	d901      	bls.n	8009072 <__multiply+0x108>
 800906e:	465c      	mov	r4, fp
 8009070:	e7e3      	b.n	800903a <__multiply+0xd0>
 8009072:	6063      	str	r3, [r4, #4]
 8009074:	3504      	adds	r5, #4
 8009076:	e7a7      	b.n	8008fc8 <__multiply+0x5e>
 8009078:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 800907c:	b913      	cbnz	r3, 8009084 <__multiply+0x11a>
 800907e:	3e01      	subs	r6, #1
 8009080:	2e00      	cmp	r6, #0
 8009082:	dcf9      	bgt.n	8009078 <__multiply+0x10e>
 8009084:	6106      	str	r6, [r0, #16]
 8009086:	b003      	add	sp, #12
 8009088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800908c <__pow5mult>:
 800908c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009090:	4615      	mov	r5, r2
 8009092:	f012 0203 	ands.w	r2, r2, #3
 8009096:	4606      	mov	r6, r0
 8009098:	460f      	mov	r7, r1
 800909a:	d007      	beq.n	80090ac <__pow5mult+0x20>
 800909c:	3a01      	subs	r2, #1
 800909e:	4c21      	ldr	r4, [pc, #132]	; (8009124 <__pow5mult+0x98>)
 80090a0:	2300      	movs	r3, #0
 80090a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090a6:	f7ff fe91 	bl	8008dcc <__multadd>
 80090aa:	4607      	mov	r7, r0
 80090ac:	10ad      	asrs	r5, r5, #2
 80090ae:	d036      	beq.n	800911e <__pow5mult+0x92>
 80090b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80090b2:	b93c      	cbnz	r4, 80090c4 <__pow5mult+0x38>
 80090b4:	2010      	movs	r0, #16
 80090b6:	f7fa fd61 	bl	8003b7c <malloc>
 80090ba:	6270      	str	r0, [r6, #36]	; 0x24
 80090bc:	6044      	str	r4, [r0, #4]
 80090be:	6084      	str	r4, [r0, #8]
 80090c0:	6004      	str	r4, [r0, #0]
 80090c2:	60c4      	str	r4, [r0, #12]
 80090c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80090c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090cc:	b94c      	cbnz	r4, 80090e2 <__pow5mult+0x56>
 80090ce:	f240 2171 	movw	r1, #625	; 0x271
 80090d2:	4630      	mov	r0, r6
 80090d4:	f7ff ff40 	bl	8008f58 <__i2b>
 80090d8:	2300      	movs	r3, #0
 80090da:	f8c8 0008 	str.w	r0, [r8, #8]
 80090de:	4604      	mov	r4, r0
 80090e0:	6003      	str	r3, [r0, #0]
 80090e2:	f04f 0800 	mov.w	r8, #0
 80090e6:	07eb      	lsls	r3, r5, #31
 80090e8:	d50a      	bpl.n	8009100 <__pow5mult+0x74>
 80090ea:	4639      	mov	r1, r7
 80090ec:	4622      	mov	r2, r4
 80090ee:	4630      	mov	r0, r6
 80090f0:	f7ff ff3b 	bl	8008f6a <__multiply>
 80090f4:	4639      	mov	r1, r7
 80090f6:	4681      	mov	r9, r0
 80090f8:	4630      	mov	r0, r6
 80090fa:	f7ff fe50 	bl	8008d9e <_Bfree>
 80090fe:	464f      	mov	r7, r9
 8009100:	106d      	asrs	r5, r5, #1
 8009102:	d00c      	beq.n	800911e <__pow5mult+0x92>
 8009104:	6820      	ldr	r0, [r4, #0]
 8009106:	b108      	cbz	r0, 800910c <__pow5mult+0x80>
 8009108:	4604      	mov	r4, r0
 800910a:	e7ec      	b.n	80090e6 <__pow5mult+0x5a>
 800910c:	4622      	mov	r2, r4
 800910e:	4621      	mov	r1, r4
 8009110:	4630      	mov	r0, r6
 8009112:	f7ff ff2a 	bl	8008f6a <__multiply>
 8009116:	6020      	str	r0, [r4, #0]
 8009118:	f8c0 8000 	str.w	r8, [r0]
 800911c:	e7f4      	b.n	8009108 <__pow5mult+0x7c>
 800911e:	4638      	mov	r0, r7
 8009120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009124:	0800a298 	.word	0x0800a298

08009128 <__lshift>:
 8009128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800912c:	460c      	mov	r4, r1
 800912e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009132:	6926      	ldr	r6, [r4, #16]
 8009134:	6849      	ldr	r1, [r1, #4]
 8009136:	68a3      	ldr	r3, [r4, #8]
 8009138:	4456      	add	r6, sl
 800913a:	4607      	mov	r7, r0
 800913c:	4691      	mov	r9, r2
 800913e:	1c75      	adds	r5, r6, #1
 8009140:	42ab      	cmp	r3, r5
 8009142:	da02      	bge.n	800914a <__lshift+0x22>
 8009144:	3101      	adds	r1, #1
 8009146:	005b      	lsls	r3, r3, #1
 8009148:	e7fa      	b.n	8009140 <__lshift+0x18>
 800914a:	4638      	mov	r0, r7
 800914c:	f7ff fdf2 	bl	8008d34 <_Balloc>
 8009150:	2300      	movs	r3, #0
 8009152:	4680      	mov	r8, r0
 8009154:	f100 0114 	add.w	r1, r0, #20
 8009158:	461a      	mov	r2, r3
 800915a:	4553      	cmp	r3, sl
 800915c:	da03      	bge.n	8009166 <__lshift+0x3e>
 800915e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009162:	3301      	adds	r3, #1
 8009164:	e7f9      	b.n	800915a <__lshift+0x32>
 8009166:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800916a:	6920      	ldr	r0, [r4, #16]
 800916c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009170:	f019 091f 	ands.w	r9, r9, #31
 8009174:	f104 0114 	add.w	r1, r4, #20
 8009178:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800917c:	d014      	beq.n	80091a8 <__lshift+0x80>
 800917e:	f1c9 0c20 	rsb	ip, r9, #32
 8009182:	2200      	movs	r2, #0
 8009184:	6808      	ldr	r0, [r1, #0]
 8009186:	fa00 f009 	lsl.w	r0, r0, r9
 800918a:	4302      	orrs	r2, r0
 800918c:	469a      	mov	sl, r3
 800918e:	f843 2b04 	str.w	r2, [r3], #4
 8009192:	f851 2b04 	ldr.w	r2, [r1], #4
 8009196:	458e      	cmp	lr, r1
 8009198:	fa22 f20c 	lsr.w	r2, r2, ip
 800919c:	d8f2      	bhi.n	8009184 <__lshift+0x5c>
 800919e:	f8ca 2004 	str.w	r2, [sl, #4]
 80091a2:	b142      	cbz	r2, 80091b6 <__lshift+0x8e>
 80091a4:	1cb5      	adds	r5, r6, #2
 80091a6:	e006      	b.n	80091b6 <__lshift+0x8e>
 80091a8:	3b04      	subs	r3, #4
 80091aa:	f851 2b04 	ldr.w	r2, [r1], #4
 80091ae:	f843 2f04 	str.w	r2, [r3, #4]!
 80091b2:	458e      	cmp	lr, r1
 80091b4:	d8f9      	bhi.n	80091aa <__lshift+0x82>
 80091b6:	3d01      	subs	r5, #1
 80091b8:	4638      	mov	r0, r7
 80091ba:	f8c8 5010 	str.w	r5, [r8, #16]
 80091be:	4621      	mov	r1, r4
 80091c0:	f7ff fded 	bl	8008d9e <_Bfree>
 80091c4:	4640      	mov	r0, r8
 80091c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080091ca <__mcmp>:
 80091ca:	6903      	ldr	r3, [r0, #16]
 80091cc:	690a      	ldr	r2, [r1, #16]
 80091ce:	1a9b      	subs	r3, r3, r2
 80091d0:	b510      	push	{r4, lr}
 80091d2:	d111      	bne.n	80091f8 <__mcmp+0x2e>
 80091d4:	0092      	lsls	r2, r2, #2
 80091d6:	3014      	adds	r0, #20
 80091d8:	3114      	adds	r1, #20
 80091da:	1883      	adds	r3, r0, r2
 80091dc:	440a      	add	r2, r1
 80091de:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80091e2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80091e6:	428c      	cmp	r4, r1
 80091e8:	d002      	beq.n	80091f0 <__mcmp+0x26>
 80091ea:	d307      	bcc.n	80091fc <__mcmp+0x32>
 80091ec:	2001      	movs	r0, #1
 80091ee:	bd10      	pop	{r4, pc}
 80091f0:	4298      	cmp	r0, r3
 80091f2:	d3f4      	bcc.n	80091de <__mcmp+0x14>
 80091f4:	2000      	movs	r0, #0
 80091f6:	bd10      	pop	{r4, pc}
 80091f8:	4618      	mov	r0, r3
 80091fa:	bd10      	pop	{r4, pc}
 80091fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009200:	bd10      	pop	{r4, pc}

08009202 <__mdiff>:
 8009202:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009206:	460c      	mov	r4, r1
 8009208:	4607      	mov	r7, r0
 800920a:	4611      	mov	r1, r2
 800920c:	4620      	mov	r0, r4
 800920e:	4615      	mov	r5, r2
 8009210:	f7ff ffdb 	bl	80091ca <__mcmp>
 8009214:	1e06      	subs	r6, r0, #0
 8009216:	d108      	bne.n	800922a <__mdiff+0x28>
 8009218:	4631      	mov	r1, r6
 800921a:	4638      	mov	r0, r7
 800921c:	f7ff fd8a 	bl	8008d34 <_Balloc>
 8009220:	2301      	movs	r3, #1
 8009222:	6103      	str	r3, [r0, #16]
 8009224:	6146      	str	r6, [r0, #20]
 8009226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800922a:	bfbc      	itt	lt
 800922c:	4623      	movlt	r3, r4
 800922e:	462c      	movlt	r4, r5
 8009230:	4638      	mov	r0, r7
 8009232:	6861      	ldr	r1, [r4, #4]
 8009234:	bfba      	itte	lt
 8009236:	461d      	movlt	r5, r3
 8009238:	2601      	movlt	r6, #1
 800923a:	2600      	movge	r6, #0
 800923c:	f7ff fd7a 	bl	8008d34 <_Balloc>
 8009240:	692b      	ldr	r3, [r5, #16]
 8009242:	60c6      	str	r6, [r0, #12]
 8009244:	6926      	ldr	r6, [r4, #16]
 8009246:	f105 0914 	add.w	r9, r5, #20
 800924a:	3414      	adds	r4, #20
 800924c:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 8009250:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009254:	f100 0514 	add.w	r5, r0, #20
 8009258:	f04f 0c00 	mov.w	ip, #0
 800925c:	f854 3b04 	ldr.w	r3, [r4], #4
 8009260:	f859 2b04 	ldr.w	r2, [r9], #4
 8009264:	fa1c f183 	uxtah	r1, ip, r3
 8009268:	fa1f fe82 	uxth.w	lr, r2
 800926c:	0c12      	lsrs	r2, r2, #16
 800926e:	ebce 0101 	rsb	r1, lr, r1
 8009272:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8009276:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800927a:	b289      	uxth	r1, r1
 800927c:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009280:	45c8      	cmp	r8, r9
 8009282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009286:	46a6      	mov	lr, r4
 8009288:	f845 3b04 	str.w	r3, [r5], #4
 800928c:	d8e6      	bhi.n	800925c <__mdiff+0x5a>
 800928e:	45be      	cmp	lr, r7
 8009290:	d20e      	bcs.n	80092b0 <__mdiff+0xae>
 8009292:	f85e 1b04 	ldr.w	r1, [lr], #4
 8009296:	fa1c f281 	uxtah	r2, ip, r1
 800929a:	1413      	asrs	r3, r2, #16
 800929c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 80092a0:	b292      	uxth	r2, r2
 80092a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80092a6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80092aa:	f845 2b04 	str.w	r2, [r5], #4
 80092ae:	e7ee      	b.n	800928e <__mdiff+0x8c>
 80092b0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80092b4:	b90b      	cbnz	r3, 80092ba <__mdiff+0xb8>
 80092b6:	3e01      	subs	r6, #1
 80092b8:	e7fa      	b.n	80092b0 <__mdiff+0xae>
 80092ba:	6106      	str	r6, [r0, #16]
 80092bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080092c0 <__ulp>:
 80092c0:	4b12      	ldr	r3, [pc, #72]	; (800930c <__ulp+0x4c>)
 80092c2:	ee10 2a90 	vmov	r2, s1
 80092c6:	401a      	ands	r2, r3
 80092c8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	dd02      	ble.n	80092d6 <__ulp+0x16>
 80092d0:	2000      	movs	r0, #0
 80092d2:	4619      	mov	r1, r3
 80092d4:	e017      	b.n	8009306 <__ulp+0x46>
 80092d6:	425b      	negs	r3, r3
 80092d8:	151b      	asrs	r3, r3, #20
 80092da:	2b13      	cmp	r3, #19
 80092dc:	f04f 0000 	mov.w	r0, #0
 80092e0:	f04f 0100 	mov.w	r1, #0
 80092e4:	dc04      	bgt.n	80092f0 <__ulp+0x30>
 80092e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80092ea:	fa42 f103 	asr.w	r1, r2, r3
 80092ee:	e00a      	b.n	8009306 <__ulp+0x46>
 80092f0:	3b14      	subs	r3, #20
 80092f2:	2b1e      	cmp	r3, #30
 80092f4:	f04f 0201 	mov.w	r2, #1
 80092f8:	bfda      	itte	le
 80092fa:	f1c3 031f 	rsble	r3, r3, #31
 80092fe:	fa02 f303 	lslle.w	r3, r2, r3
 8009302:	4613      	movgt	r3, r2
 8009304:	4618      	mov	r0, r3
 8009306:	ec41 0b10 	vmov	d0, r0, r1
 800930a:	4770      	bx	lr
 800930c:	7ff00000 	.word	0x7ff00000

08009310 <__b2d>:
 8009310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009312:	6905      	ldr	r5, [r0, #16]
 8009314:	f100 0614 	add.w	r6, r0, #20
 8009318:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 800931c:	1f2f      	subs	r7, r5, #4
 800931e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009322:	4620      	mov	r0, r4
 8009324:	f7ff fdcb 	bl	8008ebe <__hi0bits>
 8009328:	f1c0 0320 	rsb	r3, r0, #32
 800932c:	280a      	cmp	r0, #10
 800932e:	600b      	str	r3, [r1, #0]
 8009330:	dc14      	bgt.n	800935c <__b2d+0x4c>
 8009332:	f1c0 0e0b 	rsb	lr, r0, #11
 8009336:	fa24 f10e 	lsr.w	r1, r4, lr
 800933a:	42be      	cmp	r6, r7
 800933c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 8009340:	bf34      	ite	cc
 8009342:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009346:	2100      	movcs	r1, #0
 8009348:	3015      	adds	r0, #21
 800934a:	fa04 f000 	lsl.w	r0, r4, r0
 800934e:	fa21 f10e 	lsr.w	r1, r1, lr
 8009352:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009356:	ea40 0201 	orr.w	r2, r0, r1
 800935a:	e023      	b.n	80093a4 <__b2d+0x94>
 800935c:	42be      	cmp	r6, r7
 800935e:	bf3a      	itte	cc
 8009360:	f1a5 0708 	subcc.w	r7, r5, #8
 8009364:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009368:	2100      	movcs	r1, #0
 800936a:	380b      	subs	r0, #11
 800936c:	d015      	beq.n	800939a <__b2d+0x8a>
 800936e:	4084      	lsls	r4, r0
 8009370:	f1c0 0520 	rsb	r5, r0, #32
 8009374:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8009378:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800937c:	42b7      	cmp	r7, r6
 800937e:	fa21 fe05 	lsr.w	lr, r1, r5
 8009382:	ea44 030e 	orr.w	r3, r4, lr
 8009386:	bf8c      	ite	hi
 8009388:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 800938c:	2400      	movls	r4, #0
 800938e:	fa01 f000 	lsl.w	r0, r1, r0
 8009392:	40ec      	lsrs	r4, r5
 8009394:	ea40 0204 	orr.w	r2, r0, r4
 8009398:	e004      	b.n	80093a4 <__b2d+0x94>
 800939a:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800939e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80093a2:	460a      	mov	r2, r1
 80093a4:	ec43 2b10 	vmov	d0, r2, r3
 80093a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080093aa <__d2b>:
 80093aa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093ae:	460e      	mov	r6, r1
 80093b0:	2101      	movs	r1, #1
 80093b2:	ec59 8b10 	vmov	r8, r9, d0
 80093b6:	4615      	mov	r5, r2
 80093b8:	f7ff fcbc 	bl	8008d34 <_Balloc>
 80093bc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80093c0:	4607      	mov	r7, r0
 80093c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093c6:	b10c      	cbz	r4, 80093cc <__d2b+0x22>
 80093c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093cc:	9301      	str	r3, [sp, #4]
 80093ce:	f1b8 0f00 	cmp.w	r8, #0
 80093d2:	d019      	beq.n	8009408 <__d2b+0x5e>
 80093d4:	a802      	add	r0, sp, #8
 80093d6:	f840 8d08 	str.w	r8, [r0, #-8]!
 80093da:	f7ff fd90 	bl	8008efe <__lo0bits>
 80093de:	9b00      	ldr	r3, [sp, #0]
 80093e0:	b148      	cbz	r0, 80093f6 <__d2b+0x4c>
 80093e2:	9a01      	ldr	r2, [sp, #4]
 80093e4:	f1c0 0120 	rsb	r1, r0, #32
 80093e8:	fa02 f101 	lsl.w	r1, r2, r1
 80093ec:	430b      	orrs	r3, r1
 80093ee:	40c2      	lsrs	r2, r0
 80093f0:	617b      	str	r3, [r7, #20]
 80093f2:	9201      	str	r2, [sp, #4]
 80093f4:	e000      	b.n	80093f8 <__d2b+0x4e>
 80093f6:	617b      	str	r3, [r7, #20]
 80093f8:	9b01      	ldr	r3, [sp, #4]
 80093fa:	61bb      	str	r3, [r7, #24]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	bf14      	ite	ne
 8009400:	2102      	movne	r1, #2
 8009402:	2101      	moveq	r1, #1
 8009404:	6139      	str	r1, [r7, #16]
 8009406:	e007      	b.n	8009418 <__d2b+0x6e>
 8009408:	a801      	add	r0, sp, #4
 800940a:	f7ff fd78 	bl	8008efe <__lo0bits>
 800940e:	9b01      	ldr	r3, [sp, #4]
 8009410:	617b      	str	r3, [r7, #20]
 8009412:	2101      	movs	r1, #1
 8009414:	6139      	str	r1, [r7, #16]
 8009416:	3020      	adds	r0, #32
 8009418:	b134      	cbz	r4, 8009428 <__d2b+0x7e>
 800941a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800941e:	4404      	add	r4, r0
 8009420:	6034      	str	r4, [r6, #0]
 8009422:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009426:	e009      	b.n	800943c <__d2b+0x92>
 8009428:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800942c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009430:	6030      	str	r0, [r6, #0]
 8009432:	6918      	ldr	r0, [r3, #16]
 8009434:	f7ff fd43 	bl	8008ebe <__hi0bits>
 8009438:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800943c:	6028      	str	r0, [r5, #0]
 800943e:	4638      	mov	r0, r7
 8009440:	b003      	add	sp, #12
 8009442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009446 <__ratio>:
 8009446:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800944a:	4688      	mov	r8, r1
 800944c:	4669      	mov	r1, sp
 800944e:	4681      	mov	r9, r0
 8009450:	f7ff ff5e 	bl	8009310 <__b2d>
 8009454:	a901      	add	r1, sp, #4
 8009456:	4640      	mov	r0, r8
 8009458:	ec55 4b10 	vmov	r4, r5, d0
 800945c:	f7ff ff58 	bl	8009310 <__b2d>
 8009460:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009464:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009468:	1a9a      	subs	r2, r3, r2
 800946a:	e89d 000a 	ldmia.w	sp, {r1, r3}
 800946e:	1ac9      	subs	r1, r1, r3
 8009470:	ec57 6b10 	vmov	r6, r7, d0
 8009474:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 8009478:	2b00      	cmp	r3, #0
 800947a:	bfcc      	ite	gt
 800947c:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 8009480:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 8009484:	4632      	mov	r2, r6
 8009486:	463b      	mov	r3, r7
 8009488:	4620      	mov	r0, r4
 800948a:	4629      	mov	r1, r5
 800948c:	f7f7 f9ea 	bl	8000864 <__aeabi_ddiv>
 8009490:	ec41 0b10 	vmov	d0, r0, r1
 8009494:	b003      	add	sp, #12
 8009496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800949a <__copybits>:
 800949a:	3901      	subs	r1, #1
 800949c:	b510      	push	{r4, lr}
 800949e:	1149      	asrs	r1, r1, #5
 80094a0:	6914      	ldr	r4, [r2, #16]
 80094a2:	3101      	adds	r1, #1
 80094a4:	f102 0314 	add.w	r3, r2, #20
 80094a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80094ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80094b0:	42a3      	cmp	r3, r4
 80094b2:	4602      	mov	r2, r0
 80094b4:	d204      	bcs.n	80094c0 <__copybits+0x26>
 80094b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80094ba:	f840 2b04 	str.w	r2, [r0], #4
 80094be:	e7f7      	b.n	80094b0 <__copybits+0x16>
 80094c0:	2300      	movs	r3, #0
 80094c2:	428a      	cmp	r2, r1
 80094c4:	d202      	bcs.n	80094cc <__copybits+0x32>
 80094c6:	f842 3b04 	str.w	r3, [r2], #4
 80094ca:	e7fa      	b.n	80094c2 <__copybits+0x28>
 80094cc:	bd10      	pop	{r4, pc}

080094ce <__any_on>:
 80094ce:	f100 0214 	add.w	r2, r0, #20
 80094d2:	6900      	ldr	r0, [r0, #16]
 80094d4:	114b      	asrs	r3, r1, #5
 80094d6:	4298      	cmp	r0, r3
 80094d8:	b510      	push	{r4, lr}
 80094da:	db0c      	blt.n	80094f6 <__any_on+0x28>
 80094dc:	dd0c      	ble.n	80094f8 <__any_on+0x2a>
 80094de:	f011 011f 	ands.w	r1, r1, #31
 80094e2:	d009      	beq.n	80094f8 <__any_on+0x2a>
 80094e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80094e8:	fa24 f001 	lsr.w	r0, r4, r1
 80094ec:	fa00 f101 	lsl.w	r1, r0, r1
 80094f0:	428c      	cmp	r4, r1
 80094f2:	d10c      	bne.n	800950e <__any_on+0x40>
 80094f4:	e000      	b.n	80094f8 <__any_on+0x2a>
 80094f6:	4603      	mov	r3, r0
 80094f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d904      	bls.n	800950a <__any_on+0x3c>
 8009500:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009504:	2900      	cmp	r1, #0
 8009506:	d0f9      	beq.n	80094fc <__any_on+0x2e>
 8009508:	e001      	b.n	800950e <__any_on+0x40>
 800950a:	2000      	movs	r0, #0
 800950c:	bd10      	pop	{r4, pc}
 800950e:	2001      	movs	r0, #1
 8009510:	bd10      	pop	{r4, pc}
	...

08009514 <_realloc_r>:
 8009514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009518:	4681      	mov	r9, r0
 800951a:	460c      	mov	r4, r1
 800951c:	b929      	cbnz	r1, 800952a <_realloc_r+0x16>
 800951e:	4611      	mov	r1, r2
 8009520:	b003      	add	sp, #12
 8009522:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009526:	f7fa bb31 	b.w	8003b8c <_malloc_r>
 800952a:	9201      	str	r2, [sp, #4]
 800952c:	f7fa fd56 	bl	8003fdc <__malloc_lock>
 8009530:	9a01      	ldr	r2, [sp, #4]
 8009532:	f854 ec04 	ldr.w	lr, [r4, #-4]
 8009536:	f102 080b 	add.w	r8, r2, #11
 800953a:	f1b8 0f16 	cmp.w	r8, #22
 800953e:	f1a4 0b08 	sub.w	fp, r4, #8
 8009542:	f02e 0503 	bic.w	r5, lr, #3
 8009546:	d903      	bls.n	8009550 <_realloc_r+0x3c>
 8009548:	f038 0807 	bics.w	r8, r8, #7
 800954c:	d502      	bpl.n	8009554 <_realloc_r+0x40>
 800954e:	e003      	b.n	8009558 <_realloc_r+0x44>
 8009550:	f04f 0810 	mov.w	r8, #16
 8009554:	4590      	cmp	r8, r2
 8009556:	d204      	bcs.n	8009562 <_realloc_r+0x4e>
 8009558:	230c      	movs	r3, #12
 800955a:	f8c9 3000 	str.w	r3, [r9]
 800955e:	2000      	movs	r0, #0
 8009560:	e17d      	b.n	800985e <_realloc_r+0x34a>
 8009562:	45a8      	cmp	r8, r5
 8009564:	f340 8150 	ble.w	8009808 <_realloc_r+0x2f4>
 8009568:	4ba6      	ldr	r3, [pc, #664]	; (8009804 <_realloc_r+0x2f0>)
 800956a:	6898      	ldr	r0, [r3, #8]
 800956c:	eb0b 0105 	add.w	r1, fp, r5
 8009570:	4281      	cmp	r1, r0
 8009572:	684f      	ldr	r7, [r1, #4]
 8009574:	d005      	beq.n	8009582 <_realloc_r+0x6e>
 8009576:	f027 0601 	bic.w	r6, r7, #1
 800957a:	440e      	add	r6, r1
 800957c:	6876      	ldr	r6, [r6, #4]
 800957e:	07f6      	lsls	r6, r6, #31
 8009580:	d426      	bmi.n	80095d0 <_realloc_r+0xbc>
 8009582:	f027 0a03 	bic.w	sl, r7, #3
 8009586:	4281      	cmp	r1, r0
 8009588:	eb05 070a 	add.w	r7, r5, sl
 800958c:	d118      	bne.n	80095c0 <_realloc_r+0xac>
 800958e:	f108 0610 	add.w	r6, r8, #16
 8009592:	42b7      	cmp	r7, r6
 8009594:	db1f      	blt.n	80095d6 <_realloc_r+0xc2>
 8009596:	eb0b 0008 	add.w	r0, fp, r8
 800959a:	ebc8 0707 	rsb	r7, r8, r7
 800959e:	f047 0701 	orr.w	r7, r7, #1
 80095a2:	6098      	str	r0, [r3, #8]
 80095a4:	6047      	str	r7, [r0, #4]
 80095a6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	ea43 0308 	orr.w	r3, r3, r8
 80095b2:	4648      	mov	r0, r9
 80095b4:	f844 3c04 	str.w	r3, [r4, #-4]
 80095b8:	f7fa fd11 	bl	8003fde <__malloc_unlock>
 80095bc:	4620      	mov	r0, r4
 80095be:	e14e      	b.n	800985e <_realloc_r+0x34a>
 80095c0:	45b8      	cmp	r8, r7
 80095c2:	dc08      	bgt.n	80095d6 <_realloc_r+0xc2>
 80095c4:	68cb      	ldr	r3, [r1, #12]
 80095c6:	688a      	ldr	r2, [r1, #8]
 80095c8:	463d      	mov	r5, r7
 80095ca:	60d3      	str	r3, [r2, #12]
 80095cc:	609a      	str	r2, [r3, #8]
 80095ce:	e11b      	b.n	8009808 <_realloc_r+0x2f4>
 80095d0:	f04f 0a00 	mov.w	sl, #0
 80095d4:	4651      	mov	r1, sl
 80095d6:	f01e 0f01 	tst.w	lr, #1
 80095da:	f040 80c3 	bne.w	8009764 <_realloc_r+0x250>
 80095de:	f854 7c08 	ldr.w	r7, [r4, #-8]
 80095e2:	ebc7 070b 	rsb	r7, r7, fp
 80095e6:	687e      	ldr	r6, [r7, #4]
 80095e8:	f026 0603 	bic.w	r6, r6, #3
 80095ec:	442e      	add	r6, r5
 80095ee:	2900      	cmp	r1, #0
 80095f0:	f000 8083 	beq.w	80096fa <_realloc_r+0x1e6>
 80095f4:	4281      	cmp	r1, r0
 80095f6:	44b2      	add	sl, r6
 80095f8:	d147      	bne.n	800968a <_realloc_r+0x176>
 80095fa:	f108 0110 	add.w	r1, r8, #16
 80095fe:	458a      	cmp	sl, r1
 8009600:	db7b      	blt.n	80096fa <_realloc_r+0x1e6>
 8009602:	463e      	mov	r6, r7
 8009604:	68fa      	ldr	r2, [r7, #12]
 8009606:	f856 1f08 	ldr.w	r1, [r6, #8]!
 800960a:	60ca      	str	r2, [r1, #12]
 800960c:	6091      	str	r1, [r2, #8]
 800960e:	1f2a      	subs	r2, r5, #4
 8009610:	2a24      	cmp	r2, #36	; 0x24
 8009612:	d825      	bhi.n	8009660 <_realloc_r+0x14c>
 8009614:	2a13      	cmp	r2, #19
 8009616:	d91b      	bls.n	8009650 <_realloc_r+0x13c>
 8009618:	6821      	ldr	r1, [r4, #0]
 800961a:	60b9      	str	r1, [r7, #8]
 800961c:	6861      	ldr	r1, [r4, #4]
 800961e:	60f9      	str	r1, [r7, #12]
 8009620:	2a1b      	cmp	r2, #27
 8009622:	d803      	bhi.n	800962c <_realloc_r+0x118>
 8009624:	f107 0210 	add.w	r2, r7, #16
 8009628:	3408      	adds	r4, #8
 800962a:	e012      	b.n	8009652 <_realloc_r+0x13e>
 800962c:	68a1      	ldr	r1, [r4, #8]
 800962e:	6139      	str	r1, [r7, #16]
 8009630:	68e1      	ldr	r1, [r4, #12]
 8009632:	6179      	str	r1, [r7, #20]
 8009634:	2a24      	cmp	r2, #36	; 0x24
 8009636:	bf01      	itttt	eq
 8009638:	6922      	ldreq	r2, [r4, #16]
 800963a:	61ba      	streq	r2, [r7, #24]
 800963c:	6961      	ldreq	r1, [r4, #20]
 800963e:	61f9      	streq	r1, [r7, #28]
 8009640:	bf19      	ittee	ne
 8009642:	f107 0218 	addne.w	r2, r7, #24
 8009646:	3410      	addne	r4, #16
 8009648:	f107 0220 	addeq.w	r2, r7, #32
 800964c:	3418      	addeq	r4, #24
 800964e:	e000      	b.n	8009652 <_realloc_r+0x13e>
 8009650:	4632      	mov	r2, r6
 8009652:	6821      	ldr	r1, [r4, #0]
 8009654:	6011      	str	r1, [r2, #0]
 8009656:	6861      	ldr	r1, [r4, #4]
 8009658:	6051      	str	r1, [r2, #4]
 800965a:	68a1      	ldr	r1, [r4, #8]
 800965c:	6091      	str	r1, [r2, #8]
 800965e:	e005      	b.n	800966c <_realloc_r+0x158>
 8009660:	4621      	mov	r1, r4
 8009662:	4630      	mov	r0, r6
 8009664:	9301      	str	r3, [sp, #4]
 8009666:	f7ff fb4a 	bl	8008cfe <memmove>
 800966a:	9b01      	ldr	r3, [sp, #4]
 800966c:	eb07 0208 	add.w	r2, r7, r8
 8009670:	ebc8 0a0a 	rsb	sl, r8, sl
 8009674:	609a      	str	r2, [r3, #8]
 8009676:	f04a 0301 	orr.w	r3, sl, #1
 800967a:	6053      	str	r3, [r2, #4]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f003 0301 	and.w	r3, r3, #1
 8009682:	ea43 0308 	orr.w	r3, r3, r8
 8009686:	607b      	str	r3, [r7, #4]
 8009688:	e0b6      	b.n	80097f8 <_realloc_r+0x2e4>
 800968a:	45d0      	cmp	r8, sl
 800968c:	dc35      	bgt.n	80096fa <_realloc_r+0x1e6>
 800968e:	68cb      	ldr	r3, [r1, #12]
 8009690:	688a      	ldr	r2, [r1, #8]
 8009692:	4638      	mov	r0, r7
 8009694:	60d3      	str	r3, [r2, #12]
 8009696:	609a      	str	r2, [r3, #8]
 8009698:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	60d3      	str	r3, [r2, #12]
 80096a0:	609a      	str	r2, [r3, #8]
 80096a2:	1f2a      	subs	r2, r5, #4
 80096a4:	2a24      	cmp	r2, #36	; 0x24
 80096a6:	d823      	bhi.n	80096f0 <_realloc_r+0x1dc>
 80096a8:	2a13      	cmp	r2, #19
 80096aa:	d91a      	bls.n	80096e2 <_realloc_r+0x1ce>
 80096ac:	6823      	ldr	r3, [r4, #0]
 80096ae:	60bb      	str	r3, [r7, #8]
 80096b0:	6863      	ldr	r3, [r4, #4]
 80096b2:	60fb      	str	r3, [r7, #12]
 80096b4:	2a1b      	cmp	r2, #27
 80096b6:	d803      	bhi.n	80096c0 <_realloc_r+0x1ac>
 80096b8:	f107 0010 	add.w	r0, r7, #16
 80096bc:	3408      	adds	r4, #8
 80096be:	e010      	b.n	80096e2 <_realloc_r+0x1ce>
 80096c0:	68a3      	ldr	r3, [r4, #8]
 80096c2:	613b      	str	r3, [r7, #16]
 80096c4:	68e3      	ldr	r3, [r4, #12]
 80096c6:	617b      	str	r3, [r7, #20]
 80096c8:	2a24      	cmp	r2, #36	; 0x24
 80096ca:	bf01      	itttt	eq
 80096cc:	6923      	ldreq	r3, [r4, #16]
 80096ce:	61bb      	streq	r3, [r7, #24]
 80096d0:	6963      	ldreq	r3, [r4, #20]
 80096d2:	61fb      	streq	r3, [r7, #28]
 80096d4:	bf19      	ittee	ne
 80096d6:	f107 0018 	addne.w	r0, r7, #24
 80096da:	3410      	addne	r4, #16
 80096dc:	f107 0020 	addeq.w	r0, r7, #32
 80096e0:	3418      	addeq	r4, #24
 80096e2:	6823      	ldr	r3, [r4, #0]
 80096e4:	6003      	str	r3, [r0, #0]
 80096e6:	6863      	ldr	r3, [r4, #4]
 80096e8:	6043      	str	r3, [r0, #4]
 80096ea:	68a3      	ldr	r3, [r4, #8]
 80096ec:	6083      	str	r3, [r0, #8]
 80096ee:	e002      	b.n	80096f6 <_realloc_r+0x1e2>
 80096f0:	4621      	mov	r1, r4
 80096f2:	f7ff fb04 	bl	8008cfe <memmove>
 80096f6:	4655      	mov	r5, sl
 80096f8:	e02e      	b.n	8009758 <_realloc_r+0x244>
 80096fa:	45b0      	cmp	r8, r6
 80096fc:	dc32      	bgt.n	8009764 <_realloc_r+0x250>
 80096fe:	4638      	mov	r0, r7
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8009706:	60d3      	str	r3, [r2, #12]
 8009708:	609a      	str	r2, [r3, #8]
 800970a:	1f2a      	subs	r2, r5, #4
 800970c:	2a24      	cmp	r2, #36	; 0x24
 800970e:	d825      	bhi.n	800975c <_realloc_r+0x248>
 8009710:	2a13      	cmp	r2, #19
 8009712:	d91a      	bls.n	800974a <_realloc_r+0x236>
 8009714:	6823      	ldr	r3, [r4, #0]
 8009716:	60bb      	str	r3, [r7, #8]
 8009718:	6863      	ldr	r3, [r4, #4]
 800971a:	60fb      	str	r3, [r7, #12]
 800971c:	2a1b      	cmp	r2, #27
 800971e:	d803      	bhi.n	8009728 <_realloc_r+0x214>
 8009720:	f107 0010 	add.w	r0, r7, #16
 8009724:	3408      	adds	r4, #8
 8009726:	e010      	b.n	800974a <_realloc_r+0x236>
 8009728:	68a3      	ldr	r3, [r4, #8]
 800972a:	613b      	str	r3, [r7, #16]
 800972c:	68e3      	ldr	r3, [r4, #12]
 800972e:	617b      	str	r3, [r7, #20]
 8009730:	2a24      	cmp	r2, #36	; 0x24
 8009732:	bf01      	itttt	eq
 8009734:	6923      	ldreq	r3, [r4, #16]
 8009736:	61bb      	streq	r3, [r7, #24]
 8009738:	6963      	ldreq	r3, [r4, #20]
 800973a:	61fb      	streq	r3, [r7, #28]
 800973c:	bf19      	ittee	ne
 800973e:	f107 0018 	addne.w	r0, r7, #24
 8009742:	3410      	addne	r4, #16
 8009744:	f107 0020 	addeq.w	r0, r7, #32
 8009748:	3418      	addeq	r4, #24
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	6003      	str	r3, [r0, #0]
 800974e:	6863      	ldr	r3, [r4, #4]
 8009750:	6043      	str	r3, [r0, #4]
 8009752:	68a3      	ldr	r3, [r4, #8]
 8009754:	6083      	str	r3, [r0, #8]
 8009756:	4635      	mov	r5, r6
 8009758:	46bb      	mov	fp, r7
 800975a:	e055      	b.n	8009808 <_realloc_r+0x2f4>
 800975c:	4621      	mov	r1, r4
 800975e:	f7ff face 	bl	8008cfe <memmove>
 8009762:	e7f8      	b.n	8009756 <_realloc_r+0x242>
 8009764:	4611      	mov	r1, r2
 8009766:	4648      	mov	r0, r9
 8009768:	f7fa fa10 	bl	8003b8c <_malloc_r>
 800976c:	4606      	mov	r6, r0
 800976e:	2800      	cmp	r0, #0
 8009770:	d042      	beq.n	80097f8 <_realloc_r+0x2e4>
 8009772:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009776:	f023 0301 	bic.w	r3, r3, #1
 800977a:	f1a0 0208 	sub.w	r2, r0, #8
 800977e:	445b      	add	r3, fp
 8009780:	429a      	cmp	r2, r3
 8009782:	d105      	bne.n	8009790 <_realloc_r+0x27c>
 8009784:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009788:	f023 0303 	bic.w	r3, r3, #3
 800978c:	441d      	add	r5, r3
 800978e:	e03b      	b.n	8009808 <_realloc_r+0x2f4>
 8009790:	1f2a      	subs	r2, r5, #4
 8009792:	2a24      	cmp	r2, #36	; 0x24
 8009794:	d829      	bhi.n	80097ea <_realloc_r+0x2d6>
 8009796:	2a13      	cmp	r2, #19
 8009798:	d91e      	bls.n	80097d8 <_realloc_r+0x2c4>
 800979a:	6823      	ldr	r3, [r4, #0]
 800979c:	6003      	str	r3, [r0, #0]
 800979e:	6863      	ldr	r3, [r4, #4]
 80097a0:	6043      	str	r3, [r0, #4]
 80097a2:	2a1b      	cmp	r2, #27
 80097a4:	d804      	bhi.n	80097b0 <_realloc_r+0x29c>
 80097a6:	f100 0308 	add.w	r3, r0, #8
 80097aa:	f104 0208 	add.w	r2, r4, #8
 80097ae:	e015      	b.n	80097dc <_realloc_r+0x2c8>
 80097b0:	68a3      	ldr	r3, [r4, #8]
 80097b2:	6083      	str	r3, [r0, #8]
 80097b4:	68e3      	ldr	r3, [r4, #12]
 80097b6:	60c3      	str	r3, [r0, #12]
 80097b8:	2a24      	cmp	r2, #36	; 0x24
 80097ba:	bf01      	itttt	eq
 80097bc:	6923      	ldreq	r3, [r4, #16]
 80097be:	6103      	streq	r3, [r0, #16]
 80097c0:	6961      	ldreq	r1, [r4, #20]
 80097c2:	6141      	streq	r1, [r0, #20]
 80097c4:	bf19      	ittee	ne
 80097c6:	f100 0310 	addne.w	r3, r0, #16
 80097ca:	f104 0210 	addne.w	r2, r4, #16
 80097ce:	f100 0318 	addeq.w	r3, r0, #24
 80097d2:	f104 0218 	addeq.w	r2, r4, #24
 80097d6:	e001      	b.n	80097dc <_realloc_r+0x2c8>
 80097d8:	4603      	mov	r3, r0
 80097da:	4622      	mov	r2, r4
 80097dc:	6811      	ldr	r1, [r2, #0]
 80097de:	6019      	str	r1, [r3, #0]
 80097e0:	6851      	ldr	r1, [r2, #4]
 80097e2:	6059      	str	r1, [r3, #4]
 80097e4:	6892      	ldr	r2, [r2, #8]
 80097e6:	609a      	str	r2, [r3, #8]
 80097e8:	e002      	b.n	80097f0 <_realloc_r+0x2dc>
 80097ea:	4621      	mov	r1, r4
 80097ec:	f7ff fa87 	bl	8008cfe <memmove>
 80097f0:	4621      	mov	r1, r4
 80097f2:	4648      	mov	r0, r9
 80097f4:	f7fe fcbe 	bl	8008174 <_free_r>
 80097f8:	4648      	mov	r0, r9
 80097fa:	f7fa fbf0 	bl	8003fde <__malloc_unlock>
 80097fe:	4630      	mov	r0, r6
 8009800:	e02d      	b.n	800985e <_realloc_r+0x34a>
 8009802:	bf00      	nop
 8009804:	20000004 	.word	0x20000004
 8009808:	ebc8 0205 	rsb	r2, r8, r5
 800980c:	2a0f      	cmp	r2, #15
 800980e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009812:	d914      	bls.n	800983e <_realloc_r+0x32a>
 8009814:	f003 0301 	and.w	r3, r3, #1
 8009818:	eb0b 0108 	add.w	r1, fp, r8
 800981c:	ea43 0308 	orr.w	r3, r3, r8
 8009820:	f8cb 3004 	str.w	r3, [fp, #4]
 8009824:	f042 0301 	orr.w	r3, r2, #1
 8009828:	440a      	add	r2, r1
 800982a:	604b      	str	r3, [r1, #4]
 800982c:	6853      	ldr	r3, [r2, #4]
 800982e:	f043 0301 	orr.w	r3, r3, #1
 8009832:	6053      	str	r3, [r2, #4]
 8009834:	3108      	adds	r1, #8
 8009836:	4648      	mov	r0, r9
 8009838:	f7fe fc9c 	bl	8008174 <_free_r>
 800983c:	e00a      	b.n	8009854 <_realloc_r+0x340>
 800983e:	f003 0301 	and.w	r3, r3, #1
 8009842:	432b      	orrs	r3, r5
 8009844:	eb0b 0205 	add.w	r2, fp, r5
 8009848:	f8cb 3004 	str.w	r3, [fp, #4]
 800984c:	6853      	ldr	r3, [r2, #4]
 800984e:	f043 0301 	orr.w	r3, r3, #1
 8009852:	6053      	str	r3, [r2, #4]
 8009854:	4648      	mov	r0, r9
 8009856:	f7fa fbc2 	bl	8003fde <__malloc_unlock>
 800985a:	f10b 0008 	add.w	r0, fp, #8
 800985e:	b003      	add	sp, #12
 8009860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009864 <__sread>:
 8009864:	b510      	push	{r4, lr}
 8009866:	460c      	mov	r4, r1
 8009868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800986c:	f000 fa2a 	bl	8009cc4 <_read_r>
 8009870:	2800      	cmp	r0, #0
 8009872:	bfab      	itete	ge
 8009874:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009876:	89a3      	ldrhlt	r3, [r4, #12]
 8009878:	181b      	addge	r3, r3, r0
 800987a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800987e:	bfac      	ite	ge
 8009880:	6563      	strge	r3, [r4, #84]	; 0x54
 8009882:	81a3      	strhlt	r3, [r4, #12]
 8009884:	bd10      	pop	{r4, pc}

08009886 <__swrite>:
 8009886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800988a:	461f      	mov	r7, r3
 800988c:	898b      	ldrh	r3, [r1, #12]
 800988e:	05db      	lsls	r3, r3, #23
 8009890:	4605      	mov	r5, r0
 8009892:	460c      	mov	r4, r1
 8009894:	4616      	mov	r6, r2
 8009896:	d505      	bpl.n	80098a4 <__swrite+0x1e>
 8009898:	2302      	movs	r3, #2
 800989a:	2200      	movs	r2, #0
 800989c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a0:	f000 f9fe 	bl	8009ca0 <_lseek_r>
 80098a4:	89a3      	ldrh	r3, [r4, #12]
 80098a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098ae:	81a3      	strh	r3, [r4, #12]
 80098b0:	4632      	mov	r2, r6
 80098b2:	463b      	mov	r3, r7
 80098b4:	4628      	mov	r0, r5
 80098b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098ba:	f000 b8dd 	b.w	8009a78 <_write_r>

080098be <__sseek>:
 80098be:	b510      	push	{r4, lr}
 80098c0:	460c      	mov	r4, r1
 80098c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098c6:	f000 f9eb 	bl	8009ca0 <_lseek_r>
 80098ca:	1c43      	adds	r3, r0, #1
 80098cc:	89a3      	ldrh	r3, [r4, #12]
 80098ce:	bf15      	itete	ne
 80098d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80098d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098da:	81a3      	strheq	r3, [r4, #12]
 80098dc:	bf18      	it	ne
 80098de:	81a3      	strhne	r3, [r4, #12]
 80098e0:	bd10      	pop	{r4, pc}

080098e2 <__sclose>:
 80098e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098e6:	f000 b907 	b.w	8009af8 <_close_r>

080098ea <strncmp>:
 80098ea:	b530      	push	{r4, r5, lr}
 80098ec:	b182      	cbz	r2, 8009910 <strncmp+0x26>
 80098ee:	1e45      	subs	r5, r0, #1
 80098f0:	3901      	subs	r1, #1
 80098f2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80098f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80098fa:	42a3      	cmp	r3, r4
 80098fc:	d106      	bne.n	800990c <strncmp+0x22>
 80098fe:	43ec      	mvns	r4, r5
 8009900:	4414      	add	r4, r2
 8009902:	42e0      	cmn	r0, r4
 8009904:	d001      	beq.n	800990a <strncmp+0x20>
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1f3      	bne.n	80098f2 <strncmp+0x8>
 800990a:	461c      	mov	r4, r3
 800990c:	1b18      	subs	r0, r3, r4
 800990e:	bd30      	pop	{r4, r5, pc}
 8009910:	4610      	mov	r0, r2
 8009912:	bd30      	pop	{r4, r5, pc}

08009914 <__ssprint_r>:
 8009914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009918:	4693      	mov	fp, r2
 800991a:	6892      	ldr	r2, [r2, #8]
 800991c:	4681      	mov	r9, r0
 800991e:	460c      	mov	r4, r1
 8009920:	b34a      	cbz	r2, 8009976 <__ssprint_r+0x62>
 8009922:	2300      	movs	r3, #0
 8009924:	f8db a000 	ldr.w	sl, [fp]
 8009928:	9301      	str	r3, [sp, #4]
 800992a:	461f      	mov	r7, r3
 800992c:	e006      	b.n	800993c <__ssprint_r+0x28>
 800992e:	f8da 3000 	ldr.w	r3, [sl]
 8009932:	f8da 7004 	ldr.w	r7, [sl, #4]
 8009936:	9301      	str	r3, [sp, #4]
 8009938:	f10a 0a08 	add.w	sl, sl, #8
 800993c:	2f00      	cmp	r7, #0
 800993e:	d0f6      	beq.n	800992e <__ssprint_r+0x1a>
 8009940:	68a6      	ldr	r6, [r4, #8]
 8009942:	42b7      	cmp	r7, r6
 8009944:	d360      	bcc.n	8009a08 <__ssprint_r+0xf4>
 8009946:	89a0      	ldrh	r0, [r4, #12]
 8009948:	f410 6f90 	tst.w	r0, #1152	; 0x480
 800994c:	d117      	bne.n	800997e <__ssprint_r+0x6a>
 800994e:	42b7      	cmp	r7, r6
 8009950:	d35a      	bcc.n	8009a08 <__ssprint_r+0xf4>
 8009952:	4632      	mov	r2, r6
 8009954:	9901      	ldr	r1, [sp, #4]
 8009956:	6820      	ldr	r0, [r4, #0]
 8009958:	f7ff f9d1 	bl	8008cfe <memmove>
 800995c:	68a2      	ldr	r2, [r4, #8]
 800995e:	1b92      	subs	r2, r2, r6
 8009960:	60a2      	str	r2, [r4, #8]
 8009962:	6822      	ldr	r2, [r4, #0]
 8009964:	4416      	add	r6, r2
 8009966:	f8db 2008 	ldr.w	r2, [fp, #8]
 800996a:	6026      	str	r6, [r4, #0]
 800996c:	1bd7      	subs	r7, r2, r7
 800996e:	f8cb 7008 	str.w	r7, [fp, #8]
 8009972:	2f00      	cmp	r7, #0
 8009974:	d1db      	bne.n	800992e <__ssprint_r+0x1a>
 8009976:	2000      	movs	r0, #0
 8009978:	f8cb 0004 	str.w	r0, [fp, #4]
 800997c:	e046      	b.n	8009a0c <__ssprint_r+0xf8>
 800997e:	6825      	ldr	r5, [r4, #0]
 8009980:	6921      	ldr	r1, [r4, #16]
 8009982:	ebc1 0805 	rsb	r8, r1, r5
 8009986:	f108 0201 	add.w	r2, r8, #1
 800998a:	6965      	ldr	r5, [r4, #20]
 800998c:	443a      	add	r2, r7
 800998e:	2302      	movs	r3, #2
 8009990:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009994:	fb95 f5f3 	sdiv	r5, r5, r3
 8009998:	4295      	cmp	r5, r2
 800999a:	bf38      	it	cc
 800999c:	4615      	movcc	r5, r2
 800999e:	0543      	lsls	r3, r0, #21
 80099a0:	d510      	bpl.n	80099c4 <__ssprint_r+0xb0>
 80099a2:	4629      	mov	r1, r5
 80099a4:	4648      	mov	r0, r9
 80099a6:	f7fa f8f1 	bl	8003b8c <_malloc_r>
 80099aa:	4606      	mov	r6, r0
 80099ac:	b1a0      	cbz	r0, 80099d8 <__ssprint_r+0xc4>
 80099ae:	4642      	mov	r2, r8
 80099b0:	6921      	ldr	r1, [r4, #16]
 80099b2:	f7ff f999 	bl	8008ce8 <memcpy>
 80099b6:	89a2      	ldrh	r2, [r4, #12]
 80099b8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80099bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80099c0:	81a2      	strh	r2, [r4, #12]
 80099c2:	e018      	b.n	80099f6 <__ssprint_r+0xe2>
 80099c4:	462a      	mov	r2, r5
 80099c6:	4648      	mov	r0, r9
 80099c8:	f7ff fda4 	bl	8009514 <_realloc_r>
 80099cc:	4606      	mov	r6, r0
 80099ce:	b990      	cbnz	r0, 80099f6 <__ssprint_r+0xe2>
 80099d0:	6921      	ldr	r1, [r4, #16]
 80099d2:	4648      	mov	r0, r9
 80099d4:	f7fe fbce 	bl	8008174 <_free_r>
 80099d8:	220c      	movs	r2, #12
 80099da:	f8c9 2000 	str.w	r2, [r9]
 80099de:	89a2      	ldrh	r2, [r4, #12]
 80099e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099e4:	81a2      	strh	r2, [r4, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f8cb 2008 	str.w	r2, [fp, #8]
 80099ec:	f8cb 2004 	str.w	r2, [fp, #4]
 80099f0:	f04f 30ff 	mov.w	r0, #4294967295
 80099f4:	e00a      	b.n	8009a0c <__ssprint_r+0xf8>
 80099f6:	6126      	str	r6, [r4, #16]
 80099f8:	6165      	str	r5, [r4, #20]
 80099fa:	4446      	add	r6, r8
 80099fc:	ebc8 0505 	rsb	r5, r8, r5
 8009a00:	6026      	str	r6, [r4, #0]
 8009a02:	60a5      	str	r5, [r4, #8]
 8009a04:	463e      	mov	r6, r7
 8009a06:	e7a2      	b.n	800994e <__ssprint_r+0x3a>
 8009a08:	463e      	mov	r6, r7
 8009a0a:	e7a2      	b.n	8009952 <__ssprint_r+0x3e>
 8009a0c:	b003      	add	sp, #12
 8009a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a12 <__sprint_r>:
 8009a12:	6893      	ldr	r3, [r2, #8]
 8009a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a18:	4680      	mov	r8, r0
 8009a1a:	460f      	mov	r7, r1
 8009a1c:	4614      	mov	r4, r2
 8009a1e:	b91b      	cbnz	r3, 8009a28 <__sprint_r+0x16>
 8009a20:	6053      	str	r3, [r2, #4]
 8009a22:	4618      	mov	r0, r3
 8009a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a28:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8009a2a:	049d      	lsls	r5, r3, #18
 8009a2c:	d51c      	bpl.n	8009a68 <__sprint_r+0x56>
 8009a2e:	6815      	ldr	r5, [r2, #0]
 8009a30:	68a0      	ldr	r0, [r4, #8]
 8009a32:	3508      	adds	r5, #8
 8009a34:	b1d0      	cbz	r0, 8009a6c <__sprint_r+0x5a>
 8009a36:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8009a3a:	f855 ac08 	ldr.w	sl, [r5, #-8]
 8009a3e:	08b6      	lsrs	r6, r6, #2
 8009a40:	f04f 0900 	mov.w	r9, #0
 8009a44:	454e      	cmp	r6, r9
 8009a46:	dd0a      	ble.n	8009a5e <__sprint_r+0x4c>
 8009a48:	463a      	mov	r2, r7
 8009a4a:	f85a 1029 	ldr.w	r1, [sl, r9, lsl #2]
 8009a4e:	4640      	mov	r0, r8
 8009a50:	f000 f8f3 	bl	8009c3a <_fputwc_r>
 8009a54:	1c43      	adds	r3, r0, #1
 8009a56:	d009      	beq.n	8009a6c <__sprint_r+0x5a>
 8009a58:	f109 0901 	add.w	r9, r9, #1
 8009a5c:	e7f2      	b.n	8009a44 <__sprint_r+0x32>
 8009a5e:	68a3      	ldr	r3, [r4, #8]
 8009a60:	eba3 0686 	sub.w	r6, r3, r6, lsl #2
 8009a64:	60a6      	str	r6, [r4, #8]
 8009a66:	e7e3      	b.n	8009a30 <__sprint_r+0x1e>
 8009a68:	f7fe fc42 	bl	80082f0 <__sfvwrite_r>
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	60a3      	str	r3, [r4, #8]
 8009a70:	6063      	str	r3, [r4, #4]
 8009a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08009a78 <_write_r>:
 8009a78:	b538      	push	{r3, r4, r5, lr}
 8009a7a:	4c07      	ldr	r4, [pc, #28]	; (8009a98 <_write_r+0x20>)
 8009a7c:	4605      	mov	r5, r0
 8009a7e:	4608      	mov	r0, r1
 8009a80:	4611      	mov	r1, r2
 8009a82:	2200      	movs	r2, #0
 8009a84:	6022      	str	r2, [r4, #0]
 8009a86:	461a      	mov	r2, r3
 8009a88:	f7f9 ff9a 	bl	80039c0 <_write>
 8009a8c:	1c43      	adds	r3, r0, #1
 8009a8e:	d102      	bne.n	8009a96 <_write_r+0x1e>
 8009a90:	6823      	ldr	r3, [r4, #0]
 8009a92:	b103      	cbz	r3, 8009a96 <_write_r+0x1e>
 8009a94:	602b      	str	r3, [r5, #0]
 8009a96:	bd38      	pop	{r3, r4, r5, pc}
 8009a98:	200007dc 	.word	0x200007dc

08009a9c <_calloc_r>:
 8009a9c:	b510      	push	{r4, lr}
 8009a9e:	4351      	muls	r1, r2
 8009aa0:	f7fa f874 	bl	8003b8c <_malloc_r>
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	b320      	cbz	r0, 8009af2 <_calloc_r+0x56>
 8009aa8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8009aac:	f022 0203 	bic.w	r2, r2, #3
 8009ab0:	3a04      	subs	r2, #4
 8009ab2:	2a24      	cmp	r2, #36	; 0x24
 8009ab4:	d81a      	bhi.n	8009aec <_calloc_r+0x50>
 8009ab6:	2a13      	cmp	r2, #19
 8009ab8:	d912      	bls.n	8009ae0 <_calloc_r+0x44>
 8009aba:	2100      	movs	r1, #0
 8009abc:	2a1b      	cmp	r2, #27
 8009abe:	6001      	str	r1, [r0, #0]
 8009ac0:	6041      	str	r1, [r0, #4]
 8009ac2:	d802      	bhi.n	8009aca <_calloc_r+0x2e>
 8009ac4:	f100 0308 	add.w	r3, r0, #8
 8009ac8:	e00b      	b.n	8009ae2 <_calloc_r+0x46>
 8009aca:	2a24      	cmp	r2, #36	; 0x24
 8009acc:	6081      	str	r1, [r0, #8]
 8009ace:	60c1      	str	r1, [r0, #12]
 8009ad0:	bf11      	iteee	ne
 8009ad2:	f100 0310 	addne.w	r3, r0, #16
 8009ad6:	6101      	streq	r1, [r0, #16]
 8009ad8:	f100 0318 	addeq.w	r3, r0, #24
 8009adc:	6141      	streq	r1, [r0, #20]
 8009ade:	e000      	b.n	8009ae2 <_calloc_r+0x46>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	601a      	str	r2, [r3, #0]
 8009ae6:	605a      	str	r2, [r3, #4]
 8009ae8:	609a      	str	r2, [r3, #8]
 8009aea:	e002      	b.n	8009af2 <_calloc_r+0x56>
 8009aec:	2100      	movs	r1, #0
 8009aee:	f7fa fa6d 	bl	8003fcc <memset>
 8009af2:	4620      	mov	r0, r4
 8009af4:	bd10      	pop	{r4, pc}
	...

08009af8 <_close_r>:
 8009af8:	b538      	push	{r3, r4, r5, lr}
 8009afa:	4c06      	ldr	r4, [pc, #24]	; (8009b14 <_close_r+0x1c>)
 8009afc:	2300      	movs	r3, #0
 8009afe:	4605      	mov	r5, r0
 8009b00:	4608      	mov	r0, r1
 8009b02:	6023      	str	r3, [r4, #0]
 8009b04:	f7f9 ff94 	bl	8003a30 <_close>
 8009b08:	1c43      	adds	r3, r0, #1
 8009b0a:	d102      	bne.n	8009b12 <_close_r+0x1a>
 8009b0c:	6823      	ldr	r3, [r4, #0]
 8009b0e:	b103      	cbz	r3, 8009b12 <_close_r+0x1a>
 8009b10:	602b      	str	r3, [r5, #0]
 8009b12:	bd38      	pop	{r3, r4, r5, pc}
 8009b14:	200007dc 	.word	0x200007dc

08009b18 <_fclose_r>:
 8009b18:	b570      	push	{r4, r5, r6, lr}
 8009b1a:	4605      	mov	r5, r0
 8009b1c:	460c      	mov	r4, r1
 8009b1e:	b909      	cbnz	r1, 8009b24 <_fclose_r+0xc>
 8009b20:	2000      	movs	r0, #0
 8009b22:	bd70      	pop	{r4, r5, r6, pc}
 8009b24:	b118      	cbz	r0, 8009b2e <_fclose_r+0x16>
 8009b26:	6983      	ldr	r3, [r0, #24]
 8009b28:	b90b      	cbnz	r3, 8009b2e <_fclose_r+0x16>
 8009b2a:	f7fe fa5b 	bl	8007fe4 <__sinit>
 8009b2e:	4b20      	ldr	r3, [pc, #128]	; (8009bb0 <_fclose_r+0x98>)
 8009b30:	429c      	cmp	r4, r3
 8009b32:	d101      	bne.n	8009b38 <_fclose_r+0x20>
 8009b34:	686c      	ldr	r4, [r5, #4]
 8009b36:	e008      	b.n	8009b4a <_fclose_r+0x32>
 8009b38:	4b1e      	ldr	r3, [pc, #120]	; (8009bb4 <_fclose_r+0x9c>)
 8009b3a:	429c      	cmp	r4, r3
 8009b3c:	d101      	bne.n	8009b42 <_fclose_r+0x2a>
 8009b3e:	68ac      	ldr	r4, [r5, #8]
 8009b40:	e003      	b.n	8009b4a <_fclose_r+0x32>
 8009b42:	4b1d      	ldr	r3, [pc, #116]	; (8009bb8 <_fclose_r+0xa0>)
 8009b44:	429c      	cmp	r4, r3
 8009b46:	bf08      	it	eq
 8009b48:	68ec      	ldreq	r4, [r5, #12]
 8009b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d0e6      	beq.n	8009b20 <_fclose_r+0x8>
 8009b52:	4621      	mov	r1, r4
 8009b54:	4628      	mov	r0, r5
 8009b56:	f7fe f94b 	bl	8007df0 <__sflush_r>
 8009b5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009b5c:	4606      	mov	r6, r0
 8009b5e:	b133      	cbz	r3, 8009b6e <_fclose_r+0x56>
 8009b60:	6a21      	ldr	r1, [r4, #32]
 8009b62:	4628      	mov	r0, r5
 8009b64:	4798      	blx	r3
 8009b66:	2800      	cmp	r0, #0
 8009b68:	bfb8      	it	lt
 8009b6a:	f04f 36ff 	movlt.w	r6, #4294967295
 8009b6e:	89a3      	ldrh	r3, [r4, #12]
 8009b70:	061b      	lsls	r3, r3, #24
 8009b72:	d503      	bpl.n	8009b7c <_fclose_r+0x64>
 8009b74:	6921      	ldr	r1, [r4, #16]
 8009b76:	4628      	mov	r0, r5
 8009b78:	f7fe fafc 	bl	8008174 <_free_r>
 8009b7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b7e:	b141      	cbz	r1, 8009b92 <_fclose_r+0x7a>
 8009b80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b84:	4299      	cmp	r1, r3
 8009b86:	d002      	beq.n	8009b8e <_fclose_r+0x76>
 8009b88:	4628      	mov	r0, r5
 8009b8a:	f7fe faf3 	bl	8008174 <_free_r>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	6363      	str	r3, [r4, #52]	; 0x34
 8009b92:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009b94:	b121      	cbz	r1, 8009ba0 <_fclose_r+0x88>
 8009b96:	4628      	mov	r0, r5
 8009b98:	f7fe faec 	bl	8008174 <_free_r>
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	64a3      	str	r3, [r4, #72]	; 0x48
 8009ba0:	f7fe fa90 	bl	80080c4 <__sfp_lock_acquire>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	81a3      	strh	r3, [r4, #12]
 8009ba8:	f7fe fa8d 	bl	80080c6 <__sfp_lock_release>
 8009bac:	4630      	mov	r0, r6
 8009bae:	bd70      	pop	{r4, r5, r6, pc}
 8009bb0:	0800a134 	.word	0x0800a134
 8009bb4:	0800a154 	.word	0x0800a154
 8009bb8:	0800a174 	.word	0x0800a174

08009bbc <__fputwc>:
 8009bbc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009bc0:	4680      	mov	r8, r0
 8009bc2:	460e      	mov	r6, r1
 8009bc4:	4614      	mov	r4, r2
 8009bc6:	f7ff f81d 	bl	8008c04 <__locale_mb_cur_max>
 8009bca:	2801      	cmp	r0, #1
 8009bcc:	d106      	bne.n	8009bdc <__fputwc+0x20>
 8009bce:	1e73      	subs	r3, r6, #1
 8009bd0:	2bfe      	cmp	r3, #254	; 0xfe
 8009bd2:	d803      	bhi.n	8009bdc <__fputwc+0x20>
 8009bd4:	f88d 6004 	strb.w	r6, [sp, #4]
 8009bd8:	4605      	mov	r5, r0
 8009bda:	e00e      	b.n	8009bfa <__fputwc+0x3e>
 8009bdc:	4632      	mov	r2, r6
 8009bde:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8009be2:	a901      	add	r1, sp, #4
 8009be4:	4640      	mov	r0, r8
 8009be6:	f000 f8dd 	bl	8009da4 <_wcrtomb_r>
 8009bea:	1c42      	adds	r2, r0, #1
 8009bec:	4605      	mov	r5, r0
 8009bee:	d104      	bne.n	8009bfa <__fputwc+0x3e>
 8009bf0:	89a3      	ldrh	r3, [r4, #12]
 8009bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bf6:	81a3      	strh	r3, [r4, #12]
 8009bf8:	e01c      	b.n	8009c34 <__fputwc+0x78>
 8009bfa:	2700      	movs	r7, #0
 8009bfc:	42af      	cmp	r7, r5
 8009bfe:	d018      	beq.n	8009c32 <__fputwc+0x76>
 8009c00:	ab01      	add	r3, sp, #4
 8009c02:	5cf9      	ldrb	r1, [r7, r3]
 8009c04:	68a3      	ldr	r3, [r4, #8]
 8009c06:	3b01      	subs	r3, #1
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	60a3      	str	r3, [r4, #8]
 8009c0c:	da04      	bge.n	8009c18 <__fputwc+0x5c>
 8009c0e:	69a2      	ldr	r2, [r4, #24]
 8009c10:	4293      	cmp	r3, r2
 8009c12:	db06      	blt.n	8009c22 <__fputwc+0x66>
 8009c14:	290a      	cmp	r1, #10
 8009c16:	d004      	beq.n	8009c22 <__fputwc+0x66>
 8009c18:	6823      	ldr	r3, [r4, #0]
 8009c1a:	1c5a      	adds	r2, r3, #1
 8009c1c:	6022      	str	r2, [r4, #0]
 8009c1e:	7019      	strb	r1, [r3, #0]
 8009c20:	e005      	b.n	8009c2e <__fputwc+0x72>
 8009c22:	4622      	mov	r2, r4
 8009c24:	4640      	mov	r0, r8
 8009c26:	f000 f85f 	bl	8009ce8 <__swbuf_r>
 8009c2a:	1c43      	adds	r3, r0, #1
 8009c2c:	d002      	beq.n	8009c34 <__fputwc+0x78>
 8009c2e:	3701      	adds	r7, #1
 8009c30:	e7e4      	b.n	8009bfc <__fputwc+0x40>
 8009c32:	4630      	mov	r0, r6
 8009c34:	b002      	add	sp, #8
 8009c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009c3a <_fputwc_r>:
 8009c3a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8009c3e:	b410      	push	{r4}
 8009c40:	049c      	lsls	r4, r3, #18
 8009c42:	d406      	bmi.n	8009c52 <_fputwc_r+0x18>
 8009c44:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8009c46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009c4a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8009c4e:	8193      	strh	r3, [r2, #12]
 8009c50:	6654      	str	r4, [r2, #100]	; 0x64
 8009c52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c56:	f7ff bfb1 	b.w	8009bbc <__fputwc>
	...

08009c5c <_fstat_r>:
 8009c5c:	b538      	push	{r3, r4, r5, lr}
 8009c5e:	4c07      	ldr	r4, [pc, #28]	; (8009c7c <_fstat_r+0x20>)
 8009c60:	2300      	movs	r3, #0
 8009c62:	4605      	mov	r5, r0
 8009c64:	4608      	mov	r0, r1
 8009c66:	4611      	mov	r1, r2
 8009c68:	6023      	str	r3, [r4, #0]
 8009c6a:	f7f9 fee9 	bl	8003a40 <_fstat>
 8009c6e:	1c43      	adds	r3, r0, #1
 8009c70:	d102      	bne.n	8009c78 <_fstat_r+0x1c>
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	b103      	cbz	r3, 8009c78 <_fstat_r+0x1c>
 8009c76:	602b      	str	r3, [r5, #0]
 8009c78:	bd38      	pop	{r3, r4, r5, pc}
 8009c7a:	bf00      	nop
 8009c7c:	200007dc 	.word	0x200007dc

08009c80 <_isatty_r>:
 8009c80:	b538      	push	{r3, r4, r5, lr}
 8009c82:	4c06      	ldr	r4, [pc, #24]	; (8009c9c <_isatty_r+0x1c>)
 8009c84:	2300      	movs	r3, #0
 8009c86:	4605      	mov	r5, r0
 8009c88:	4608      	mov	r0, r1
 8009c8a:	6023      	str	r3, [r4, #0]
 8009c8c:	f7f9 fee0 	bl	8003a50 <_isatty>
 8009c90:	1c43      	adds	r3, r0, #1
 8009c92:	d102      	bne.n	8009c9a <_isatty_r+0x1a>
 8009c94:	6823      	ldr	r3, [r4, #0]
 8009c96:	b103      	cbz	r3, 8009c9a <_isatty_r+0x1a>
 8009c98:	602b      	str	r3, [r5, #0]
 8009c9a:	bd38      	pop	{r3, r4, r5, pc}
 8009c9c:	200007dc 	.word	0x200007dc

08009ca0 <_lseek_r>:
 8009ca0:	b538      	push	{r3, r4, r5, lr}
 8009ca2:	4c07      	ldr	r4, [pc, #28]	; (8009cc0 <_lseek_r+0x20>)
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	4608      	mov	r0, r1
 8009ca8:	4611      	mov	r1, r2
 8009caa:	2200      	movs	r2, #0
 8009cac:	6022      	str	r2, [r4, #0]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	f7f9 fed6 	bl	8003a60 <_lseek>
 8009cb4:	1c43      	adds	r3, r0, #1
 8009cb6:	d102      	bne.n	8009cbe <_lseek_r+0x1e>
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	b103      	cbz	r3, 8009cbe <_lseek_r+0x1e>
 8009cbc:	602b      	str	r3, [r5, #0]
 8009cbe:	bd38      	pop	{r3, r4, r5, pc}
 8009cc0:	200007dc 	.word	0x200007dc

08009cc4 <_read_r>:
 8009cc4:	b538      	push	{r3, r4, r5, lr}
 8009cc6:	4c07      	ldr	r4, [pc, #28]	; (8009ce4 <_read_r+0x20>)
 8009cc8:	4605      	mov	r5, r0
 8009cca:	4608      	mov	r0, r1
 8009ccc:	4611      	mov	r1, r2
 8009cce:	2200      	movs	r2, #0
 8009cd0:	6022      	str	r2, [r4, #0]
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	f7f9 fecc 	bl	8003a70 <_read>
 8009cd8:	1c43      	adds	r3, r0, #1
 8009cda:	d102      	bne.n	8009ce2 <_read_r+0x1e>
 8009cdc:	6823      	ldr	r3, [r4, #0]
 8009cde:	b103      	cbz	r3, 8009ce2 <_read_r+0x1e>
 8009ce0:	602b      	str	r3, [r5, #0]
 8009ce2:	bd38      	pop	{r3, r4, r5, pc}
 8009ce4:	200007dc 	.word	0x200007dc

08009ce8 <__swbuf_r>:
 8009ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cea:	460f      	mov	r7, r1
 8009cec:	4614      	mov	r4, r2
 8009cee:	4606      	mov	r6, r0
 8009cf0:	b118      	cbz	r0, 8009cfa <__swbuf_r+0x12>
 8009cf2:	6983      	ldr	r3, [r0, #24]
 8009cf4:	b90b      	cbnz	r3, 8009cfa <__swbuf_r+0x12>
 8009cf6:	f7fe f975 	bl	8007fe4 <__sinit>
 8009cfa:	4b27      	ldr	r3, [pc, #156]	; (8009d98 <__swbuf_r+0xb0>)
 8009cfc:	429c      	cmp	r4, r3
 8009cfe:	d101      	bne.n	8009d04 <__swbuf_r+0x1c>
 8009d00:	6874      	ldr	r4, [r6, #4]
 8009d02:	e008      	b.n	8009d16 <__swbuf_r+0x2e>
 8009d04:	4b25      	ldr	r3, [pc, #148]	; (8009d9c <__swbuf_r+0xb4>)
 8009d06:	429c      	cmp	r4, r3
 8009d08:	d101      	bne.n	8009d0e <__swbuf_r+0x26>
 8009d0a:	68b4      	ldr	r4, [r6, #8]
 8009d0c:	e003      	b.n	8009d16 <__swbuf_r+0x2e>
 8009d0e:	4b24      	ldr	r3, [pc, #144]	; (8009da0 <__swbuf_r+0xb8>)
 8009d10:	429c      	cmp	r4, r3
 8009d12:	bf08      	it	eq
 8009d14:	68f4      	ldreq	r4, [r6, #12]
 8009d16:	69a3      	ldr	r3, [r4, #24]
 8009d18:	60a3      	str	r3, [r4, #8]
 8009d1a:	89a3      	ldrh	r3, [r4, #12]
 8009d1c:	0719      	lsls	r1, r3, #28
 8009d1e:	d50e      	bpl.n	8009d3e <__swbuf_r+0x56>
 8009d20:	6923      	ldr	r3, [r4, #16]
 8009d22:	b163      	cbz	r3, 8009d3e <__swbuf_r+0x56>
 8009d24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d28:	049a      	lsls	r2, r3, #18
 8009d2a:	b2fd      	uxtb	r5, r7
 8009d2c:	d410      	bmi.n	8009d50 <__swbuf_r+0x68>
 8009d2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009d32:	81a3      	strh	r3, [r4, #12]
 8009d34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d3a:	6663      	str	r3, [r4, #100]	; 0x64
 8009d3c:	e008      	b.n	8009d50 <__swbuf_r+0x68>
 8009d3e:	4621      	mov	r1, r4
 8009d40:	4630      	mov	r0, r6
 8009d42:	f7fd f9b5 	bl	80070b0 <__swsetup_r>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	d0ec      	beq.n	8009d24 <__swbuf_r+0x3c>
 8009d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d50:	6823      	ldr	r3, [r4, #0]
 8009d52:	6920      	ldr	r0, [r4, #16]
 8009d54:	1a18      	subs	r0, r3, r0
 8009d56:	6963      	ldr	r3, [r4, #20]
 8009d58:	4298      	cmp	r0, r3
 8009d5a:	db05      	blt.n	8009d68 <__swbuf_r+0x80>
 8009d5c:	4621      	mov	r1, r4
 8009d5e:	4630      	mov	r0, r6
 8009d60:	f7fe f8d6 	bl	8007f10 <_fflush_r>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d1f0      	bne.n	8009d4a <__swbuf_r+0x62>
 8009d68:	68a3      	ldr	r3, [r4, #8]
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	60a3      	str	r3, [r4, #8]
 8009d6e:	6823      	ldr	r3, [r4, #0]
 8009d70:	1c5a      	adds	r2, r3, #1
 8009d72:	6022      	str	r2, [r4, #0]
 8009d74:	701f      	strb	r7, [r3, #0]
 8009d76:	6962      	ldr	r2, [r4, #20]
 8009d78:	1c43      	adds	r3, r0, #1
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d004      	beq.n	8009d88 <__swbuf_r+0xa0>
 8009d7e:	89a3      	ldrh	r3, [r4, #12]
 8009d80:	07db      	lsls	r3, r3, #31
 8009d82:	d507      	bpl.n	8009d94 <__swbuf_r+0xac>
 8009d84:	2d0a      	cmp	r5, #10
 8009d86:	d105      	bne.n	8009d94 <__swbuf_r+0xac>
 8009d88:	4621      	mov	r1, r4
 8009d8a:	4630      	mov	r0, r6
 8009d8c:	f7fe f8c0 	bl	8007f10 <_fflush_r>
 8009d90:	2800      	cmp	r0, #0
 8009d92:	d1da      	bne.n	8009d4a <__swbuf_r+0x62>
 8009d94:	4628      	mov	r0, r5
 8009d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d98:	0800a134 	.word	0x0800a134
 8009d9c:	0800a154 	.word	0x0800a154
 8009da0:	0800a174 	.word	0x0800a174

08009da4 <_wcrtomb_r>:
 8009da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009da8:	461d      	mov	r5, r3
 8009daa:	4b0f      	ldr	r3, [pc, #60]	; (8009de8 <_wcrtomb_r+0x44>)
 8009dac:	b086      	sub	sp, #24
 8009dae:	4604      	mov	r4, r0
 8009db0:	4690      	mov	r8, r2
 8009db2:	460e      	mov	r6, r1
 8009db4:	681f      	ldr	r7, [r3, #0]
 8009db6:	b931      	cbnz	r1, 8009dc6 <_wcrtomb_r+0x22>
 8009db8:	f7fe ff20 	bl	8008bfc <__locale_charset>
 8009dbc:	9500      	str	r5, [sp, #0]
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	4632      	mov	r2, r6
 8009dc2:	a903      	add	r1, sp, #12
 8009dc4:	e005      	b.n	8009dd2 <_wcrtomb_r+0x2e>
 8009dc6:	f7fe ff19 	bl	8008bfc <__locale_charset>
 8009dca:	9500      	str	r5, [sp, #0]
 8009dcc:	4603      	mov	r3, r0
 8009dce:	4642      	mov	r2, r8
 8009dd0:	4631      	mov	r1, r6
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	47b8      	blx	r7
 8009dd6:	1c43      	adds	r3, r0, #1
 8009dd8:	bf01      	itttt	eq
 8009dda:	2300      	moveq	r3, #0
 8009ddc:	602b      	streq	r3, [r5, #0]
 8009dde:	238a      	moveq	r3, #138	; 0x8a
 8009de0:	6023      	streq	r3, [r4, #0]
 8009de2:	b006      	add	sp, #24
 8009de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009de8:	20000568 	.word	0x20000568

08009dec <__ascii_wctomb>:
 8009dec:	b149      	cbz	r1, 8009e02 <__ascii_wctomb+0x16>
 8009dee:	2aff      	cmp	r2, #255	; 0xff
 8009df0:	bf85      	ittet	hi
 8009df2:	238a      	movhi	r3, #138	; 0x8a
 8009df4:	6003      	strhi	r3, [r0, #0]
 8009df6:	700a      	strbls	r2, [r1, #0]
 8009df8:	f04f 30ff 	movhi.w	r0, #4294967295
 8009dfc:	bf98      	it	ls
 8009dfe:	2001      	movls	r0, #1
 8009e00:	4770      	bx	lr
 8009e02:	4608      	mov	r0, r1
 8009e04:	4770      	bx	lr
	...

08009e08 <_init>:
 8009e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0a:	bf00      	nop
 8009e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e0e:	bc08      	pop	{r3}
 8009e10:	469e      	mov	lr, r3
 8009e12:	4770      	bx	lr

08009e14 <_fini>:
 8009e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e16:	bf00      	nop
 8009e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e1a:	bc08      	pop	{r3}
 8009e1c:	469e      	mov	lr, r3
 8009e1e:	4770      	bx	lr
